
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010c  0080010c  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002417  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f46  00000000  00000000  00002c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094b  00000000  00000000  00003ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b32  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ce  00000000  00000000  0000537a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	45 01       	movw	r8, r10

0000006a <__ctors_end>:
  6a:	4e 01       	movw	r8, r28

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e4 ed       	ldi	r30, 0xD4	; 212
  80:	f5 e0       	ldi	r31, 0x05	; 5
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a5 32       	cpi	r26, 0x25	; 37
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  b8:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:
#include "global.h"
#include "interrupts.h"

//Call every 10us, will be used for controlling shift registers
ISR( TIMER0_COMPA_vect, ISR_NOBLOCK )
{
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	//Increment timer every 1ms
	timer.incrementTimer();
  e4:	81 e2       	ldi	r24, 0x21	; 33
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 b0 02 	call	0x560	; 0x560 <_ZN5Timer14incrementTimerEv>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_Z20setUpTimerInterruptsv>:
{
	//Setting up Timer0 (8-bit timer) to trigger ISR after 10us
	
	//TIMSK0 is the TC0 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR0A
	TIMSK0 |= (1 << OCIE0A);
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	
	//With 16MHz/64 = 250kHz clk, we would need 250 steps to get 0.1ms. 
	OCR0A = (uint8_t) 25;
 118:	89 e1       	ldi	r24, 0x19	; 25
 11a:	87 bd       	out	0x27, r24	; 39

	//Disconnect OC0A, and use CTC mode
	TCCR0A = (uint8_t) (1 << WGM01);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	84 bd       	out	0x24, r24	; 36

	//Use clk div64 as input to the timer making timer run at 250kHz
	TCCR0B = (uint8_t) (1 << CS01) | (1 << CS00);
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	95 bd       	out	0x25, r25	; 37
	
	//Setting up Timer2 (8-bit Timer). We are just going to use
	//measuring small time scales in the us
	
	OCR2A = (uint8_t) 255;
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//Disconnect OC2A, and use CTC mode
	TCCR2A = (uint8_t) (1 << WGM21);
 12a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	//Use clk div1 as input to the timer making timer run at 16MHz
	TCCR2B = (uint8_t) (1 << CS20);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//Enable Interrupts Globally.
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <main>:
SevenSeg sevenSegmentDisplay;
ShiftRegister_SIPO_pinout outputShiftRegister_pinout;


int main(void)
{	
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	1f 92       	push	r1
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	//Pins on port C for the output shift register
	//TODO put this into a function. Its ugly
	outputShiftRegister_pinout.serial = 0;
 144:	ec e0       	ldi	r30, 0x0C	; 12
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	80 83       	st	Z, r24
	
	sevenSegmentDisplay.sevenSegInit(2, &outputShiftRegister_pinout);
 152:	af 01       	movw	r20, r30
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>
	sevenSegmentDisplay.getTimerReference(&timer);
 15e:	61 e2       	ldi	r22, 0x21	; 33
 160:	71 e0       	ldi	r23, 0x01	; 1
 162:	8f e0       	ldi	r24, 0x0F	; 15
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	0e 94 a5 02 	call	0x54a	; 0x54a <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>

	//Enable Timer interrupts
	setUpTimerInterrupts();
 16a:	0e 94 87 00 	call	0x10e	; 0x10e <_Z20setUpTimerInterruptsv>
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 16e:	50 9a       	sbi	0x0a, 0	; 10
	//Declare Byte to write to shift register
	uint8_t counter = 0;
	uint8_t numberToPrint [2];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
 170:	81 e2       	ldi	r24, 0x21	; 33
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 178:	2b 01       	movw	r4, r22
 17a:	3c 01       	movw	r6, r24
	uint8_t LEDValueNext = 1;
	
	//Used for controlling how fast shift register updates
	uint32_t sevenSegUpdateTimer = timer.millis();
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 184:	4b 01       	movw	r8, r22
 186:	5c 01       	movw	r10, r24
	//Used for controlling how fast seven seg shift registers get latched
	uint32_t sevenSegLatchTimer = timer.millis();
 188:	81 e2       	ldi	r24, 0x21	; 33
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 190:	6b 01       	movw	r12, r22
 192:	7c 01       	movw	r14, r24
	//Used for controlling when to shift bits.
	uint8_t shiftComplete = 0;
 194:	00 e0       	ldi	r16, 0x00	; 0
	uint8_t counter = 0;
	uint8_t numberToPrint [2];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
	uint8_t LEDValueNext = 1;
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	2b 83       	std	Y+3, r18	; 0x03
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
	
	//Declare Byte to write to shift register
	uint8_t counter = 0;
 19a:	10 e0       	ldi	r17, 0x00	; 0
		//Reset timer.
		LEDTimer = timer.millis();
			if( LEDValueNext == 1 ){
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
 19c:	31 2c       	mov	r3, r1
				&& (shiftComplete == false) ) { 
					
			//Reset timer
			sevenSegUpdateTimer = timer.millis();
			
			numberToPrint[1] = (uint8_t) counter / 10; 
 19e:	0f 2e       	mov	r0, r31
 1a0:	fd ec       	ldi	r31, 0xCD	; 205
 1a2:	2f 2e       	mov	r2, r31
 1a4:	f0 2d       	mov	r31, r0
	
    /* Replace with your application code */
    while (1) 
    {
		//TASK 1 - Blinky --> Toggle LED every 250ms
		if(timer.elapsed_millis( LEDTimer ) > 2500){
 1a6:	b3 01       	movw	r22, r6
 1a8:	a2 01       	movw	r20, r4
 1aa:	81 e2       	ldi	r24, 0x21	; 33
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5Timer14elapsed_millisEm>
 1b2:	65 3c       	cpi	r22, 0xC5	; 197
 1b4:	79 40       	sbci	r23, 0x09	; 9
 1b6:	81 05       	cpc	r24, r1
 1b8:	91 05       	cpc	r25, r1
 1ba:	78 f0       	brcs	.+30     	; 0x1da <main+0xa2>
		//Reset timer.
		LEDTimer = timer.millis();
 1bc:	81 e2       	ldi	r24, 0x21	; 33
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 1c4:	2b 01       	movw	r4, r22
 1c6:	3c 01       	movw	r6, r24
			if( LEDValueNext == 1 ){
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <main+0x9c>
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
 1ce:	58 9a       	sbi	0x0b, 0	; 11
				LEDValueNext = 0;
 1d0:	3b 82       	std	Y+3, r3	; 0x03
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <main+0xa2>
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
 1d4:	58 98       	cbi	0x0b, 0	; 11
				LEDValueNext = 1;
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	9b 83       	std	Y+3, r25	; 0x03
			}
		}
		
		//TASK 2 - Load shift register with bit map of seven segment display every 10ms
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 5) 
 1da:	b5 01       	movw	r22, r10
 1dc:	a4 01       	movw	r20, r8
 1de:	81 e2       	ldi	r24, 0x21	; 33
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5Timer14elapsed_millisEm>
				&& (shiftComplete == false) ) { 
 1e6:	66 30       	cpi	r22, 0x06	; 6
 1e8:	71 05       	cpc	r23, r1
 1ea:	81 05       	cpc	r24, r1
 1ec:	91 05       	cpc	r25, r1
 1ee:	30 f0       	brcs	.+12     	; 0x1fc <main+0xc4>
 1f0:	00 23       	and	r16, r16
 1f2:	91 f0       	breq	.+36     	; 0x218 <main+0xe0>
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <main+0xc4>
			
			//increment counter
			counter++;
						
			if (counter >= 100 ){
				numberToPrint[0] = 0;
 1f6:	39 82       	std	Y+1, r3	; 0x01
				counter = 0;
 1f8:	10 e0       	ldi	r17, 0x00	; 0
 1fa:	3a c0       	rjmp	.+116    	; 0x270 <main+0x138>
			
			shiftComplete = true;
		}
		
		//TASK 3 - Latch shift register at specific rate. 100ms.
		if ( (timer.elapsed_millis(sevenSegLatchTimer) >  1000)
 1fc:	b7 01       	movw	r22, r14
 1fe:	a6 01       	movw	r20, r12
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5Timer14elapsed_millisEm>
				&& ( shiftComplete == true )){
 208:	69 3e       	cpi	r22, 0xE9	; 233
 20a:	73 40       	sbci	r23, 0x03	; 3
 20c:	81 05       	cpc	r24, r1
 20e:	91 05       	cpc	r25, r1
 210:	50 f2       	brcs	.-108    	; 0x1a6 <main+0x6e>
 212:	01 30       	cpi	r16, 0x01	; 1
 214:	41 f6       	brne	.-112    	; 0x1a6 <main+0x6e>
 216:	20 c0       	rjmp	.+64     	; 0x258 <main+0x120>
		//TASK 2 - Load shift register with bit map of seven segment display every 10ms
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 5) 
				&& (shiftComplete == false) ) { 
					
			//Reset timer
			sevenSegUpdateTimer = timer.millis();
 218:	81 e2       	ldi	r24, 0x21	; 33
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 220:	4b 01       	movw	r8, r22
 222:	5c 01       	movw	r10, r24
			
			numberToPrint[1] = (uint8_t) counter / 10; 
 224:	12 9d       	mul	r17, r2
 226:	81 2d       	mov	r24, r1
 228:	11 24       	eor	r1, r1
 22a:	86 95       	lsr	r24
 22c:	86 95       	lsr	r24
 22e:	86 95       	lsr	r24
 230:	8a 83       	std	Y+2, r24	; 0x02
			numberToPrint[0] = (uint8_t) counter - (10*numberToPrint[1]);
 232:	88 0f       	add	r24, r24
 234:	98 2f       	mov	r25, r24
 236:	99 0f       	add	r25, r25
 238:	99 0f       	add	r25, r25
 23a:	89 0f       	add	r24, r25
 23c:	91 2f       	mov	r25, r17
 23e:	98 1b       	sub	r25, r24
 240:	99 83       	std	Y+1, r25	; 0x01
			
			//Prepare shift registers to hold bit map for seven segment display
			sevenSegmentDisplay.printNumbers_NOLATCH( numberToPrint );
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	8f e0       	ldi	r24, 0x0F	; 15
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 c2 01 	call	0x384	; 0x384 <_ZN8SevenSeg20printNumbers_NOLATCHEPh>
			
			//increment counter
			counter++;
 250:	1f 5f       	subi	r17, 0xFF	; 255
						
			if (counter >= 100 ){
 252:	14 36       	cpi	r17, 0x64	; 100
 254:	80 f6       	brcc	.-96     	; 0x1f6 <main+0xbe>
 256:	0c c0       	rjmp	.+24     	; 0x270 <main+0x138>
		//TASK 3 - Latch shift register at specific rate. 100ms.
		if ( (timer.elapsed_millis(sevenSegLatchTimer) >  1000)
				&& ( shiftComplete == true )){
			
			//Reset Timer
			sevenSegLatchTimer = timer.millis();
 258:	81 e2       	ldi	r24, 0x21	; 33
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5Timer6millisEv>
 260:	6b 01       	movw	r12, r22
 262:	7c 01       	movw	r14, r24
			
			//Latch shift registers. Output should show on seven segment display
			sevenSegmentDisplay.latchOutput();
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 03 02 	call	0x406	; 0x406 <_ZN18ShiftRegister_SIPO11latchOutputEv>
			
			//Shift in new values
			shiftComplete = false;
 26c:	03 2d       	mov	r16, r3
 26e:	9b cf       	rjmp	.-202    	; 0x1a6 <main+0x6e>
			
			shiftComplete = true;
		}
		
		//TASK 3 - Latch shift register at specific rate. 100ms.
		if ( (timer.elapsed_millis(sevenSegLatchTimer) >  1000)
 270:	b7 01       	movw	r22, r14
 272:	a6 01       	movw	r20, r12
 274:	81 e2       	ldi	r24, 0x21	; 33
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5Timer14elapsed_millisEm>
				&& ( shiftComplete == true )){
 27c:	69 3e       	cpi	r22, 0xE9	; 233
 27e:	73 40       	sbci	r23, 0x03	; 3
 280:	81 05       	cpc	r24, r1
 282:	91 05       	cpc	r25, r1
 284:	48 f7       	brcc	.-46     	; 0x258 <main+0x120>
 286:	01 e0       	ldi	r16, 0x01	; 1
 288:	8e cf       	rjmp	.-228    	; 0x1a6 <main+0x6e>

0000028a <_GLOBAL__sub_I_timer>:
 */ 

#include "global.h"

//Timer increments every 0.1ms
Timer timer;
 28a:	81 e2       	ldi	r24, 0x21	; 33
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN5TimerC1Ev>

//Initialize seven segment display
SevenSeg sevenSegmentDisplay;
 292:	8f e0       	ldi	r24, 0x0F	; 15
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 57 01 	call	0x2ae	; 0x2ae <_ZN8SevenSegC1Ev>
 29a:	08 95       	ret

0000029c <_GLOBAL__sub_D_timer>:
 29c:	8f e0       	ldi	r24, 0x0F	; 15
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 c5 01 	call	0x38a	; 0x38a <_ZN8SevenSegD1Ev>
 */ 

#include "global.h"

//Timer increments every 0.1ms
Timer timer;
 2a4:	81 e2       	ldi	r24, 0x21	; 33
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_ZN5TimerD1Ev>
 2ac:	08 95       	ret

000002ae <_ZN8SevenSegC1Ev>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latchOutput();
}
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <_ZN8SevenSegC1Ev+0xa>
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <_ZN8SevenSegC1Ev+0xc>
 2ba:	00 d0       	rcall	.+0      	; 0x2bc <_ZN8SevenSegC1Ev+0xe>
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	8c 01       	movw	r16, r24
 2c2:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN18ShiftRegister_SIPOC1Ev>
 2c6:	8b e0       	ldi	r24, 0x0B	; 11
 2c8:	e0 e0       	ldi	r30, 0x00	; 0
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	d8 01       	movw	r26, r16
 2ce:	17 96       	adiw	r26, 0x07	; 7
 2d0:	01 90       	ld	r0, Z+
 2d2:	0d 92       	st	X+, r0
 2d4:	8a 95       	dec	r24
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <_ZN8SevenSegC1Ev+0x22>
 2d8:	ce 01       	movw	r24, r28
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	0e 94 c8 01 	call	0x390	; 0x390 <_ZN18ShiftRegister_SIPOC1Ev>
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN18ShiftRegister_SIPOD1Ev>
 2e8:	26 96       	adiw	r28, 0x06	; 6
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>:
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	16 2f       	mov	r17, r22
 308:	ba 01       	movw	r22, r20
 30a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEP25ShiftRegister_SIPO_pinout>
 30e:	1e 83       	std	Y+6, r17	; 0x06
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	1f 91       	pop	r17
 316:	08 95       	ret

00000318 <_ZN8SevenSeg12shiftInBytesEPh>:
 318:	df 92       	push	r13
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	fc 01       	movw	r30, r24
 328:	26 81       	ldd	r18, Z+6	; 0x06
 32a:	22 23       	and	r18, r18
 32c:	19 f1       	breq	.+70     	; 0x374 <_ZN8SevenSeg12shiftInBytesEPh+0x5c>
 32e:	8c 01       	movw	r16, r24
 330:	c6 2f       	mov	r28, r22
 332:	d7 2f       	mov	r29, r23
 334:	e1 2c       	mov	r14, r1
 336:	f1 2c       	mov	r15, r1
 338:	0f 2e       	mov	r0, r31
 33a:	fa e0       	ldi	r31, 0x0A	; 10
 33c:	df 2e       	mov	r13, r31
 33e:	f0 2d       	mov	r31, r0
 340:	fe 01       	movw	r30, r28
 342:	88 81       	ld	r24, Y
 344:	8a 30       	cpi	r24, 0x0A	; 10
 346:	08 f0       	brcs	.+2      	; 0x34a <_ZN8SevenSeg12shiftInBytesEPh+0x32>
 348:	d8 82       	st	Y, r13
 34a:	21 96       	adiw	r28, 0x01	; 1
 34c:	80 81       	ld	r24, Z
 34e:	f8 01       	movw	r30, r16
 350:	e8 0f       	add	r30, r24
 352:	f1 1d       	adc	r31, r1
 354:	67 81       	ldd	r22, Z+7	; 0x07
 356:	c8 01       	movw	r24, r16
 358:	0e 94 f7 01 	call	0x3ee	; 0x3ee <_ZN18ShiftRegister_SIPO8loadByteEh>
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 362:	ff ef       	ldi	r31, 0xFF	; 255
 364:	ef 1a       	sub	r14, r31
 366:	ff 0a       	sbc	r15, r31
 368:	f8 01       	movw	r30, r16
 36a:	86 81       	ldd	r24, Z+6	; 0x06
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	e8 16       	cp	r14, r24
 370:	f9 06       	cpc	r15, r25
 372:	34 f3       	brlt	.-52     	; 0x340 <_ZN8SevenSeg12shiftInBytesEPh+0x28>
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	1f 91       	pop	r17
 37a:	0f 91       	pop	r16
 37c:	ff 90       	pop	r15
 37e:	ef 90       	pop	r14
 380:	df 90       	pop	r13
 382:	08 95       	ret

00000384 <_ZN8SevenSeg20printNumbers_NOLATCHEPh>:
 384:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN8SevenSeg12shiftInBytesEPh>
 388:	08 95       	ret

0000038a <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 38a:	0e 94 a9 02 	call	0x552	; 0x552 <_ZN18ShiftRegister_SIPOD1Ev>
 38e:	08 95       	ret

00000390 <_ZN18ShiftRegister_SIPOC1Ev>:
*/

#include "ShiftRegister_SIPO.h"

// default constructor
ShiftRegister_SIPO::ShiftRegister_SIPO()
 390:	08 95       	ret

00000392 <_ZN18ShiftRegister_SIPO9setupPinsEv>:
	}
	
} //ShiftBits

void ShiftRegister_SIPO::setupPins( void ) 
{
 392:	fc 01       	movw	r30, r24
	//setup the pinout byte
	pinout_byte = (1 << pinout->shift) | (1 << pinout->latch) | (1 << pinout->serial);	
 394:	a0 81       	ld	r26, Z
 396:	b1 81       	ldd	r27, Z+1	; 0x01
 398:	21 e0       	ldi	r18, 0x01	; 1
 39a:	30 e0       	ldi	r19, 0x00	; 0
 39c:	a9 01       	movw	r20, r18
 39e:	0c 90       	ld	r0, X
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 3aa:	c9 01       	movw	r24, r18
 3ac:	11 96       	adiw	r26, 0x01	; 1
 3ae:	0c 90       	ld	r0, X
 3b0:	11 97       	sbiw	r26, 0x01	; 1
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 3bc:	84 2b       	or	r24, r20
 3be:	12 96       	adiw	r26, 0x02	; 2
 3c0:	0c 90       	ld	r0, X
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 3c4:	22 0f       	add	r18, r18
 3c6:	33 1f       	adc	r19, r19
 3c8:	0a 94       	dec	r0
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 3cc:	28 2b       	or	r18, r24
 3ce:	22 83       	std	Z+2, r18	; 0x02

	// Initialize these pins to be 1.
	SIPO_PORT |= ( pinout_byte );
 3d0:	88 b1       	in	r24, 0x08	; 8
 3d2:	28 2b       	or	r18, r24
 3d4:	28 b9       	out	0x08, r18	; 8

	// Set pins to be output.
	SIPO_DDR |= pinout_byte;
 3d6:	97 b1       	in	r25, 0x07	; 7
 3d8:	82 81       	ldd	r24, Z+2	; 0x02
 3da:	89 2b       	or	r24, r25
 3dc:	87 b9       	out	0x07, r24	; 7
 3de:	08 95       	ret

000003e0 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEP25ShiftRegister_SIPO_pinout>:

void ShiftRegister_SIPO::ShiftRegisterInit( ShiftRegister_SIPO_pinout * pins )
{

	//Store shift register pinout for later use
	pinout = pins;
 3e0:	fc 01       	movw	r30, r24
 3e2:	71 83       	std	Z+1, r23	; 0x01
 3e4:	60 83       	st	Z, r22
	
	//start off with output byte 0
	output_byte = 0;
 3e6:	15 82       	std	Z+5, r1	; 0x05
	
	//Setup pins on the 328p to utilize the shift register.
	this->setupPins();
 3e8:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN18ShiftRegister_SIPO9setupPinsEv>
 3ec:	08 95       	ret

000003ee <_ZN18ShiftRegister_SIPO8loadByteEh>:
	this->wait_1us();
}

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 3ee:	fc 01       	movw	r30, r24
 3f0:	65 83       	std	Z+5, r22	; 0x05
 3f2:	08 95       	ret

000003f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
	
	//Read the value of the TCNT0 timer0 
	uint8_t timerValue = TCNT2;
 3f4:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 3f8:	e2 eb       	ldi	r30, 0xB2	; 178
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
	
	//Read the value of the TCNT0 timer0 
	uint8_t timerValue = TCNT2;
	
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 3fe:	89 1b       	sub	r24, r25
 400:	80 31       	cpi	r24, 0x10	; 16
 402:	e0 f3       	brcs	.-8      	; 0x3fc <_ZN18ShiftRegister_SIPO8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 404:	08 95       	ret

00000406 <_ZN18ShiftRegister_SIPO11latchOutputEv>:
	SIPO_DDR |= pinout_byte;

} //SetupPins

void ShiftRegister_SIPO::latchOutput( void )
{
 406:	0f 93       	push	r16
 408:	1f 93       	push	r17
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	8c 01       	movw	r16, r24
	//Latch output
	SIPO_PORT &= ~(1 << pinout->latch);
 410:	98 b1       	in	r25, 0x08	; 8
 412:	d8 01       	movw	r26, r16
 414:	ed 91       	ld	r30, X+
 416:	fc 91       	ld	r31, X
 418:	c1 e0       	ldi	r28, 0x01	; 1
 41a:	d0 e0       	ldi	r29, 0x00	; 0
 41c:	9e 01       	movw	r18, r28
 41e:	01 80       	ldd	r0, Z+1	; 0x01
 420:	02 c0       	rjmp	.+4      	; 0x426 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x20>
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x1c>
 42a:	82 2f       	mov	r24, r18
 42c:	80 95       	com	r24
 42e:	89 23       	and	r24, r25
 430:	88 b9       	out	0x08, r24	; 8
	this->wait_1us();
 432:	c8 01       	movw	r24, r16
 434:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>
	SIPO_PORT |= (1 << pinout->latch);
 438:	88 b1       	in	r24, 0x08	; 8
 43a:	d8 01       	movw	r26, r16
 43c:	ed 91       	ld	r30, X+
 43e:	fc 91       	ld	r31, X
 440:	01 80       	ldd	r0, Z+1	; 0x01
 442:	02 c0       	rjmp	.+4      	; 0x448 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x42>
 444:	cc 0f       	add	r28, r28
 446:	dd 1f       	adc	r29, r29
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x3e>
 44c:	c8 2b       	or	r28, r24
 44e:	c8 b9       	out	0x08, r28	; 8
}
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <_ZN18ShiftRegister_SIPO11singleShiftEv>:

void ShiftRegister_SIPO::singleShift( void )
{
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	8c 01       	movw	r16, r24
	//Shift single bit in.
	SIPO_PORT &= ~(1 << pinout->shift);
 464:	98 b1       	in	r25, 0x08	; 8
 466:	d8 01       	movw	r26, r16
 468:	ed 91       	ld	r30, X+
 46a:	fc 91       	ld	r31, X
 46c:	c1 e0       	ldi	r28, 0x01	; 1
 46e:	d0 e0       	ldi	r29, 0x00	; 0
 470:	9e 01       	movw	r18, r28
 472:	00 80       	ld	r0, Z
 474:	02 c0       	rjmp	.+4      	; 0x47a <_ZN18ShiftRegister_SIPO11singleShiftEv+0x20>
 476:	22 0f       	add	r18, r18
 478:	33 1f       	adc	r19, r19
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <_ZN18ShiftRegister_SIPO11singleShiftEv+0x1c>
 47e:	82 2f       	mov	r24, r18
 480:	80 95       	com	r24
 482:	89 23       	and	r24, r25
 484:	88 b9       	out	0x08, r24	; 8
	this->wait_1us();
 486:	c8 01       	movw	r24, r16
 488:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>
	SIPO_PORT |= (1 << pinout->shift);
 48c:	88 b1       	in	r24, 0x08	; 8
 48e:	d8 01       	movw	r26, r16
 490:	ed 91       	ld	r30, X+
 492:	fc 91       	ld	r31, X
 494:	00 80       	ld	r0, Z
 496:	02 c0       	rjmp	.+4      	; 0x49c <_ZN18ShiftRegister_SIPO11singleShiftEv+0x42>
 498:	cc 0f       	add	r28, r28
 49a:	dd 1f       	adc	r29, r29
 49c:	0a 94       	dec	r0
 49e:	e2 f7       	brpl	.-8      	; 0x498 <_ZN18ShiftRegister_SIPO11singleShiftEv+0x3e>
 4a0:	c8 2b       	or	r28, r24
 4a2:	c8 b9       	out	0x08, r28	; 8
	this->wait_1us();
 4a4:	c8 01       	movw	r24, r16
 4a6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>
}
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	08 95       	ret

000004b4 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
//This will be called in a timer based interrupt so it would need to be locked
//to prevent recursion.
void ShiftRegister_SIPO::shiftBits( void )
{		
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	SIPO_PORT &= ~( pinout_byte );	
 4c2:	98 b1       	in	r25, 0x08	; 8
 4c4:	8a 81       	ldd	r24, Y+2	; 0x02
 4c6:	80 95       	com	r24
 4c8:	89 23       	and	r24, r25
 4ca:	88 b9       	out	0x08, r24	; 8
	//Wait 1us
	this->wait_1us();
 4cc:	ce 01       	movw	r24, r28
 4ce:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 4d2:	00 e0       	ldi	r16, 0x00	; 0
 4d4:	10 e0       	ldi	r17, 0x00	; 0
		if( output_byte & (1 << i) ){
			SIPO_PORT |= (1 << pinout->serial);
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << pinout->serial);
 4d6:	ee 24       	eor	r14, r14
 4d8:	e3 94       	inc	r14
 4da:	f1 2c       	mov	r15, r1
	for ( int i=0; i < 8; i++){
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 4dc:	8d 81       	ldd	r24, Y+5	; 0x05
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	00 2e       	mov	r0, r16
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x34>
 4e4:	95 95       	asr	r25
 4e6:	87 95       	ror	r24
 4e8:	0a 94       	dec	r0
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x30>
 4ec:	80 ff       	sbrs	r24, 0
 4ee:	0d c0       	rjmp	.+26     	; 0x50a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x56>
			SIPO_PORT |= (1 << pinout->serial);
 4f0:	28 b1       	in	r18, 0x08	; 8
 4f2:	e8 81       	ld	r30, Y
 4f4:	f9 81       	ldd	r31, Y+1	; 0x01
 4f6:	c7 01       	movw	r24, r14
 4f8:	02 80       	ldd	r0, Z+2	; 0x02
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x48>
 504:	82 2b       	or	r24, r18
 506:	88 b9       	out	0x08, r24	; 8
 508:	0e c0       	rjmp	.+28     	; 0x526 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x72>
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << pinout->serial);
 50a:	98 b1       	in	r25, 0x08	; 8
 50c:	e8 81       	ld	r30, Y
 50e:	f9 81       	ldd	r31, Y+1	; 0x01
 510:	97 01       	movw	r18, r14
 512:	02 80       	ldd	r0, Z+2	; 0x02
 514:	02 c0       	rjmp	.+4      	; 0x51a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x66>
 516:	22 0f       	add	r18, r18
 518:	33 1f       	adc	r19, r19
 51a:	0a 94       	dec	r0
 51c:	e2 f7       	brpl	.-8      	; 0x516 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x62>
 51e:	82 2f       	mov	r24, r18
 520:	80 95       	com	r24
 522:	89 23       	and	r24, r25
 524:	88 b9       	out	0x08, r24	; 8
		}
			
		this->wait_1us();
 526:	ce 01       	movw	r24, r28
 528:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO8wait_1usEv>
			
		this->singleShift();
 52c:	ce 01       	movw	r24, r28
 52e:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN18ShiftRegister_SIPO11singleShiftEv>
	//Starting shifting with shift/serial/latch at 0
	SIPO_PORT &= ~( pinout_byte );	
	//Wait 1us
	this->wait_1us();
		
	for ( int i=0; i < 8; i++){
 532:	0f 5f       	subi	r16, 0xFF	; 255
 534:	1f 4f       	sbci	r17, 0xFF	; 255
 536:	08 30       	cpi	r16, 0x08	; 8
 538:	11 05       	cpc	r17, r1
 53a:	81 f6       	brne	.-96     	; 0x4dc <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x28>
		this->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	ef 90       	pop	r14
 548:	08 95       	ret

0000054a <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
	}
}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 54a:	fc 01       	movw	r30, r24
 54c:	74 83       	std	Z+4, r23	; 0x04
 54e:	63 83       	std	Z+3, r22	; 0x03
 550:	08 95       	ret

00000552 <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 552:	08 95       	ret

00000554 <_ZN5TimerC1Ev>:
	step++;
}

void Timer::reset( void )
{
	step = 0;
 554:	fc 01       	movw	r30, r24
 556:	10 82       	st	Z, r1
 558:	11 82       	std	Z+1, r1	; 0x01
 55a:	12 82       	std	Z+2, r1	; 0x02
 55c:	13 82       	std	Z+3, r1	; 0x03
 55e:	08 95       	ret

00000560 <_ZN5Timer14incrementTimerEv>:
 560:	fc 01       	movw	r30, r24
 562:	40 81       	ld	r20, Z
 564:	51 81       	ldd	r21, Z+1	; 0x01
 566:	62 81       	ldd	r22, Z+2	; 0x02
 568:	73 81       	ldd	r23, Z+3	; 0x03
 56a:	4f 5f       	subi	r20, 0xFF	; 255
 56c:	5f 4f       	sbci	r21, 0xFF	; 255
 56e:	6f 4f       	sbci	r22, 0xFF	; 255
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	40 83       	st	Z, r20
 574:	51 83       	std	Z+1, r21	; 0x01
 576:	62 83       	std	Z+2, r22	; 0x02
 578:	73 83       	std	Z+3, r23	; 0x03
 57a:	08 95       	ret

0000057c <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
	return (step - comparison);	
 580:	fc 01       	movw	r30, r24
 582:	80 81       	ld	r24, Z
 584:	91 81       	ldd	r25, Z+1	; 0x01
 586:	a2 81       	ldd	r26, Z+2	; 0x02
 588:	b3 81       	ldd	r27, Z+3	; 0x03
 58a:	8c 01       	movw	r16, r24
 58c:	9d 01       	movw	r18, r26
 58e:	04 1b       	sub	r16, r20
 590:	15 0b       	sbc	r17, r21
 592:	26 0b       	sbc	r18, r22
 594:	37 0b       	sbc	r19, r23
 596:	c9 01       	movw	r24, r18
 598:	b8 01       	movw	r22, r16
}
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	08 95       	ret

000005a0 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 5a0:	fc 01       	movw	r30, r24
 5a2:	60 81       	ld	r22, Z
 5a4:	71 81       	ldd	r23, Z+1	; 0x01
 5a6:	82 81       	ldd	r24, Z+2	; 0x02
 5a8:	93 81       	ldd	r25, Z+3	; 0x03
}
 5aa:	08 95       	ret

000005ac <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 5ac:	08 95       	ret

000005ae <__tablejump2__>:
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	05 90       	lpm	r0, Z+
 5b4:	f4 91       	lpm	r31, Z
 5b6:	e0 2d       	mov	r30, r0
 5b8:	09 94       	ijmp

000005ba <__do_global_dtors>:
 5ba:	10 e0       	ldi	r17, 0x00	; 0
 5bc:	c5 e3       	ldi	r28, 0x35	; 53
 5be:	d0 e0       	ldi	r29, 0x00	; 0
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <__do_global_dtors+0x10>
 5c2:	fe 01       	movw	r30, r28
 5c4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__tablejump2__>
 5c8:	21 96       	adiw	r28, 0x01	; 1
 5ca:	c6 33       	cpi	r28, 0x36	; 54
 5cc:	d1 07       	cpc	r29, r17
 5ce:	c9 f7       	brne	.-14     	; 0x5c2 <__do_global_dtors+0x8>
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
