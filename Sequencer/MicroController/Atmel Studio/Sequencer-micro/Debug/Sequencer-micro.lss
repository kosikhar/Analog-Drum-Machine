
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000007e6  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800110  00800110  0000088a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002276  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9f  00000000  00000000  00002cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ea  00000000  00000000  00003c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ac7  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085e  00000000  00000000  00005323  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00005b81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	00 01       	movw	r0, r0

0000006a <__ctors_end>:
  6a:	09 01       	movw	r0, r18

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e6 ee       	ldi	r30, 0xE6	; 230
  80:	f7 e0       	ldi	r31, 0x07	; 7
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a0 31       	cpi	r26, 0x10	; 16
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a0 e1       	ldi	r26, 0x10	; 16
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a0 33       	cpi	r26, 0x30	; 48
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 bf 02 	call	0x57e	; 0x57e <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  b8:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:
#include "global.h"
#include "interrupts.h"

//Call every 10us, will be used for controlling shift registers
ISR( TIMER0_COMPA_vect, ISR_NOBLOCK )
{
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	//Increment timer every 1ms
	timer.incrementTimer();
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 98 02 	call	0x530	; 0x530 <_ZN5Timer14incrementTimerEv>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_Z20setUpTimerInterruptsv>:
{
	//Setting up Timer0 (8-bit timer) to trigger ISR after 10us
	
	//TIMSK0 is the TC0 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR0A
	TIMSK0 |= (1 << OCIE0A);
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	
	//With 16MHz/64 = 250kHz clk, we would need 250 steps to get 1ms. 
	OCR0A = (uint8_t) 250;
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	87 bd       	out	0x27, r24	; 39

	//Disconnect OC0A, and use CTC mode
	TCCR0A = (uint8_t) (1 << WGM01);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	84 bd       	out	0x24, r24	; 36

	//Use clk div64 as input to the timer making timer run at 250kHz
	TCCR0B = (uint8_t) (1 << CS01) | (1 << CS00);
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	95 bd       	out	0x25, r25	; 37
	
	//Setting up Timer2 (8-bit Timer). We are just going to use
	//measuring small time scales in the us
	
	OCR2A = (uint8_t) 254;
 124:	9e ef       	ldi	r25, 0xFE	; 254
 126:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//Disconnect OC2A, and use CTC mode
	TCCR2A = (uint8_t) (1 << WGM21);
 12a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	//Use clk div1 as input to the timer making timer run at 16MHz
	TCCR2B = (uint8_t) (1 << CS20);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//Enable Interrupts Globally.
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <main>:
SevenSeg sevenSegmentDisplay;
ShiftRegister_SIPO_pinout outputShiftRegister_pinout;


int main(void)
{	
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	1f 92       	push	r1
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	//Pins on port C for the output shift register
	//TODO put this into a function. Its ugly
	outputShiftRegister_pinout.serial = 0;
 142:	e0 e1       	ldi	r30, 0x10	; 16
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	
	sevenSegmentDisplay.sevenSegInit(1, &outputShiftRegister_pinout);
 150:	af 01       	movw	r20, r30
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	83 e1       	ldi	r24, 0x13	; 19
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 3d 01 	call	0x27a	; 0x27a <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>
	sevenSegmentDisplay.getTimerReference(&timer);
 15c:	68 e2       	ldi	r22, 0x28	; 40
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	83 e1       	ldi	r24, 0x13	; 19
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 80 02 	call	0x500	; 0x500 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>

	//Enable Timer interrupts
	setUpTimerInterrupts();
 168:	0e 94 87 00 	call	0x10e	; 0x10e <_Z20setUpTimerInterruptsv>
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 16c:	50 9a       	sbi	0x0a, 0	; 10
	//Declare Byte to write to shift register
	uint8_t counter = 0;
	uint8_t numberToPrint [1];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
 16e:	88 e2       	ldi	r24, 0x28	; 40
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN5Timer6millisEv>
 176:	4b 01       	movw	r8, r22
 178:	5c 01       	movw	r10, r24
	uint8_t LEDValueNext = 1;
	
	//Used for controlling how fast shift register updates
	uint32_t sevenSegUpdateTimer = timer.millis();
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN5Timer6millisEv>
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	uint8_t counter = 0;
	uint8_t numberToPrint [1];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
	uint8_t LEDValueNext = 1;
 186:	01 e0       	ldi	r16, 0x01	; 1
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
	
	//Declare Byte to write to shift register
	uint8_t counter = 0;
 188:	10 e0       	ldi	r17, 0x00	; 0
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
				LEDValueNext = 1;
 18a:	66 24       	eor	r6, r6
 18c:	63 94       	inc	r6
		//Toggle LED every 500ms
		if(timer.elapsed_millis( LEDTimer ) > 500){
			if( LEDValueNext == 1 ){
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
 18e:	71 2c       	mov	r7, r1
    /* Replace with your application code */
    while (1) 
    {
		
		//Toggle LED every 500ms
		if(timer.elapsed_millis( LEDTimer ) > 500){
 190:	b5 01       	movw	r22, r10
 192:	a4 01       	movw	r20, r8
 194:	88 e2       	ldi	r24, 0x28	; 40
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN5Timer14elapsed_millisEm>
 19c:	65 3f       	cpi	r22, 0xF5	; 245
 19e:	71 40       	sbci	r23, 0x01	; 1
 1a0:	81 05       	cpc	r24, r1
 1a2:	91 05       	cpc	r25, r1
 1a4:	68 f0       	brcs	.+26     	; 0x1c0 <main+0x88>
			if( LEDValueNext == 1 ){
 1a6:	01 30       	cpi	r16, 0x01	; 1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <main+0x78>
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
 1aa:	58 9a       	sbi	0x0b, 0	; 11
				LEDValueNext = 0;
 1ac:	07 2d       	mov	r16, r7
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x7c>
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
 1b0:	58 98       	cbi	0x0b, 0	; 11
				LEDValueNext = 1;
 1b2:	06 2d       	mov	r16, r6
			}
			//Reset timer.
			LEDTimer = timer.millis();
 1b4:	88 e2       	ldi	r24, 0x28	; 40
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN5Timer6millisEv>
 1bc:	4b 01       	movw	r8, r22
 1be:	5c 01       	movw	r10, r24
		}
		
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 200) ){
 1c0:	b7 01       	movw	r22, r14
 1c2:	a6 01       	movw	r20, r12
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 a6 02 	call	0x54c	; 0x54c <_ZN5Timer14elapsed_millisEm>
 1cc:	69 3c       	cpi	r22, 0xC9	; 201
 1ce:	71 05       	cpc	r23, r1
 1d0:	81 05       	cpc	r24, r1
 1d2:	91 05       	cpc	r25, r1
 1d4:	e8 f2       	brcs	.-70     	; 0x190 <main+0x58>
			
			
			numberToPrint[0]  = counter;
			
			if (numberToPrint[0] >= 10 ){
 1d6:	1a 30       	cpi	r17, 0x0A	; 10
 1d8:	10 f4       	brcc	.+4      	; 0x1de <main+0xa6>
		}
		
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 200) ){
			
			
			numberToPrint[0]  = counter;
 1da:	19 83       	std	Y+1, r17	; 0x01
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <main+0xaa>
			
			if (numberToPrint[0] >= 10 ){
				numberToPrint[0] = 0;
 1de:	79 82       	std	Y+1, r7	; 0x01
				counter = 0;
 1e0:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			//Print the number to seven segment display.
			sevenSegmentDisplay.printNumbers( numberToPrint );
 1e2:	be 01       	movw	r22, r28
 1e4:	6f 5f       	subi	r22, 0xFF	; 255
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255
 1e8:	83 e1       	ldi	r24, 0x13	; 19
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 40 01 	call	0x280	; 0x280 <_ZN8SevenSeg12printNumbersEPh>
			
			//increment counter
			counter++;
 1f0:	1f 5f       	subi	r17, 0xFF	; 255
			
			//Reset timer
			sevenSegUpdateTimer = timer.millis();
 1f2:	88 e2       	ldi	r24, 0x28	; 40
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN5Timer6millisEv>
 1fa:	6b 01       	movw	r12, r22
 1fc:	7c 01       	movw	r14, r24
 1fe:	c8 cf       	rjmp	.-112    	; 0x190 <main+0x58>

00000200 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 92 02 	call	0x524	; 0x524 <_ZN5TimerC1Ev>

//Initialize seven segment display
SevenSeg sevenSegmentDisplay;
 208:	83 e1       	ldi	r24, 0x13	; 19
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 12 01 	call	0x224	; 0x224 <_ZN8SevenSegC1Ev>
 210:	08 95       	ret

00000212 <_GLOBAL__sub_D_timer>:
 212:	83 e1       	ldi	r24, 0x13	; 19
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_ZN8SevenSegD1Ev>
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 be 02 	call	0x57c	; 0x57c <_ZN5TimerD1Ev>
 222:	08 95       	ret

00000224 <_ZN8SevenSegC1Ev>:
	//Load in the Byte
	this->loadBytes( &sevenSegBitMap[Byte] );
	
	//Shift in the Byte
	this->shiftBits();
}
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	2b 97       	sbiw	r28, 0x0b	; 11
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	8c 01       	movw	r16, r24
 23e:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN18ShiftRegister_SIPOC1Ev>
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	e6 e0       	ldi	r30, 0x06	; 6
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	d8 01       	movw	r26, r16
 24a:	1b 96       	adiw	r26, 0x0b	; 11
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <_ZN8SevenSegC1Ev+0x28>
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 6f 01 	call	0x2de	; 0x2de <_ZN18ShiftRegister_SIPOC1Ev>
 25c:	ce 01       	movw	r24, r28
 25e:	01 96       	adiw	r24, 0x01	; 1
 260:	0e 94 84 02 	call	0x508	; 0x508 <_ZN18ShiftRegister_SIPOD1Ev>
 264:	2b 96       	adiw	r28, 0x0b	; 11
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>:
 27a:	0e 94 9a 01 	call	0x334	; 0x334 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>
 27e:	08 95       	ret

00000280 <_ZN8SevenSeg12printNumbersEPh>:
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	fc 01       	movw	r30, r24
 28e:	24 81       	ldd	r18, Z+4	; 0x04
 290:	22 23       	and	r18, r18
 292:	d9 f0       	breq	.+54     	; 0x2ca <_ZN8SevenSeg12printNumbersEPh+0x4a>
 294:	ec 01       	movw	r28, r24
 296:	06 2f       	mov	r16, r22
 298:	17 2f       	mov	r17, r23
 29a:	e1 2c       	mov	r14, r1
 29c:	f1 2c       	mov	r15, r1
 29e:	f8 01       	movw	r30, r16
 2a0:	61 91       	ld	r22, Z+
 2a2:	8f 01       	movw	r16, r30
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	65 5f       	subi	r22, 0xF5	; 245
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	6c 0f       	add	r22, r28
 2ac:	7d 1f       	adc	r23, r29
 2ae:	ce 01       	movw	r24, r28
 2b0:	0e 94 b7 01 	call	0x36e	; 0x36e <_ZN18ShiftRegister_SIPO9loadBytesEPh>
 2b4:	ce 01       	movw	r24, r28
 2b6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 2ba:	ff ef       	ldi	r31, 0xFF	; 255
 2bc:	ef 1a       	sub	r14, r31
 2be:	ff 0a       	sbc	r15, r31
 2c0:	8c 81       	ldd	r24, Y+4	; 0x04
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	e8 16       	cp	r14, r24
 2c6:	f9 06       	cpc	r15, r25
 2c8:	54 f3       	brlt	.-44     	; 0x29e <_ZN8SevenSeg12printNumbersEPh+0x1e>
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	1f 91       	pop	r17
 2d0:	0f 91       	pop	r16
 2d2:	ff 90       	pop	r15
 2d4:	ef 90       	pop	r14
 2d6:	08 95       	ret

000002d8 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 2d8:	0e 94 84 02 	call	0x508	; 0x508 <_ZN18ShiftRegister_SIPOD1Ev>
 2dc:	08 95       	ret

000002de <_ZN18ShiftRegister_SIPOC1Ev>:

void ShiftRegister_SIPO::toggleEnable( void )
{
	//This will just toggle 0 to 1, and 1 to 0.
	//ie 0000 xor 0001 = 0001 ; 0001 xor 0001 = 0000
	enabled ^= (uint8_t) 0x01; 
 2de:	fc 01       	movw	r30, r24
 2e0:	14 82       	std	Z+4, r1	; 0x04
 2e2:	13 82       	std	Z+3, r1	; 0x03
 2e4:	08 95       	ret

000002e6 <_ZN18ShiftRegister_SIPO9setupPinsEv>:
 2e6:	fc 01       	movw	r30, r24
 2e8:	a0 81       	ld	r26, Z
 2ea:	b1 81       	ldd	r27, Z+1	; 0x01
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	a9 01       	movw	r20, r18
 2f2:	0c 90       	ld	r0, X
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	0a 94       	dec	r0
 2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 2fe:	c9 01       	movw	r24, r18
 300:	11 96       	adiw	r26, 0x01	; 1
 302:	0c 90       	ld	r0, X
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	02 c0       	rjmp	.+4      	; 0x30c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	0a 94       	dec	r0
 30e:	e2 f7       	brpl	.-8      	; 0x308 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 310:	84 2b       	or	r24, r20
 312:	12 96       	adiw	r26, 0x02	; 2
 314:	0c 90       	ld	r0, X
 316:	02 c0       	rjmp	.+4      	; 0x31c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 318:	22 0f       	add	r18, r18
 31a:	33 1f       	adc	r19, r19
 31c:	0a 94       	dec	r0
 31e:	e2 f7       	brpl	.-8      	; 0x318 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 320:	28 2b       	or	r18, r24
 322:	22 83       	std	Z+2, r18	; 0x02
 324:	88 b1       	in	r24, 0x08	; 8
 326:	28 2b       	or	r18, r24
 328:	28 b9       	out	0x08, r18	; 8
 32a:	97 b1       	in	r25, 0x07	; 7
 32c:	82 81       	ldd	r24, Z+2	; 0x02
 32e:	89 2b       	or	r24, r25
 330:	87 b9       	out	0x07, r24	; 7
 332:	08 95       	ret

00000334 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>:
 334:	0f 93       	push	r16
 336:	1f 93       	push	r17
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	ec 01       	movw	r28, r24
 33e:	6c 83       	std	Y+4, r22	; 0x04
 340:	59 83       	std	Y+1, r21	; 0x01
 342:	48 83       	st	Y, r20
 344:	1b 82       	std	Y+3, r1	; 0x03
 346:	06 2f       	mov	r16, r22
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	c8 01       	movw	r24, r16
 34c:	0e 94 c5 02 	call	0x58a	; 0x58a <malloc>
 350:	98 87       	std	Y+8, r25	; 0x08
 352:	8f 83       	std	Y+7, r24	; 0x07
 354:	c8 01       	movw	r24, r16
 356:	0e 94 c5 02 	call	0x58a	; 0x58a <malloc>
 35a:	9a 87       	std	Y+10, r25	; 0x0a
 35c:	89 87       	std	Y+9, r24	; 0x09
 35e:	ce 01       	movw	r24, r28
 360:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_ZN18ShiftRegister_SIPO9setupPinsEv>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	08 95       	ret

0000036e <_ZN18ShiftRegister_SIPO9loadBytesEPh>:
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	ec 01       	movw	r28, r24
 374:	db 01       	movw	r26, r22
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	8d 91       	ld	r24, X+
 37c:	ef 81       	ldd	r30, Y+7	; 0x07
 37e:	f8 85       	ldd	r31, Y+8	; 0x08
 380:	e2 0f       	add	r30, r18
 382:	f3 1f       	adc	r31, r19
 384:	80 83       	st	Z, r24
 386:	2f 5f       	subi	r18, 0xFF	; 255
 388:	3f 4f       	sbci	r19, 0xFF	; 255
 38a:	4c 81       	ldd	r20, Y+4	; 0x04
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	42 17       	cp	r20, r18
 390:	53 07       	cpc	r21, r19
 392:	9c f7       	brge	.-26     	; 0x37a <_ZN18ShiftRegister_SIPO9loadBytesEPh+0xc>
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <_ZN18ShiftRegister_SIPO8wait_1usEv>:
 39a:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 39e:	e2 eb       	ldi	r30, 0xB2	; 178
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	89 1b       	sub	r24, r25
 3a6:	80 31       	cpi	r24, 0x10	; 16
 3a8:	e0 f3       	brcs	.-8      	; 0x3a2 <_ZN18ShiftRegister_SIPO8wait_1usEv+0x8>
 3aa:	08 95       	ret

000003ac <_ZN18ShiftRegister_SIPO9shiftBitsEv>:
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
 3bc:	ec 01       	movw	r28, r24
 3be:	98 b1       	in	r25, 0x08	; 8
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	80 95       	com	r24
 3c4:	89 23       	and	r24, r25
 3c6:	88 b9       	out	0x08, r24	; 8
 3c8:	ce 01       	movw	r24, r28
 3ca:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN18ShiftRegister_SIPO8wait_1usEv>
 3ce:	8c 81       	ldd	r24, Y+4	; 0x04
 3d0:	88 23       	and	r24, r24
 3d2:	09 f4       	brne	.+2      	; 0x3d6 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2a>
 3d4:	6e c0       	rjmp	.+220    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 3d6:	e1 2c       	mov	r14, r1
 3d8:	f1 2c       	mov	r15, r1
 3da:	01 e0       	ldi	r16, 0x01	; 1
 3dc:	10 e0       	ldi	r17, 0x00	; 0
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	88 23       	and	r24, r24
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 3e4:	5d c0       	rjmp	.+186    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 3e6:	c1 2c       	mov	r12, r1
 3e8:	d1 2c       	mov	r13, r1
 3ea:	ef 81       	ldd	r30, Y+7	; 0x07
 3ec:	f8 85       	ldd	r31, Y+8	; 0x08
 3ee:	ee 0d       	add	r30, r14
 3f0:	ff 1d       	adc	r31, r15
 3f2:	80 81       	ld	r24, Z
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0c 2c       	mov	r0, r12
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x52>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4e>
 402:	80 ff       	sbrs	r24, 0
 404:	0d c0       	rjmp	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 406:	28 b1       	in	r18, 0x08	; 8
 408:	e8 81       	ld	r30, Y
 40a:	f9 81       	ldd	r31, Y+1	; 0x01
 40c:	c8 01       	movw	r24, r16
 40e:	02 80       	ldd	r0, Z+2	; 0x02
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	82 2b       	or	r24, r18
 41c:	88 b9       	out	0x08, r24	; 8
 41e:	0e c0       	rjmp	.+28     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 420:	98 b1       	in	r25, 0x08	; 8
 422:	e8 81       	ld	r30, Y
 424:	f9 81       	ldd	r31, Y+1	; 0x01
 426:	98 01       	movw	r18, r16
 428:	02 80       	ldd	r0, Z+2	; 0x02
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	82 2f       	mov	r24, r18
 436:	80 95       	com	r24
 438:	89 23       	and	r24, r25
 43a:	88 b9       	out	0x08, r24	; 8
 43c:	ce 01       	movw	r24, r28
 43e:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN18ShiftRegister_SIPO8wait_1usEv>
 442:	98 b1       	in	r25, 0x08	; 8
 444:	e8 81       	ld	r30, Y
 446:	f9 81       	ldd	r31, Y+1	; 0x01
 448:	98 01       	movw	r18, r16
 44a:	00 80       	ld	r0, Z
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	22 0f       	add	r18, r18
 450:	33 1f       	adc	r19, r19
 452:	0a 94       	dec	r0
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	82 2f       	mov	r24, r18
 458:	80 95       	com	r24
 45a:	89 23       	and	r24, r25
 45c:	88 b9       	out	0x08, r24	; 8
 45e:	ce 01       	movw	r24, r28
 460:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN18ShiftRegister_SIPO8wait_1usEv>
 464:	28 b1       	in	r18, 0x08	; 8
 466:	e8 81       	ld	r30, Y
 468:	f9 81       	ldd	r31, Y+1	; 0x01
 46a:	c8 01       	movw	r24, r16
 46c:	00 80       	ld	r0, Z
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 478:	82 2b       	or	r24, r18
 47a:	88 b9       	out	0x08, r24	; 8
 47c:	ce 01       	movw	r24, r28
 47e:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN18ShiftRegister_SIPO8wait_1usEv>
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	c8 1a       	sub	r12, r24
 486:	d8 0a       	sbc	r13, r24
 488:	8c 81       	ldd	r24, Y+4	; 0x04
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	c8 16       	cp	r12, r24
 49a:	d9 06       	cpc	r13, r25
 49c:	0c f4       	brge	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	a5 cf       	rjmp	.-182    	; 0x3ea <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3e>
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	e8 1a       	sub	r14, r24
 4a4:	f8 0a       	sbc	r15, r24
 4a6:	8c 81       	ldd	r24, Y+4	; 0x04
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	e8 16       	cp	r14, r24
 4ac:	f9 06       	cpc	r15, r25
 4ae:	0c f4       	brge	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	96 cf       	rjmp	.-212    	; 0x3de <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x32>
 4b2:	98 b1       	in	r25, 0x08	; 8
 4b4:	e8 81       	ld	r30, Y
 4b6:	f9 81       	ldd	r31, Y+1	; 0x01
 4b8:	01 e0       	ldi	r16, 0x01	; 1
 4ba:	10 e0       	ldi	r17, 0x00	; 0
 4bc:	98 01       	movw	r18, r16
 4be:	01 80       	ldd	r0, Z+1	; 0x01
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4ca:	82 2f       	mov	r24, r18
 4cc:	80 95       	com	r24
 4ce:	89 23       	and	r24, r25
 4d0:	88 b9       	out	0x08, r24	; 8
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN18ShiftRegister_SIPO8wait_1usEv>
 4d8:	88 b1       	in	r24, 0x08	; 8
 4da:	e8 81       	ld	r30, Y
 4dc:	f9 81       	ldd	r31, Y+1	; 0x01
 4de:	01 80       	ldd	r0, Z+1	; 0x01
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	00 0f       	add	r16, r16
 4e4:	11 1f       	adc	r17, r17
 4e6:	0a 94       	dec	r0
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4ea:	08 2b       	or	r16, r24
 4ec:	08 b9       	out	0x08, r16	; 8
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	df 90       	pop	r13
 4fc:	cf 90       	pop	r12
 4fe:	08 95       	ret

00000500 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 500:	fc 01       	movw	r30, r24
 502:	76 83       	std	Z+6, r23	; 0x06
 504:	65 83       	std	Z+5, r22	; 0x05
 506:	08 95       	ret

00000508 <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ec 01       	movw	r28, r24
{
	free(output_bytes);
 50e:	8f 81       	ldd	r24, Y+7	; 0x07
 510:	98 85       	ldd	r25, Y+8	; 0x08
 512:	0e 94 5d 03 	call	0x6ba	; 0x6ba <free>
	free(output_bytes_buffer);
 516:	89 85       	ldd	r24, Y+9	; 0x09
 518:	9a 85       	ldd	r25, Y+10	; 0x0a
 51a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <free>
} //~ShiftRegister_SIPO
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	08 95       	ret

00000524 <_ZN5TimerC1Ev>:
	milliseconds++;
}

void Timer::reset( void )
{
	milliseconds = 0;
 524:	fc 01       	movw	r30, r24
 526:	10 82       	st	Z, r1
 528:	11 82       	std	Z+1, r1	; 0x01
 52a:	12 82       	std	Z+2, r1	; 0x02
 52c:	13 82       	std	Z+3, r1	; 0x03
 52e:	08 95       	ret

00000530 <_ZN5Timer14incrementTimerEv>:
 530:	fc 01       	movw	r30, r24
 532:	40 81       	ld	r20, Z
 534:	51 81       	ldd	r21, Z+1	; 0x01
 536:	62 81       	ldd	r22, Z+2	; 0x02
 538:	73 81       	ldd	r23, Z+3	; 0x03
 53a:	4f 5f       	subi	r20, 0xFF	; 255
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	6f 4f       	sbci	r22, 0xFF	; 255
 540:	7f 4f       	sbci	r23, 0xFF	; 255
 542:	40 83       	st	Z, r20
 544:	51 83       	std	Z+1, r21	; 0x01
 546:	62 83       	std	Z+2, r22	; 0x02
 548:	73 83       	std	Z+3, r23	; 0x03
 54a:	08 95       	ret

0000054c <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 54c:	0f 93       	push	r16
 54e:	1f 93       	push	r17
	return (milliseconds - comparison);	
 550:	fc 01       	movw	r30, r24
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	a2 81       	ldd	r26, Z+2	; 0x02
 558:	b3 81       	ldd	r27, Z+3	; 0x03
 55a:	8c 01       	movw	r16, r24
 55c:	9d 01       	movw	r18, r26
 55e:	04 1b       	sub	r16, r20
 560:	15 0b       	sbc	r17, r21
 562:	26 0b       	sbc	r18, r22
 564:	37 0b       	sbc	r19, r23
 566:	c9 01       	movw	r24, r18
 568:	b8 01       	movw	r22, r16
}
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	08 95       	ret

00000570 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return milliseconds;
 570:	fc 01       	movw	r30, r24
 572:	60 81       	ld	r22, Z
 574:	71 81       	ldd	r23, Z+1	; 0x01
 576:	82 81       	ldd	r24, Z+2	; 0x02
 578:	93 81       	ldd	r25, Z+3	; 0x03
}
 57a:	08 95       	ret

0000057c <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 57c:	08 95       	ret

0000057e <__tablejump2__>:
 57e:	ee 0f       	add	r30, r30
 580:	ff 1f       	adc	r31, r31
 582:	05 90       	lpm	r0, Z+
 584:	f4 91       	lpm	r31, Z
 586:	e0 2d       	mov	r30, r0
 588:	09 94       	ijmp

0000058a <malloc>:
 58a:	0f 93       	push	r16
 58c:	1f 93       	push	r17
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
 592:	82 30       	cpi	r24, 0x02	; 2
 594:	91 05       	cpc	r25, r1
 596:	10 f4       	brcc	.+4      	; 0x59c <malloc+0x12>
 598:	82 e0       	ldi	r24, 0x02	; 2
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__flp>
 5a0:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <__flp+0x1>
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a0 e0       	ldi	r26, 0x00	; 0
 5aa:	b0 e0       	ldi	r27, 0x00	; 0
 5ac:	30 97       	sbiw	r30, 0x00	; 0
 5ae:	19 f1       	breq	.+70     	; 0x5f6 <malloc+0x6c>
 5b0:	40 81       	ld	r20, Z
 5b2:	51 81       	ldd	r21, Z+1	; 0x01
 5b4:	02 81       	ldd	r16, Z+2	; 0x02
 5b6:	13 81       	ldd	r17, Z+3	; 0x03
 5b8:	48 17       	cp	r20, r24
 5ba:	59 07       	cpc	r21, r25
 5bc:	c8 f0       	brcs	.+50     	; 0x5f0 <malloc+0x66>
 5be:	84 17       	cp	r24, r20
 5c0:	95 07       	cpc	r25, r21
 5c2:	69 f4       	brne	.+26     	; 0x5de <malloc+0x54>
 5c4:	10 97       	sbiw	r26, 0x00	; 0
 5c6:	31 f0       	breq	.+12     	; 0x5d4 <malloc+0x4a>
 5c8:	12 96       	adiw	r26, 0x02	; 2
 5ca:	0c 93       	st	X, r16
 5cc:	12 97       	sbiw	r26, 0x02	; 2
 5ce:	13 96       	adiw	r26, 0x03	; 3
 5d0:	1c 93       	st	X, r17
 5d2:	27 c0       	rjmp	.+78     	; 0x622 <malloc+0x98>
 5d4:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <__flp>
 5d8:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <__flp+0x1>
 5dc:	22 c0       	rjmp	.+68     	; 0x622 <malloc+0x98>
 5de:	21 15       	cp	r18, r1
 5e0:	31 05       	cpc	r19, r1
 5e2:	19 f0       	breq	.+6      	; 0x5ea <malloc+0x60>
 5e4:	42 17       	cp	r20, r18
 5e6:	53 07       	cpc	r21, r19
 5e8:	18 f4       	brcc	.+6      	; 0x5f0 <malloc+0x66>
 5ea:	9a 01       	movw	r18, r20
 5ec:	bd 01       	movw	r22, r26
 5ee:	ef 01       	movw	r28, r30
 5f0:	df 01       	movw	r26, r30
 5f2:	f8 01       	movw	r30, r16
 5f4:	db cf       	rjmp	.-74     	; 0x5ac <malloc+0x22>
 5f6:	21 15       	cp	r18, r1
 5f8:	31 05       	cpc	r19, r1
 5fa:	f9 f0       	breq	.+62     	; 0x63a <malloc+0xb0>
 5fc:	28 1b       	sub	r18, r24
 5fe:	39 0b       	sbc	r19, r25
 600:	24 30       	cpi	r18, 0x04	; 4
 602:	31 05       	cpc	r19, r1
 604:	80 f4       	brcc	.+32     	; 0x626 <malloc+0x9c>
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	9b 81       	ldd	r25, Y+3	; 0x03
 60a:	61 15       	cp	r22, r1
 60c:	71 05       	cpc	r23, r1
 60e:	21 f0       	breq	.+8      	; 0x618 <malloc+0x8e>
 610:	fb 01       	movw	r30, r22
 612:	93 83       	std	Z+3, r25	; 0x03
 614:	82 83       	std	Z+2, r24	; 0x02
 616:	04 c0       	rjmp	.+8      	; 0x620 <malloc+0x96>
 618:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__flp+0x1>
 61c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__flp>
 620:	fe 01       	movw	r30, r28
 622:	32 96       	adiw	r30, 0x02	; 2
 624:	44 c0       	rjmp	.+136    	; 0x6ae <malloc+0x124>
 626:	fe 01       	movw	r30, r28
 628:	e2 0f       	add	r30, r18
 62a:	f3 1f       	adc	r31, r19
 62c:	81 93       	st	Z+, r24
 62e:	91 93       	st	Z+, r25
 630:	22 50       	subi	r18, 0x02	; 2
 632:	31 09       	sbc	r19, r1
 634:	39 83       	std	Y+1, r19	; 0x01
 636:	28 83       	st	Y, r18
 638:	3a c0       	rjmp	.+116    	; 0x6ae <malloc+0x124>
 63a:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__brkval>
 63e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__brkval+0x1>
 642:	23 2b       	or	r18, r19
 644:	41 f4       	brne	.+16     	; 0x656 <malloc+0xcc>
 646:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 64a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 64e:	30 93 2d 01 	sts	0x012D, r19	; 0x80012d <__brkval+0x1>
 652:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <__brkval>
 656:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 65a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 65e:	21 15       	cp	r18, r1
 660:	31 05       	cpc	r19, r1
 662:	41 f4       	brne	.+16     	; 0x674 <malloc+0xea>
 664:	2d b7       	in	r18, 0x3d	; 61
 666:	3e b7       	in	r19, 0x3e	; 62
 668:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 66c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 670:	24 1b       	sub	r18, r20
 672:	35 0b       	sbc	r19, r21
 674:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <__brkval>
 678:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <__brkval+0x1>
 67c:	e2 17       	cp	r30, r18
 67e:	f3 07       	cpc	r31, r19
 680:	a0 f4       	brcc	.+40     	; 0x6aa <malloc+0x120>
 682:	2e 1b       	sub	r18, r30
 684:	3f 0b       	sbc	r19, r31
 686:	28 17       	cp	r18, r24
 688:	39 07       	cpc	r19, r25
 68a:	78 f0       	brcs	.+30     	; 0x6aa <malloc+0x120>
 68c:	ac 01       	movw	r20, r24
 68e:	4e 5f       	subi	r20, 0xFE	; 254
 690:	5f 4f       	sbci	r21, 0xFF	; 255
 692:	24 17       	cp	r18, r20
 694:	35 07       	cpc	r19, r21
 696:	48 f0       	brcs	.+18     	; 0x6aa <malloc+0x120>
 698:	4e 0f       	add	r20, r30
 69a:	5f 1f       	adc	r21, r31
 69c:	50 93 2d 01 	sts	0x012D, r21	; 0x80012d <__brkval+0x1>
 6a0:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <__brkval>
 6a4:	81 93       	st	Z+, r24
 6a6:	91 93       	st	Z+, r25
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <malloc+0x124>
 6aa:	e0 e0       	ldi	r30, 0x00	; 0
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	cf 01       	movw	r24, r30
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	1f 91       	pop	r17
 6b6:	0f 91       	pop	r16
 6b8:	08 95       	ret

000006ba <free>:
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 97       	sbiw	r24, 0x00	; 0
 6c0:	09 f4       	brne	.+2      	; 0x6c4 <free+0xa>
 6c2:	81 c0       	rjmp	.+258    	; 0x7c6 <free+0x10c>
 6c4:	fc 01       	movw	r30, r24
 6c6:	32 97       	sbiw	r30, 0x02	; 2
 6c8:	13 82       	std	Z+3, r1	; 0x03
 6ca:	12 82       	std	Z+2, r1	; 0x02
 6cc:	a0 91 2e 01 	lds	r26, 0x012E	; 0x80012e <__flp>
 6d0:	b0 91 2f 01 	lds	r27, 0x012F	; 0x80012f <__flp+0x1>
 6d4:	10 97       	sbiw	r26, 0x00	; 0
 6d6:	81 f4       	brne	.+32     	; 0x6f8 <free+0x3e>
 6d8:	20 81       	ld	r18, Z
 6da:	31 81       	ldd	r19, Z+1	; 0x01
 6dc:	82 0f       	add	r24, r18
 6de:	93 1f       	adc	r25, r19
 6e0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__brkval>
 6e4:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__brkval+0x1>
 6e8:	28 17       	cp	r18, r24
 6ea:	39 07       	cpc	r19, r25
 6ec:	51 f5       	brne	.+84     	; 0x742 <free+0x88>
 6ee:	f0 93 2d 01 	sts	0x012D, r31	; 0x80012d <__brkval+0x1>
 6f2:	e0 93 2c 01 	sts	0x012C, r30	; 0x80012c <__brkval>
 6f6:	67 c0       	rjmp	.+206    	; 0x7c6 <free+0x10c>
 6f8:	ed 01       	movw	r28, r26
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	ce 17       	cp	r28, r30
 700:	df 07       	cpc	r29, r31
 702:	40 f4       	brcc	.+16     	; 0x714 <free+0x5a>
 704:	4a 81       	ldd	r20, Y+2	; 0x02
 706:	5b 81       	ldd	r21, Y+3	; 0x03
 708:	9e 01       	movw	r18, r28
 70a:	41 15       	cp	r20, r1
 70c:	51 05       	cpc	r21, r1
 70e:	f1 f0       	breq	.+60     	; 0x74c <free+0x92>
 710:	ea 01       	movw	r28, r20
 712:	f5 cf       	rjmp	.-22     	; 0x6fe <free+0x44>
 714:	d3 83       	std	Z+3, r29	; 0x03
 716:	c2 83       	std	Z+2, r28	; 0x02
 718:	40 81       	ld	r20, Z
 71a:	51 81       	ldd	r21, Z+1	; 0x01
 71c:	84 0f       	add	r24, r20
 71e:	95 1f       	adc	r25, r21
 720:	c8 17       	cp	r28, r24
 722:	d9 07       	cpc	r29, r25
 724:	59 f4       	brne	.+22     	; 0x73c <free+0x82>
 726:	88 81       	ld	r24, Y
 728:	99 81       	ldd	r25, Y+1	; 0x01
 72a:	84 0f       	add	r24, r20
 72c:	95 1f       	adc	r25, r21
 72e:	02 96       	adiw	r24, 0x02	; 2
 730:	91 83       	std	Z+1, r25	; 0x01
 732:	80 83       	st	Z, r24
 734:	8a 81       	ldd	r24, Y+2	; 0x02
 736:	9b 81       	ldd	r25, Y+3	; 0x03
 738:	93 83       	std	Z+3, r25	; 0x03
 73a:	82 83       	std	Z+2, r24	; 0x02
 73c:	21 15       	cp	r18, r1
 73e:	31 05       	cpc	r19, r1
 740:	29 f4       	brne	.+10     	; 0x74c <free+0x92>
 742:	f0 93 2f 01 	sts	0x012F, r31	; 0x80012f <__flp+0x1>
 746:	e0 93 2e 01 	sts	0x012E, r30	; 0x80012e <__flp>
 74a:	3d c0       	rjmp	.+122    	; 0x7c6 <free+0x10c>
 74c:	e9 01       	movw	r28, r18
 74e:	fb 83       	std	Y+3, r31	; 0x03
 750:	ea 83       	std	Y+2, r30	; 0x02
 752:	49 91       	ld	r20, Y+
 754:	59 91       	ld	r21, Y+
 756:	c4 0f       	add	r28, r20
 758:	d5 1f       	adc	r29, r21
 75a:	ec 17       	cp	r30, r28
 75c:	fd 07       	cpc	r31, r29
 75e:	61 f4       	brne	.+24     	; 0x778 <free+0xbe>
 760:	80 81       	ld	r24, Z
 762:	91 81       	ldd	r25, Z+1	; 0x01
 764:	84 0f       	add	r24, r20
 766:	95 1f       	adc	r25, r21
 768:	02 96       	adiw	r24, 0x02	; 2
 76a:	e9 01       	movw	r28, r18
 76c:	99 83       	std	Y+1, r25	; 0x01
 76e:	88 83       	st	Y, r24
 770:	82 81       	ldd	r24, Z+2	; 0x02
 772:	93 81       	ldd	r25, Z+3	; 0x03
 774:	9b 83       	std	Y+3, r25	; 0x03
 776:	8a 83       	std	Y+2, r24	; 0x02
 778:	e0 e0       	ldi	r30, 0x00	; 0
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	12 96       	adiw	r26, 0x02	; 2
 77e:	8d 91       	ld	r24, X+
 780:	9c 91       	ld	r25, X
 782:	13 97       	sbiw	r26, 0x03	; 3
 784:	00 97       	sbiw	r24, 0x00	; 0
 786:	19 f0       	breq	.+6      	; 0x78e <free+0xd4>
 788:	fd 01       	movw	r30, r26
 78a:	dc 01       	movw	r26, r24
 78c:	f7 cf       	rjmp	.-18     	; 0x77c <free+0xc2>
 78e:	8d 91       	ld	r24, X+
 790:	9c 91       	ld	r25, X
 792:	11 97       	sbiw	r26, 0x01	; 1
 794:	9d 01       	movw	r18, r26
 796:	2e 5f       	subi	r18, 0xFE	; 254
 798:	3f 4f       	sbci	r19, 0xFF	; 255
 79a:	82 0f       	add	r24, r18
 79c:	93 1f       	adc	r25, r19
 79e:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__brkval>
 7a2:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <__brkval+0x1>
 7a6:	28 17       	cp	r18, r24
 7a8:	39 07       	cpc	r19, r25
 7aa:	69 f4       	brne	.+26     	; 0x7c6 <free+0x10c>
 7ac:	30 97       	sbiw	r30, 0x00	; 0
 7ae:	29 f4       	brne	.+10     	; 0x7ba <free+0x100>
 7b0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__flp+0x1>
 7b4:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__flp>
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <free+0x104>
 7ba:	13 82       	std	Z+3, r1	; 0x03
 7bc:	12 82       	std	Z+2, r1	; 0x02
 7be:	b0 93 2d 01 	sts	0x012D, r27	; 0x80012d <__brkval+0x1>
 7c2:	a0 93 2c 01 	sts	0x012C, r26	; 0x80012c <__brkval>
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <__do_global_dtors>:
 7cc:	10 e0       	ldi	r17, 0x00	; 0
 7ce:	c5 e3       	ldi	r28, 0x35	; 53
 7d0:	d0 e0       	ldi	r29, 0x00	; 0
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <__do_global_dtors+0x10>
 7d4:	fe 01       	movw	r30, r28
 7d6:	0e 94 bf 02 	call	0x57e	; 0x57e <__tablejump2__>
 7da:	21 96       	adiw	r28, 0x01	; 1
 7dc:	c6 33       	cpi	r28, 0x36	; 54
 7de:	d1 07       	cpc	r29, r17
 7e0:	c9 f7       	brne	.-14     	; 0x7d4 <__do_global_dtors+0x8>
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
