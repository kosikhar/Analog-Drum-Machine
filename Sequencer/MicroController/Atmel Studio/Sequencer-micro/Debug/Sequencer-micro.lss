
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800106  00800106  00000874  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214e  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8b  00000000  00000000  00002b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000840  00000000  00000000  000038e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00004124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a24  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006db  00000000  00000000  00004e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005517  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_7>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	1b 01       	movw	r2, r22

0000006a <__ctors_end>:
  6a:	24 01       	movw	r4, r8

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a6 e0       	ldi	r26, 0x06	; 6
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 32       	cpi	r26, 0x22	; 34
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ed       	ldi	r30, 0xDA	; 218
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 b9 02 	call	0x572	; 0x572 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  b8:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:
#include "global.h"
#include "interrupts.h"

//Call every 10us, will be used for controlling shift registers
ISR( TIMER0_COMPA_vect, ISR_NOBLOCK )
{
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	//Increment timer every 10us
	timer.incrementTimer();
  e4:	89 e1       	ldi	r24, 0x19	; 25
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 85 02 	call	0x50a	; 0x50a <_ZN5Timer14incrementTimerEv>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_7>:

ISR( TIMER2_COMPA_vect, ISR_NOBLOCK )
{
 10e:	78 94       	sei
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	//Attempt to shift bits every 500us
	outputShiftRegister.enable();
 132:	89 e0       	ldi	r24, 0x09	; 9
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 32 01 	call	0x264	; 0x264 <_ZN18ShiftRegister_SIPO6enableEv>
}
 13a:	ff 91       	pop	r31
 13c:	ef 91       	pop	r30
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	7f 91       	pop	r23
 148:	6f 91       	pop	r22
 14a:	5f 91       	pop	r21
 14c:	4f 91       	pop	r20
 14e:	3f 91       	pop	r19
 150:	2f 91       	pop	r18
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_Z20setUpTimerInterruptsv>:
{
	//Setting up Timer0 (8-bit timer) to trigger ISR after 10us
	
	//TIMSK0 is the TC0 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR0A
	TIMSK0 |= (1 << OCIE0A);
 15c:	ee e6       	ldi	r30, 0x6E	; 110
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	82 60       	ori	r24, 0x02	; 2
 164:	80 83       	st	Z, r24
	
	//With 16MHz clk, we would need 160 steps to get 10us. 
	OCR0A = (uint8_t) 160;
 166:	80 ea       	ldi	r24, 0xA0	; 160
 168:	87 bd       	out	0x27, r24	; 39

	//Disconnect OC0A, and use CTC mode
	TCCR0A = (uint8_t) (1 << WGM01);
 16a:	92 e0       	ldi	r25, 0x02	; 2
 16c:	94 bd       	out	0x24, r25	; 36

	//Use clk div1 as input to the timer making timer run at 16MHz
	TCCR0B = (uint8_t) (1 << CS00);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	85 bd       	out	0x25, r24	; 37
	
	//Setting up Timer2 (8-bit Timer) to trigger ISR every 500us
	
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR2A
	TIMSK2 |= (1 << OCIE2A);
 172:	e0 e7       	ldi	r30, 0x70	; 112
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
	
	//With 16MHz/32 = 500kHz clk, we would need 250 steps to get 500us.
	OCR2A = (uint8_t) 250;
 17c:	8a ef       	ldi	r24, 0xFA	; 250
 17e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//Disconnect OC2A, and use CTC mode
	TCCR2A = (uint8_t) (1 << WGM21);
 182:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	//Use clk div32 as input to the timer making timer run at 500kHz
	TCCR2B = (uint8_t) (1 << CS21) | (1 << CS20);
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//Enable Interrupts Globally.
	sei();
 18c:	78 94       	sei
 18e:	08 95       	ret

00000190 <main>:
ShiftRegister_SIPO outputShiftRegister;
ShiftRegister_SIPO_pinout outputShiftRegister_pinout;


int main(void)
{	
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	//Pins on port C for the output shift register
	//TODO put this into a function. Its ugly
	outputShiftRegister_pinout.serial = 0;
 19a:	e6 e0       	ldi	r30, 0x06	; 6
 19c:	f1 e0       	ldi	r31, 0x01	; 1
 19e:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
 1a6:	80 83       	st	Z, r24
	
	outputShiftRegister.ShiftRegisterInit(1, &outputShiftRegister_pinout);
 1a8:	af 01       	movw	r20, r30
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	89 e0       	ldi	r24, 0x09	; 9
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 5e 01 	call	0x2bc	; 0x2bc <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>
	outputShiftRegister.getTimerReference(&timer);
 1b4:	69 e1       	ldi	r22, 0x19	; 25
 1b6:	71 e0       	ldi	r23, 0x01	; 1
 1b8:	89 e0       	ldi	r24, 0x09	; 9
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>

	//Enable Timer interrupts
	setUpTimerInterrupts();
 1c0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z20setUpTimerInterruptsv>
	
	//Set data direction to output
	DDRD |= (1 << PORTD0);
 1c4:	50 9a       	sbi	0x0a, 0	; 10
	
	//Declare Byte to write to shift register
	uint8_t bytesToWrite [1];
	bytesToWrite[0] = 0;
 1c6:	19 82       	std	Y+1, r1	; 0x01
		
		//Wait 500ms
		milliSnapShot = timer.millis();
		while( timer.elapsed_millis( milliSnapShot ) < 500 );
		
		if( outputShiftRegister.doneWork == true ){
 1c8:	09 e0       	ldi	r16, 0x09	; 9
 1ca:	11 e0       	ldi	r17, 0x01	; 1
    /* Replace with your application code */
    while (1) 
    {
		
		//Set Test LED pin to output
		PORTD &= ~(1 << PORTD0);
 1cc:	58 98       	cbi	0x0b, 0	; 11
		
		//Wait 500ms
		uint32_t milliSnapShot = timer.millis();
 1ce:	89 e1       	ldi	r24, 0x19	; 25
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN5Timer6millisEv>
 1d6:	6b 01       	movw	r12, r22
 1d8:	7c 01       	movw	r14, r24
		while( timer.elapsed_millis( milliSnapShot ) < 500 );
 1da:	b7 01       	movw	r22, r14
 1dc:	a6 01       	movw	r20, r12
 1de:	89 e1       	ldi	r24, 0x19	; 25
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer14elapsed_millisEm>
 1e6:	64 3f       	cpi	r22, 0xF4	; 244
 1e8:	71 40       	sbci	r23, 0x01	; 1
 1ea:	81 05       	cpc	r24, r1
 1ec:	91 05       	cpc	r25, r1
 1ee:	a8 f3       	brcs	.-22     	; 0x1da <main+0x4a>
		
		PORTD |= (1 << PORTD0);
 1f0:	58 9a       	sbi	0x0b, 0	; 11
		
		//Wait 500ms
		milliSnapShot = timer.millis();
 1f2:	89 e1       	ldi	r24, 0x19	; 25
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 b2 02 	call	0x564	; 0x564 <_ZN5Timer6millisEv>
 1fa:	6b 01       	movw	r12, r22
 1fc:	7c 01       	movw	r14, r24
		while( timer.elapsed_millis( milliSnapShot ) < 500 );
 1fe:	b7 01       	movw	r22, r14
 200:	a6 01       	movw	r20, r12
 202:	89 e1       	ldi	r24, 0x19	; 25
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer14elapsed_millisEm>
 20a:	64 3f       	cpi	r22, 0xF4	; 244
 20c:	71 40       	sbci	r23, 0x01	; 1
 20e:	81 05       	cpc	r24, r1
 210:	91 05       	cpc	r25, r1
 212:	a8 f3       	brcs	.-22     	; 0x1fe <main+0x6e>
		
		if( outputShiftRegister.doneWork == true ){
 214:	f8 01       	movw	r30, r16
 216:	84 81       	ldd	r24, Z+4	; 0x04
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	49 f4       	brne	.+18     	; 0x22e <main+0x9e>
			bytesToWrite[0]++;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	8f 5f       	subi	r24, 0xFF	; 255
 220:	89 83       	std	Y+1, r24	; 0x01
			outputShiftRegister.loadBytes( bytesToWrite );
 222:	be 01       	movw	r22, r28
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	c8 01       	movw	r24, r16
 22a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <_ZN18ShiftRegister_SIPO9loadBytesEPh>
		}
		outputShiftRegister.shiftBits();
 22e:	c8 01       	movw	r24, r16
 230:	0e 94 c9 01 	call	0x392	; 0x392 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
	//Declare Byte to write to shift register
	uint8_t bytesToWrite [1];
	bytesToWrite[0] = 0;
	
    /* Replace with your application code */
    while (1) 
 234:	cb cf       	rjmp	.-106    	; 0x1cc <main+0x3c>

00000236 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 236:	89 e1       	ldi	r24, 0x19	; 25
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN5TimerC1Ev>

//Initialize the output shift register.
ShiftRegister_SIPO outputShiftRegister;
 23e:	89 e0       	ldi	r24, 0x09	; 9
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN18ShiftRegister_SIPOC1Ev>
 246:	08 95       	ret

00000248 <_GLOBAL__sub_D_timer>:
 248:	89 e0       	ldi	r24, 0x09	; 9
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <_ZN18ShiftRegister_SIPOD1Ev>
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 250:	89 e1       	ldi	r24, 0x19	; 25
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	0e 94 b8 02 	call	0x570	; 0x570 <_ZN5TimerD1Ev>
 258:	08 95       	ret

0000025a <_ZN18ShiftRegister_SIPOC1Ev>:
	enabled = true;
}

void ShiftRegister_SIPO::disable( void )
{
	enabled = false;
 25a:	fc 01       	movw	r30, r24
 25c:	12 86       	std	Z+10, r1	; 0x0a
 25e:	11 86       	std	Z+9, r1	; 0x09
 260:	17 82       	std	Z+7, r1	; 0x07
 262:	08 95       	ret

00000264 <_ZN18ShiftRegister_SIPO6enableEv>:
 264:	21 e0       	ldi	r18, 0x01	; 1
 266:	fc 01       	movw	r30, r24
 268:	23 83       	std	Z+3, r18	; 0x03
 26a:	08 95       	ret

0000026c <_ZN18ShiftRegister_SIPO9setupPinsEv>:
}

void ShiftRegister_SIPO::setupPins( void ) 
{
 26c:	fc 01       	movw	r30, r24
	//setup the pinout byte
	pinout_byte = (1 << pinout->shift) | (1 << pinout->latch) | (1 << pinout->serial);	
 26e:	a0 81       	ld	r26, Z
 270:	b1 81       	ldd	r27, Z+1	; 0x01
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	a9 01       	movw	r20, r18
 278:	0c 90       	ld	r0, X
 27a:	02 c0       	rjmp	.+4      	; 0x280 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 27c:	44 0f       	add	r20, r20
 27e:	55 1f       	adc	r21, r21
 280:	0a 94       	dec	r0
 282:	e2 f7       	brpl	.-8      	; 0x27c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 284:	c9 01       	movw	r24, r18
 286:	11 96       	adiw	r26, 0x01	; 1
 288:	0c 90       	ld	r0, X
 28a:	11 97       	sbiw	r26, 0x01	; 1
 28c:	02 c0       	rjmp	.+4      	; 0x292 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 296:	84 2b       	or	r24, r20
 298:	12 96       	adiw	r26, 0x02	; 2
 29a:	0c 90       	ld	r0, X
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 2a6:	28 2b       	or	r18, r24
 2a8:	22 83       	std	Z+2, r18	; 0x02

	// Initialize these pins to be 0.
	SIPO_PORT &= ~( pinout_byte );
 2aa:	88 b1       	in	r24, 0x08	; 8
 2ac:	20 95       	com	r18
 2ae:	28 23       	and	r18, r24
 2b0:	28 b9       	out	0x08, r18	; 8

	// Set pins to be output.
	SIPO_DDR |= pinout_byte;
 2b2:	97 b1       	in	r25, 0x07	; 7
 2b4:	82 81       	ldd	r24, Z+2	; 0x02
 2b6:	89 2b       	or	r24, r25
 2b8:	87 b9       	out	0x07, r24	; 7
 2ba:	08 95       	ret

000002bc <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>:
	
} //ShiftRegister_SIPO


void ShiftRegister_SIPO::ShiftRegisterInit( uint8_t numShiftRegisters, ShiftRegister_SIPO_pinout * pins )
{
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	ec 01       	movw	r28, r24
	//Store the size for later use.
	size = numShiftRegisters;
 2c6:	6a 87       	std	Y+10, r22	; 0x0a
	
	//Store shift register pinout for later use
	pinout = pins;
 2c8:	59 83       	std	Y+1, r21	; 0x01
 2ca:	48 83       	st	Y, r20
	
	//initialize doneWork
	doneWork = true;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	8c 83       	std	Y+4, r24	; 0x04
	//initialize shiftLock
	shiftLock = false;
 2d0:	1f 82       	std	Y+7, r1	; 0x07
	//initialize moreWork
	moreWork = false;
 2d2:	18 86       	std	Y+8, r1	; 0x08
	
	//startup disabled
	enabled = false;
 2d4:	1b 82       	std	Y+3, r1	; 0x03
	
	//Initialize array. If I'm using 2 shift registers I need 2 bytes.
	output_bytes = (uint8_t *) malloc(numShiftRegisters) ;
 2d6:	06 2f       	mov	r16, r22
 2d8:	10 e0       	ldi	r17, 0x00	; 0
 2da:	c8 01       	movw	r24, r16
 2dc:	0e 94 bf 02 	call	0x57e	; 0x57e <malloc>
 2e0:	9d 87       	std	Y+13, r25	; 0x0d
 2e2:	8c 87       	std	Y+12, r24	; 0x0c
	output_bytes_buffer = (uint8_t *) malloc(numShiftRegisters);
 2e4:	c8 01       	movw	r24, r16
 2e6:	0e 94 bf 02 	call	0x57e	; 0x57e <malloc>
 2ea:	9f 87       	std	Y+15, r25	; 0x0f
 2ec:	8e 87       	std	Y+14, r24	; 0x0e
	
	//Setup pins on the 328p to utilize the shift register.
	this->setupPins();
 2ee:	ce 01       	movw	r24, r28
 2f0:	0e 94 36 01 	call	0x26c	; 0x26c <_ZN18ShiftRegister_SIPO9setupPinsEv>
	
} //ShiftRegister_SIPO
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	0f 91       	pop	r16
 2fc:	08 95       	ret

000002fe <_ZN18ShiftRegister_SIPO9loadBytesEPh>:
	SIPO_DDR |= pinout_byte;

} //SetupPins

void ShiftRegister_SIPO::loadBytes( uint8_t * bytesToLoad )
{
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	ec 01       	movw	r28, r24
	moreWork = true;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	88 87       	std	Y+8, r24	; 0x08
	doneWork = false;
 308:	1c 82       	std	Y+4, r1	; 0x04
 30a:	a6 2f       	mov	r26, r22
 30c:	b7 2f       	mov	r27, r23
 30e:	20 e0       	ldi	r18, 0x00	; 0
 310:	30 e0       	ldi	r19, 0x00	; 0
	for(int i=0; i <= size; i++){
		output_bytes_buffer[i] = bytesToLoad[i];
 312:	8d 91       	ld	r24, X+
 314:	ee 85       	ldd	r30, Y+14	; 0x0e
 316:	ff 85       	ldd	r31, Y+15	; 0x0f
 318:	e2 0f       	add	r30, r18
 31a:	f3 1f       	adc	r31, r19
 31c:	80 83       	st	Z, r24

void ShiftRegister_SIPO::loadBytes( uint8_t * bytesToLoad )
{
	moreWork = true;
	doneWork = false;
	for(int i=0; i <= size; i++){
 31e:	2f 5f       	subi	r18, 0xFF	; 255
 320:	3f 4f       	sbci	r19, 0xFF	; 255
 322:	4a 85       	ldd	r20, Y+10	; 0x0a
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	42 17       	cp	r20, r18
 328:	53 07       	cpc	r21, r19
 32a:	9c f7       	brge	.-26     	; 0x312 <_ZN18ShiftRegister_SIPO9loadBytesEPh+0x14>
		output_bytes_buffer[i] = bytesToLoad[i];
	}
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <_ZN18ShiftRegister_SIPO9pulse10usEh>:

void ShiftRegister_SIPO::pulse10us( uint8_t pin )
{
 332:	0f 93       	push	r16
 334:	1f 93       	push	r17
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
	//Set pin to 1
	SIPO_PORT |= (1 << pin);
 33c:	88 b1       	in	r24, 0x08	; 8
 33e:	01 e0       	ldi	r16, 0x01	; 1
 340:	10 e0       	ldi	r17, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN18ShiftRegister_SIPO9pulse10usEh+0x16>
 344:	00 0f       	add	r16, r16
 346:	11 1f       	adc	r17, r17
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN18ShiftRegister_SIPO9pulse10usEh+0x12>
 34c:	80 2b       	or	r24, r16
 34e:	88 b9       	out	0x08, r24	; 8
	//wait 10us
	microSnap = timer->micros();
 350:	8d 81       	ldd	r24, Y+5	; 0x05
 352:	9e 81       	ldd	r25, Y+6	; 0x06
 354:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN5Timer6microsEv>
 358:	8b 87       	std	Y+11, r24	; 0x0b
	while( timer->elapsed_micros_fast(microSnap) < 2);
 35a:	6b 85       	ldd	r22, Y+11	; 0x0b
 35c:	8d 81       	ldd	r24, Y+5	; 0x05
 35e:	9e 81       	ldd	r25, Y+6	; 0x06
 360:	0e 94 99 02 	call	0x532	; 0x532 <_ZN5Timer19elapsed_micros_fastEh>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	c8 f3       	brcs	.-14     	; 0x35a <_ZN18ShiftRegister_SIPO9pulse10usEh+0x28>
	//Set pin to 0.
	SIPO_PORT &= ~(1 << pin);
 368:	88 b1       	in	r24, 0x08	; 8
 36a:	00 95       	com	r16
 36c:	08 23       	and	r16, r24
 36e:	08 b9       	out	0x08, r16	; 8
	//wait 10us
	microSnap = timer->micros();
 370:	8d 81       	ldd	r24, Y+5	; 0x05
 372:	9e 81       	ldd	r25, Y+6	; 0x06
 374:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN5Timer6microsEv>
 378:	8b 87       	std	Y+11, r24	; 0x0b
	while( timer->elapsed_micros_fast(microSnap) < 2);
 37a:	6b 85       	ldd	r22, Y+11	; 0x0b
 37c:	8d 81       	ldd	r24, Y+5	; 0x05
 37e:	9e 81       	ldd	r25, Y+6	; 0x06
 380:	0e 94 99 02 	call	0x532	; 0x532 <_ZN5Timer19elapsed_micros_fastEh>
 384:	82 30       	cpi	r24, 0x02	; 2
 386:	c8 f3       	brcs	.-14     	; 0x37a <_ZN18ShiftRegister_SIPO9pulse10usEh+0x48>
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	08 95       	ret

00000392 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
//This will be called in a timer based interrupt so it would need to be locked
//to prevent recursion.
void ShiftRegister_SIPO::shiftBits( void )
{	
 392:	cf 92       	push	r12
 394:	df 92       	push	r13
 396:	ef 92       	push	r14
 398:	ff 92       	push	r15
 39a:	0f 93       	push	r16
 39c:	1f 93       	push	r17
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
	//If shift register not enabled, return
	if (enabled != true){
 3a4:	8b 81       	ldd	r24, Y+3	; 0x03
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	09 f0       	breq	.+2      	; 0x3ac <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x1a>
 3aa:	8d c0       	rjmp	.+282    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
		return;
	}
	
	// See if in the middle of shifting
	if ( shiftLock == false ){	
 3ac:	8f 81       	ldd	r24, Y+7	; 0x07
 3ae:	81 11       	cpse	r24, r1
 3b0:	8a c0       	rjmp	.+276    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>

		//Check if done shifting bits
		if ( doneWork == true){
 3b2:	8c 81       	ldd	r24, Y+4	; 0x04
 3b4:	81 30       	cpi	r24, 0x01	; 1
 3b6:	c9 f4       	brne	.+50     	; 0x3ea <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x58>
						
			//If there's more work, move buffer to output_bytes
			//Since we been here a little long, return
			if ( moreWork == true ){
 3b8:	88 85       	ldd	r24, Y+8	; 0x08
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	91 f4       	brne	.+36     	; 0x3e2 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x50>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
				for(int i=0; i <= size ; i++){
					output_bytes[i] = output_bytes_buffer[i];
 3c2:	ee 85       	ldd	r30, Y+14	; 0x0e
 3c4:	ff 85       	ldd	r31, Y+15	; 0x0f
 3c6:	e8 0f       	add	r30, r24
 3c8:	f9 1f       	adc	r31, r25
 3ca:	20 81       	ld	r18, Z
 3cc:	ec 85       	ldd	r30, Y+12	; 0x0c
 3ce:	fd 85       	ldd	r31, Y+13	; 0x0d
 3d0:	e8 0f       	add	r30, r24
 3d2:	f9 1f       	adc	r31, r25
 3d4:	20 83       	st	Z, r18
		if ( doneWork == true){
						
			//If there's more work, move buffer to output_bytes
			//Since we been here a little long, return
			if ( moreWork == true ){
				for(int i=0; i <= size ; i++){
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	2a 85       	ldd	r18, Y+10	; 0x0a
 3da:	30 e0       	ldi	r19, 0x00	; 0
 3dc:	28 17       	cp	r18, r24
 3de:	39 07       	cpc	r19, r25
 3e0:	84 f7       	brge	.-32     	; 0x3c2 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x30>
					output_bytes[i] = output_bytes_buffer[i];
				}		
			}		
			doneWork = false;
 3e2:	1c 82       	std	Y+4, r1	; 0x04
			moreWork = false;
 3e4:	18 86       	std	Y+8, r1	; 0x08
			shiftCounter = 0;
 3e6:	19 86       	std	Y+9, r1	; 0x09
			return;
 3e8:	6e c0       	rjmp	.+220    	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
	} else {
		return; 
	}
	
	//block recursive interrupt calls.
	shiftLock = true;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	8f 83       	std	Y+7, r24	; 0x07

	//Start with all values low then wait 10us
	SIPO_PORT &= ~( pinout_byte );
 3ee:	88 b1       	in	r24, 0x08	; 8
 3f0:	9a 81       	ldd	r25, Y+2	; 0x02
 3f2:	90 95       	com	r25
 3f4:	89 23       	and	r24, r25
 3f6:	88 b9       	out	0x08, r24	; 8
	//Wait 10us
	microSnap = timer->micros();
 3f8:	8d 81       	ldd	r24, Y+5	; 0x05
 3fa:	9e 81       	ldd	r25, Y+6	; 0x06
 3fc:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN5Timer6microsEv>
 400:	8b 87       	std	Y+11, r24	; 0x0b
	while ( timer->elapsed_micros_fast(microSnap) < 1);
 402:	6b 85       	ldd	r22, Y+11	; 0x0b
 404:	8d 81       	ldd	r24, Y+5	; 0x05
 406:	9e 81       	ldd	r25, Y+6	; 0x06
 408:	0e 94 99 02 	call	0x532	; 0x532 <_ZN5Timer19elapsed_micros_fastEh>
 40c:	88 23       	and	r24, r24
 40e:	c9 f3       	breq	.-14     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 410:	e1 2c       	mov	r14, r1
 412:	f1 2c       	mov	r15, r1
			if( (1 << i) & ( output_bytes[j] ) ){
				//Set serial bit
				SIPO_PORT |= (1 << pinout->serial);
			} else {
				//Clear serial bit
				SIPO_PORT &= ~(1 << pinout->serial);
 414:	cc 24       	eor	r12, r12
 416:	c3 94       	inc	r12
 418:	d1 2c       	mov	r13, r1
 41a:	00 e0       	ldi	r16, 0x00	; 0
 41c:	10 e0       	ldi	r17, 0x00	; 0
	while ( timer->elapsed_micros_fast(microSnap) < 1);
	
	for(int j=0; j <= size; j++){
		for (int i=0; i <= 8; i++){	
			//figure out if bit needs to be set or cleared
			if( (1 << i) & ( output_bytes[j] ) ){
 41e:	ec 85       	ldd	r30, Y+12	; 0x0c
 420:	fd 85       	ldd	r31, Y+13	; 0x0d
 422:	ee 0d       	add	r30, r14
 424:	ff 1d       	adc	r31, r15
 426:	80 81       	ld	r24, Z
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	00 2e       	mov	r0, r16
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	95 95       	asr	r25
 430:	87 95       	ror	r24
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	80 ff       	sbrs	r24, 0
 438:	0d c0       	rjmp	.+26     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
				//Set serial bit
				SIPO_PORT |= (1 << pinout->serial);
 43a:	28 b1       	in	r18, 0x08	; 8
 43c:	e8 81       	ld	r30, Y
 43e:	f9 81       	ldd	r31, Y+1	; 0x01
 440:	c6 01       	movw	r24, r12
 442:	02 80       	ldd	r0, Z+2	; 0x02
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	82 2b       	or	r24, r18
 450:	88 b9       	out	0x08, r24	; 8
 452:	0e c0       	rjmp	.+28     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			} else {
				//Clear serial bit
				SIPO_PORT &= ~(1 << pinout->serial);
 454:	98 b1       	in	r25, 0x08	; 8
 456:	e8 81       	ld	r30, Y
 458:	f9 81       	ldd	r31, Y+1	; 0x01
 45a:	96 01       	movw	r18, r12
 45c:	02 80       	ldd	r0, Z+2	; 0x02
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 468:	82 2f       	mov	r24, r18
 46a:	80 95       	com	r24
 46c:	89 23       	and	r24, r25
 46e:	88 b9       	out	0x08, r24	; 8
			}
			
			//Wait 10us
			microSnap = timer->micros();
 470:	8d 81       	ldd	r24, Y+5	; 0x05
 472:	9e 81       	ldd	r25, Y+6	; 0x06
 474:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN5Timer6microsEv>
 478:	8b 87       	std	Y+11, r24	; 0x0b
			while ( timer->elapsed_micros_fast(microSnap) < 2);
 47a:	6b 85       	ldd	r22, Y+11	; 0x0b
 47c:	8d 81       	ldd	r24, Y+5	; 0x05
 47e:	9e 81       	ldd	r25, Y+6	; 0x06
 480:	0e 94 99 02 	call	0x532	; 0x532 <_ZN5Timer19elapsed_micros_fastEh>
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	c8 f3       	brcs	.-14     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
			
			//Shift. Send shift pulse
			this->pulse10us( pinout->shift );		
 488:	e8 81       	ld	r30, Y
 48a:	f9 81       	ldd	r31, Y+1	; 0x01
 48c:	60 81       	ld	r22, Z
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 99 01 	call	0x332	; 0x332 <_ZN18ShiftRegister_SIPO9pulse10usEh>
	//Wait 10us
	microSnap = timer->micros();
	while ( timer->elapsed_micros_fast(microSnap) < 1);
	
	for(int j=0; j <= size; j++){
		for (int i=0; i <= 8; i++){	
 494:	0f 5f       	subi	r16, 0xFF	; 255
 496:	1f 4f       	sbci	r17, 0xFF	; 255
 498:	09 30       	cpi	r16, 0x09	; 9
 49a:	11 05       	cpc	r17, r1
 49c:	09 f0       	breq	.+2      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 49e:	bf cf       	rjmp	.-130    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	SIPO_PORT &= ~( pinout_byte );
	//Wait 10us
	microSnap = timer->micros();
	while ( timer->elapsed_micros_fast(microSnap) < 1);
	
	for(int j=0; j <= size; j++){
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	e8 1a       	sub	r14, r24
 4a4:	f8 0a       	sbc	r15, r24
 4a6:	8a 85       	ldd	r24, Y+10	; 0x0a
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	8e 15       	cp	r24, r14
 4ac:	9f 05       	cpc	r25, r15
 4ae:	0c f0       	brlt	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b0:	b4 cf       	rjmp	.-152    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
			this->pulse10us( pinout->shift );		
		}
	}
	
	//Latch. Send Latch pulse
	this->pulse10us( pinout->latch );
 4b2:	e8 81       	ld	r30, Y
 4b4:	f9 81       	ldd	r31, Y+1	; 0x01
 4b6:	61 81       	ldd	r22, Z+1	; 0x01
 4b8:	ce 01       	movw	r24, r28
 4ba:	0e 94 99 01 	call	0x332	; 0x332 <_ZN18ShiftRegister_SIPO9pulse10usEh>
	
	//Finished shifting
	doneWork = true;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	8c 83       	std	Y+4, r24	; 0x04
	shiftLock = false;
 4c2:	1f 82       	std	Y+7, r1	; 0x07
	enabled = true;
}

void ShiftRegister_SIPO::disable( void )
{
	enabled = false;
 4c4:	1b 82       	std	Y+3, r1	; 0x03
	doneWork = true;
	shiftLock = false;
	//Disable. Interrupt will re-enable
	this->disable();
	
} //ShiftBits
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	08 95       	ret

000004d8 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
	while( timer->elapsed_micros_fast(microSnap) < 2);
}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 4d8:	fc 01       	movw	r30, r24
 4da:	76 83       	std	Z+6, r23	; 0x06
 4dc:	65 83       	std	Z+5, r22	; 0x05
 4de:	08 95       	ret

000004e0 <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	ec 01       	movw	r28, r24
{
	free(output_bytes);
 4e6:	8c 85       	ldd	r24, Y+12	; 0x0c
 4e8:	9d 85       	ldd	r25, Y+13	; 0x0d
 4ea:	0e 94 57 03 	call	0x6ae	; 0x6ae <free>
	free(output_bytes_buffer);
 4ee:	8e 85       	ldd	r24, Y+14	; 0x0e
 4f0:	9f 85       	ldd	r25, Y+15	; 0x0f
 4f2:	0e 94 57 03 	call	0x6ae	; 0x6ae <free>
} //~ShiftRegister_SIPO
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <_ZN5TimerC1Ev>:
{
	snapshot->microseconds_times10 = microseconds_times10;
	snapshot->milliseconds = milliseconds;

	return snapshot;
}
 4fc:	fc 01       	movw	r30, r24
 4fe:	10 82       	st	Z, r1
 500:	11 82       	std	Z+1, r1	; 0x01
 502:	12 82       	std	Z+2, r1	; 0x02
 504:	13 82       	std	Z+3, r1	; 0x03
 506:	14 82       	std	Z+4, r1	; 0x04
 508:	08 95       	ret

0000050a <_ZN5Timer14incrementTimerEv>:
 50a:	fc 01       	movw	r30, r24
 50c:	80 81       	ld	r24, Z
 50e:	8f 5f       	subi	r24, 0xFF	; 255
 510:	80 83       	st	Z, r24
 512:	80 81       	ld	r24, Z
 514:	84 36       	cpi	r24, 0x64	; 100
 516:	60 f0       	brcs	.+24     	; 0x530 <_ZN5Timer14incrementTimerEv+0x26>
 518:	10 82       	st	Z, r1
 51a:	81 81       	ldd	r24, Z+1	; 0x01
 51c:	92 81       	ldd	r25, Z+2	; 0x02
 51e:	a3 81       	ldd	r26, Z+3	; 0x03
 520:	b4 81       	ldd	r27, Z+4	; 0x04
 522:	01 96       	adiw	r24, 0x01	; 1
 524:	a1 1d       	adc	r26, r1
 526:	b1 1d       	adc	r27, r1
 528:	81 83       	std	Z+1, r24	; 0x01
 52a:	92 83       	std	Z+2, r25	; 0x02
 52c:	a3 83       	std	Z+3, r26	; 0x03
 52e:	b4 83       	std	Z+4, r27	; 0x04
 530:	08 95       	ret

00000532 <_ZN5Timer19elapsed_micros_fastEh>:
 532:	fc 01       	movw	r30, r24
 534:	80 81       	ld	r24, Z
 536:	86 1b       	sub	r24, r22
 538:	08 95       	ret

0000053a <_ZN5Timer14elapsed_millisEm>:

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
	return (milliseconds - comparison);	
 53e:	fc 01       	movw	r30, r24
 540:	81 81       	ldd	r24, Z+1	; 0x01
 542:	92 81       	ldd	r25, Z+2	; 0x02
 544:	a3 81       	ldd	r26, Z+3	; 0x03
 546:	b4 81       	ldd	r27, Z+4	; 0x04
 548:	8c 01       	movw	r16, r24
 54a:	9d 01       	movw	r18, r26
 54c:	04 1b       	sub	r16, r20
 54e:	15 0b       	sbc	r17, r21
 550:	26 0b       	sbc	r18, r22
 552:	37 0b       	sbc	r19, r23
 554:	c9 01       	movw	r24, r18
 556:	b8 01       	movw	r22, r16
}
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	08 95       	ret

0000055e <_ZN5Timer6microsEv>:

uint8_t Timer::micros( void )
{
	return microseconds_times10;
 55e:	fc 01       	movw	r30, r24
 560:	80 81       	ld	r24, Z
}
 562:	08 95       	ret

00000564 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return milliseconds;
 564:	fc 01       	movw	r30, r24
 566:	61 81       	ldd	r22, Z+1	; 0x01
 568:	72 81       	ldd	r23, Z+2	; 0x02
 56a:	83 81       	ldd	r24, Z+3	; 0x03
 56c:	94 81       	ldd	r25, Z+4	; 0x04
}
 56e:	08 95       	ret

00000570 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 570:	08 95       	ret

00000572 <__tablejump2__>:
 572:	ee 0f       	add	r30, r30
 574:	ff 1f       	adc	r31, r31
 576:	05 90       	lpm	r0, Z+
 578:	f4 91       	lpm	r31, Z
 57a:	e0 2d       	mov	r30, r0
 57c:	09 94       	ijmp

0000057e <malloc>:
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	82 30       	cpi	r24, 0x02	; 2
 588:	91 05       	cpc	r25, r1
 58a:	10 f4       	brcc	.+4      	; 0x590 <malloc+0x12>
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__flp>
 594:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__flp+0x1>
 598:	20 e0       	ldi	r18, 0x00	; 0
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	30 97       	sbiw	r30, 0x00	; 0
 5a2:	19 f1       	breq	.+70     	; 0x5ea <malloc+0x6c>
 5a4:	40 81       	ld	r20, Z
 5a6:	51 81       	ldd	r21, Z+1	; 0x01
 5a8:	02 81       	ldd	r16, Z+2	; 0x02
 5aa:	13 81       	ldd	r17, Z+3	; 0x03
 5ac:	48 17       	cp	r20, r24
 5ae:	59 07       	cpc	r21, r25
 5b0:	c8 f0       	brcs	.+50     	; 0x5e4 <malloc+0x66>
 5b2:	84 17       	cp	r24, r20
 5b4:	95 07       	cpc	r25, r21
 5b6:	69 f4       	brne	.+26     	; 0x5d2 <malloc+0x54>
 5b8:	10 97       	sbiw	r26, 0x00	; 0
 5ba:	31 f0       	breq	.+12     	; 0x5c8 <malloc+0x4a>
 5bc:	12 96       	adiw	r26, 0x02	; 2
 5be:	0c 93       	st	X, r16
 5c0:	12 97       	sbiw	r26, 0x02	; 2
 5c2:	13 96       	adiw	r26, 0x03	; 3
 5c4:	1c 93       	st	X, r17
 5c6:	27 c0       	rjmp	.+78     	; 0x616 <malloc+0x98>
 5c8:	00 93 20 01 	sts	0x0120, r16	; 0x800120 <__flp>
 5cc:	10 93 21 01 	sts	0x0121, r17	; 0x800121 <__flp+0x1>
 5d0:	22 c0       	rjmp	.+68     	; 0x616 <malloc+0x98>
 5d2:	21 15       	cp	r18, r1
 5d4:	31 05       	cpc	r19, r1
 5d6:	19 f0       	breq	.+6      	; 0x5de <malloc+0x60>
 5d8:	42 17       	cp	r20, r18
 5da:	53 07       	cpc	r21, r19
 5dc:	18 f4       	brcc	.+6      	; 0x5e4 <malloc+0x66>
 5de:	9a 01       	movw	r18, r20
 5e0:	bd 01       	movw	r22, r26
 5e2:	ef 01       	movw	r28, r30
 5e4:	df 01       	movw	r26, r30
 5e6:	f8 01       	movw	r30, r16
 5e8:	db cf       	rjmp	.-74     	; 0x5a0 <malloc+0x22>
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	f9 f0       	breq	.+62     	; 0x62e <malloc+0xb0>
 5f0:	28 1b       	sub	r18, r24
 5f2:	39 0b       	sbc	r19, r25
 5f4:	24 30       	cpi	r18, 0x04	; 4
 5f6:	31 05       	cpc	r19, r1
 5f8:	80 f4       	brcc	.+32     	; 0x61a <malloc+0x9c>
 5fa:	8a 81       	ldd	r24, Y+2	; 0x02
 5fc:	9b 81       	ldd	r25, Y+3	; 0x03
 5fe:	61 15       	cp	r22, r1
 600:	71 05       	cpc	r23, r1
 602:	21 f0       	breq	.+8      	; 0x60c <malloc+0x8e>
 604:	fb 01       	movw	r30, r22
 606:	93 83       	std	Z+3, r25	; 0x03
 608:	82 83       	std	Z+2, r24	; 0x02
 60a:	04 c0       	rjmp	.+8      	; 0x614 <malloc+0x96>
 60c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <__flp+0x1>
 610:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__flp>
 614:	fe 01       	movw	r30, r28
 616:	32 96       	adiw	r30, 0x02	; 2
 618:	44 c0       	rjmp	.+136    	; 0x6a2 <malloc+0x124>
 61a:	fe 01       	movw	r30, r28
 61c:	e2 0f       	add	r30, r18
 61e:	f3 1f       	adc	r31, r19
 620:	81 93       	st	Z+, r24
 622:	91 93       	st	Z+, r25
 624:	22 50       	subi	r18, 0x02	; 2
 626:	31 09       	sbc	r19, r1
 628:	39 83       	std	Y+1, r19	; 0x01
 62a:	28 83       	st	Y, r18
 62c:	3a c0       	rjmp	.+116    	; 0x6a2 <malloc+0x124>
 62e:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 632:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 636:	23 2b       	or	r18, r19
 638:	41 f4       	brne	.+16     	; 0x64a <malloc+0xcc>
 63a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 63e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 642:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <__brkval+0x1>
 646:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <__brkval>
 64a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 64e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 652:	21 15       	cp	r18, r1
 654:	31 05       	cpc	r19, r1
 656:	41 f4       	brne	.+16     	; 0x668 <malloc+0xea>
 658:	2d b7       	in	r18, 0x3d	; 61
 65a:	3e b7       	in	r19, 0x3e	; 62
 65c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 660:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 664:	24 1b       	sub	r18, r20
 666:	35 0b       	sbc	r19, r21
 668:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__brkval>
 66c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__brkval+0x1>
 670:	e2 17       	cp	r30, r18
 672:	f3 07       	cpc	r31, r19
 674:	a0 f4       	brcc	.+40     	; 0x69e <malloc+0x120>
 676:	2e 1b       	sub	r18, r30
 678:	3f 0b       	sbc	r19, r31
 67a:	28 17       	cp	r18, r24
 67c:	39 07       	cpc	r19, r25
 67e:	78 f0       	brcs	.+30     	; 0x69e <malloc+0x120>
 680:	ac 01       	movw	r20, r24
 682:	4e 5f       	subi	r20, 0xFE	; 254
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	24 17       	cp	r18, r20
 688:	35 07       	cpc	r19, r21
 68a:	48 f0       	brcs	.+18     	; 0x69e <malloc+0x120>
 68c:	4e 0f       	add	r20, r30
 68e:	5f 1f       	adc	r21, r31
 690:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <__brkval+0x1>
 694:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <__brkval>
 698:	81 93       	st	Z+, r24
 69a:	91 93       	st	Z+, r25
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <malloc+0x124>
 69e:	e0 e0       	ldi	r30, 0x00	; 0
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	cf 01       	movw	r24, r30
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	08 95       	ret

000006ae <free>:
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	09 f4       	brne	.+2      	; 0x6b8 <free+0xa>
 6b6:	81 c0       	rjmp	.+258    	; 0x7ba <free+0x10c>
 6b8:	fc 01       	movw	r30, r24
 6ba:	32 97       	sbiw	r30, 0x02	; 2
 6bc:	13 82       	std	Z+3, r1	; 0x03
 6be:	12 82       	std	Z+2, r1	; 0x02
 6c0:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <__flp>
 6c4:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <__flp+0x1>
 6c8:	10 97       	sbiw	r26, 0x00	; 0
 6ca:	81 f4       	brne	.+32     	; 0x6ec <free+0x3e>
 6cc:	20 81       	ld	r18, Z
 6ce:	31 81       	ldd	r19, Z+1	; 0x01
 6d0:	82 0f       	add	r24, r18
 6d2:	93 1f       	adc	r25, r19
 6d4:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 6d8:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 6dc:	28 17       	cp	r18, r24
 6de:	39 07       	cpc	r19, r25
 6e0:	51 f5       	brne	.+84     	; 0x736 <free+0x88>
 6e2:	f0 93 1f 01 	sts	0x011F, r31	; 0x80011f <__brkval+0x1>
 6e6:	e0 93 1e 01 	sts	0x011E, r30	; 0x80011e <__brkval>
 6ea:	67 c0       	rjmp	.+206    	; 0x7ba <free+0x10c>
 6ec:	ed 01       	movw	r28, r26
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	ce 17       	cp	r28, r30
 6f4:	df 07       	cpc	r29, r31
 6f6:	40 f4       	brcc	.+16     	; 0x708 <free+0x5a>
 6f8:	4a 81       	ldd	r20, Y+2	; 0x02
 6fa:	5b 81       	ldd	r21, Y+3	; 0x03
 6fc:	9e 01       	movw	r18, r28
 6fe:	41 15       	cp	r20, r1
 700:	51 05       	cpc	r21, r1
 702:	f1 f0       	breq	.+60     	; 0x740 <free+0x92>
 704:	ea 01       	movw	r28, r20
 706:	f5 cf       	rjmp	.-22     	; 0x6f2 <free+0x44>
 708:	d3 83       	std	Z+3, r29	; 0x03
 70a:	c2 83       	std	Z+2, r28	; 0x02
 70c:	40 81       	ld	r20, Z
 70e:	51 81       	ldd	r21, Z+1	; 0x01
 710:	84 0f       	add	r24, r20
 712:	95 1f       	adc	r25, r21
 714:	c8 17       	cp	r28, r24
 716:	d9 07       	cpc	r29, r25
 718:	59 f4       	brne	.+22     	; 0x730 <free+0x82>
 71a:	88 81       	ld	r24, Y
 71c:	99 81       	ldd	r25, Y+1	; 0x01
 71e:	84 0f       	add	r24, r20
 720:	95 1f       	adc	r25, r21
 722:	02 96       	adiw	r24, 0x02	; 2
 724:	91 83       	std	Z+1, r25	; 0x01
 726:	80 83       	st	Z, r24
 728:	8a 81       	ldd	r24, Y+2	; 0x02
 72a:	9b 81       	ldd	r25, Y+3	; 0x03
 72c:	93 83       	std	Z+3, r25	; 0x03
 72e:	82 83       	std	Z+2, r24	; 0x02
 730:	21 15       	cp	r18, r1
 732:	31 05       	cpc	r19, r1
 734:	29 f4       	brne	.+10     	; 0x740 <free+0x92>
 736:	f0 93 21 01 	sts	0x0121, r31	; 0x800121 <__flp+0x1>
 73a:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <__flp>
 73e:	3d c0       	rjmp	.+122    	; 0x7ba <free+0x10c>
 740:	e9 01       	movw	r28, r18
 742:	fb 83       	std	Y+3, r31	; 0x03
 744:	ea 83       	std	Y+2, r30	; 0x02
 746:	49 91       	ld	r20, Y+
 748:	59 91       	ld	r21, Y+
 74a:	c4 0f       	add	r28, r20
 74c:	d5 1f       	adc	r29, r21
 74e:	ec 17       	cp	r30, r28
 750:	fd 07       	cpc	r31, r29
 752:	61 f4       	brne	.+24     	; 0x76c <free+0xbe>
 754:	80 81       	ld	r24, Z
 756:	91 81       	ldd	r25, Z+1	; 0x01
 758:	84 0f       	add	r24, r20
 75a:	95 1f       	adc	r25, r21
 75c:	02 96       	adiw	r24, 0x02	; 2
 75e:	e9 01       	movw	r28, r18
 760:	99 83       	std	Y+1, r25	; 0x01
 762:	88 83       	st	Y, r24
 764:	82 81       	ldd	r24, Z+2	; 0x02
 766:	93 81       	ldd	r25, Z+3	; 0x03
 768:	9b 83       	std	Y+3, r25	; 0x03
 76a:	8a 83       	std	Y+2, r24	; 0x02
 76c:	e0 e0       	ldi	r30, 0x00	; 0
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	12 96       	adiw	r26, 0x02	; 2
 772:	8d 91       	ld	r24, X+
 774:	9c 91       	ld	r25, X
 776:	13 97       	sbiw	r26, 0x03	; 3
 778:	00 97       	sbiw	r24, 0x00	; 0
 77a:	19 f0       	breq	.+6      	; 0x782 <free+0xd4>
 77c:	fd 01       	movw	r30, r26
 77e:	dc 01       	movw	r26, r24
 780:	f7 cf       	rjmp	.-18     	; 0x770 <free+0xc2>
 782:	8d 91       	ld	r24, X+
 784:	9c 91       	ld	r25, X
 786:	11 97       	sbiw	r26, 0x01	; 1
 788:	9d 01       	movw	r18, r26
 78a:	2e 5f       	subi	r18, 0xFE	; 254
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	82 0f       	add	r24, r18
 790:	93 1f       	adc	r25, r19
 792:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <__brkval>
 796:	30 91 1f 01 	lds	r19, 0x011F	; 0x80011f <__brkval+0x1>
 79a:	28 17       	cp	r18, r24
 79c:	39 07       	cpc	r19, r25
 79e:	69 f4       	brne	.+26     	; 0x7ba <free+0x10c>
 7a0:	30 97       	sbiw	r30, 0x00	; 0
 7a2:	29 f4       	brne	.+10     	; 0x7ae <free+0x100>
 7a4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__flp+0x1>
 7a8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__flp>
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <free+0x104>
 7ae:	13 82       	std	Z+3, r1	; 0x03
 7b0:	12 82       	std	Z+2, r1	; 0x02
 7b2:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <__brkval+0x1>
 7b6:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <__brkval>
 7ba:	df 91       	pop	r29
 7bc:	cf 91       	pop	r28
 7be:	08 95       	ret

000007c0 <__do_global_dtors>:
 7c0:	10 e0       	ldi	r17, 0x00	; 0
 7c2:	c5 e3       	ldi	r28, 0x35	; 53
 7c4:	d0 e0       	ldi	r29, 0x00	; 0
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <__do_global_dtors+0x10>
 7c8:	fe 01       	movw	r30, r28
 7ca:	0e 94 b9 02 	call	0x572	; 0x572 <__tablejump2__>
 7ce:	21 96       	adiw	r28, 0x01	; 1
 7d0:	c6 33       	cpi	r28, 0x36	; 54
 7d2:	d1 07       	cpc	r29, r17
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__do_global_dtors+0x8>
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
