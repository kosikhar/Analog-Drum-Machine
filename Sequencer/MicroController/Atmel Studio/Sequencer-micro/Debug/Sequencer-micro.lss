
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000072e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000072e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800106  00800106  000007c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5d  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2d  00000000  00000000  000023a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000778  00000000  00000000  000030ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ac  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000587  00000000  00000000  0000445c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000049e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	01 01       	movw	r0, r2

0000006a <__ctors_end>:
  6a:	0a 01       	movw	r0, r20

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a6 e0       	ldi	r26, 0x06	; 6
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ac 31       	cpi	r26, 0x1C	; 28
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ee e2       	ldi	r30, 0x2E	; 46
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  b8:	0c 94 8a 03 	jmp	0x714	; 0x714 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:
#include "global.h"
#include "interrupts.h"

//Call every 10us, will be used for controlling shift registers
ISR( TIMER0_COMPA_vect, ISR_NOBLOCK )
{
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	//Increment timer every 1ms
	timer.incrementTimer();
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 3c 02 	call	0x478	; 0x478 <_ZN5Timer14incrementTimerEv>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_Z20setUpTimerInterruptsv>:
{
	//Setting up Timer0 (8-bit timer) to trigger ISR after 10us
	
	//TIMSK0 is the TC0 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR0A
	TIMSK0 |= (1 << OCIE0A);
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	
	//With 16MHz/64 = 250kHz clk, we would need 250 steps to get 1ms. 
	OCR0A = (uint8_t) 250;
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	87 bd       	out	0x27, r24	; 39

	//Disconnect OC0A, and use CTC mode
	TCCR0A = (uint8_t) (1 << WGM01);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	84 bd       	out	0x24, r24	; 36

	//Use clk div64 as input to the timer making timer run at 250kHz
	TCCR0B = (uint8_t) (1 << CS01) | (1 << CS00);
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	95 bd       	out	0x25, r25	; 37
	
	//Setting up Timer2 (8-bit Timer). We are just going to use
	//measuring small time scales in the us
	
	OCR2A = (uint8_t) 254;
 124:	9e ef       	ldi	r25, 0xFE	; 254
 126:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//Disconnect OC2A, and use CTC mode
	TCCR2A = (uint8_t) (1 << WGM21);
 12a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	//Use clk div1 as input to the timer making timer run at 16MHz
	TCCR2B = (uint8_t) (1 << CS20);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//Enable Interrupts Globally.
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <main>:
ShiftRegister_SIPO outputShiftRegister;
ShiftRegister_SIPO_pinout outputShiftRegister_pinout;


int main(void)
{	
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	1f 92       	push	r1
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	//Pins on port C for the output shift register
	//TODO put this into a function. Its ugly
	outputShiftRegister_pinout.serial = 0;
 142:	e6 e0       	ldi	r30, 0x06	; 6
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	
	outputShiftRegister.ShiftRegisterInit(1, &outputShiftRegister_pinout);
 150:	af 01       	movw	r20, r30
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	89 e0       	ldi	r24, 0x09	; 9
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 3e 01 	call	0x27c	; 0x27c <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>
	outputShiftRegister.getTimerReference(&timer);
 15c:	64 e1       	ldi	r22, 0x14	; 20
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	89 e0       	ldi	r24, 0x09	; 9
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 24 02 	call	0x448	; 0x448 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>

	//Enable Timer interrupts
	setUpTimerInterrupts();
 168:	0e 94 87 00 	call	0x10e	; 0x10e <_Z20setUpTimerInterruptsv>
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 16c:	50 9a       	sbi	0x0a, 0	; 10
	//Declare Byte to write to shift register
	uint8_t counter = 0;
	uint8_t bytesToWrite [1];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
 16e:	84 e1       	ldi	r24, 0x14	; 20
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Timer6millisEv>
 176:	4b 01       	movw	r8, r22
 178:	5c 01       	movw	r10, r24
	uint8_t LEDValueNext = 1;
	
	//Used for controlling how fast shift register updates
	uint32_t SIPO_ShiftRegisterTimer = timer.millis();
 17a:	84 e1       	ldi	r24, 0x14	; 20
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Timer6millisEv>
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	uint8_t counter = 0;
	uint8_t bytesToWrite [1];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
	uint8_t LEDValueNext = 1;
 186:	01 e0       	ldi	r16, 0x01	; 1
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
	
	//Declare Byte to write to shift register
	uint8_t counter = 0;
 188:	10 e0       	ldi	r17, 0x00	; 0
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
				LEDValueNext = 1;
 18a:	77 24       	eor	r7, r7
 18c:	73 94       	inc	r7
		//Toggle LED every 500ms
		if(timer.elapsed_millis( LEDTimer ) > 500){
			if( LEDValueNext == 1 ){
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
 18e:	61 2c       	mov	r6, r1
    /* Replace with your application code */
    while (1) 
    {
		
		//Toggle LED every 500ms
		if(timer.elapsed_millis( LEDTimer ) > 500){
 190:	b5 01       	movw	r22, r10
 192:	a4 01       	movw	r20, r8
 194:	84 e1       	ldi	r24, 0x14	; 20
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN5Timer14elapsed_millisEm>
 19c:	65 3f       	cpi	r22, 0xF5	; 245
 19e:	71 40       	sbci	r23, 0x01	; 1
 1a0:	81 05       	cpc	r24, r1
 1a2:	91 05       	cpc	r25, r1
 1a4:	68 f0       	brcs	.+26     	; 0x1c0 <main+0x88>
			if( LEDValueNext == 1 ){
 1a6:	01 30       	cpi	r16, 0x01	; 1
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <main+0x78>
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
 1aa:	58 9a       	sbi	0x0b, 0	; 11
				LEDValueNext = 0;
 1ac:	06 2d       	mov	r16, r6
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x7c>
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
 1b0:	58 98       	cbi	0x0b, 0	; 11
				LEDValueNext = 1;
 1b2:	07 2d       	mov	r16, r7
			}
			//Reset timer.
			LEDTimer = timer.millis();
 1b4:	84 e1       	ldi	r24, 0x14	; 20
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Timer6millisEv>
 1bc:	4b 01       	movw	r8, r22
 1be:	5c 01       	movw	r10, r24
		}
		
		if( (timer.elapsed_millis( SIPO_ShiftRegisterTimer) > 10) ){
 1c0:	b7 01       	movw	r22, r14
 1c2:	a6 01       	movw	r20, r12
 1c4:	84 e1       	ldi	r24, 0x14	; 20
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 4a 02 	call	0x494	; 0x494 <_ZN5Timer14elapsed_millisEm>
 1cc:	6b 30       	cpi	r22, 0x0B	; 11
 1ce:	71 05       	cpc	r23, r1
 1d0:	81 05       	cpc	r24, r1
 1d2:	91 05       	cpc	r25, r1
 1d4:	e8 f2       	brcs	.-70     	; 0x190 <main+0x58>
			
			//Outputs are in negative logic
			bytesToWrite[0]  = ~ counter;
 1d6:	81 2f       	mov	r24, r17
 1d8:	80 95       	com	r24
 1da:	89 83       	std	Y+1, r24	; 0x01
			
			//Load in output byte
			outputShiftRegister.loadBytes( bytesToWrite );
 1dc:	be 01       	movw	r22, r28
 1de:	6f 5f       	subi	r22, 0xFF	; 255
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	89 e0       	ldi	r24, 0x09	; 9
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_ZN18ShiftRegister_SIPO9loadBytesEPh>
			
			//Shift out the byte
			outputShiftRegister.shiftBits();
 1ea:	89 e0       	ldi	r24, 0x09	; 9
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
			
			//increment counter
			counter++;
 1f2:	1f 5f       	subi	r17, 0xFF	; 255
			
			//Reset timer
			SIPO_ShiftRegisterTimer = timer.millis();
 1f4:	84 e1       	ldi	r24, 0x14	; 20
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN5Timer6millisEv>
 1fc:	6b 01       	movw	r12, r22
 1fe:	7c 01       	movw	r14, r24
 200:	c7 cf       	rjmp	.-114    	; 0x190 <main+0x58>

00000202 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 202:	84 e1       	ldi	r24, 0x14	; 20
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	0e 94 36 02 	call	0x46c	; 0x46c <_ZN5TimerC1Ev>

//Initialize the output shift register.
ShiftRegister_SIPO outputShiftRegister;
 20a:	89 e0       	ldi	r24, 0x09	; 9
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 13 01 	call	0x226	; 0x226 <_ZN18ShiftRegister_SIPOC1Ev>
 212:	08 95       	ret

00000214 <_GLOBAL__sub_D_timer>:
 214:	89 e0       	ldi	r24, 0x09	; 9
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	0e 94 28 02 	call	0x450	; 0x450 <_ZN18ShiftRegister_SIPOD1Ev>
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 21c:	84 e1       	ldi	r24, 0x14	; 20
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 62 02 	call	0x4c4	; 0x4c4 <_ZN5TimerD1Ev>
 224:	08 95       	ret

00000226 <_ZN18ShiftRegister_SIPOC1Ev>:

void ShiftRegister_SIPO::toggleEnable( void )
{
	//This will just toggle 0 to 1, and 1 to 0.
	//ie 0000 xor 0001 = 0001 ; 0001 xor 0001 = 0000
	enabled ^= (uint8_t) 0x01; 
 226:	fc 01       	movw	r30, r24
 228:	16 82       	std	Z+6, r1	; 0x06
 22a:	13 82       	std	Z+3, r1	; 0x03
 22c:	08 95       	ret

0000022e <_ZN18ShiftRegister_SIPO9setupPinsEv>:
 22e:	fc 01       	movw	r30, r24
 230:	a0 81       	ld	r26, Z
 232:	b1 81       	ldd	r27, Z+1	; 0x01
 234:	21 e0       	ldi	r18, 0x01	; 1
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	a9 01       	movw	r20, r18
 23a:	0c 90       	ld	r0, X
 23c:	02 c0       	rjmp	.+4      	; 0x242 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 246:	c9 01       	movw	r24, r18
 248:	11 96       	adiw	r26, 0x01	; 1
 24a:	0c 90       	ld	r0, X
 24c:	11 97       	sbiw	r26, 0x01	; 1
 24e:	02 c0       	rjmp	.+4      	; 0x254 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 258:	84 2b       	or	r24, r20
 25a:	12 96       	adiw	r26, 0x02	; 2
 25c:	0c 90       	ld	r0, X
 25e:	02 c0       	rjmp	.+4      	; 0x264 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 260:	22 0f       	add	r18, r18
 262:	33 1f       	adc	r19, r19
 264:	0a 94       	dec	r0
 266:	e2 f7       	brpl	.-8      	; 0x260 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 268:	28 2b       	or	r18, r24
 26a:	22 83       	std	Z+2, r18	; 0x02
 26c:	88 b1       	in	r24, 0x08	; 8
 26e:	28 2b       	or	r18, r24
 270:	28 b9       	out	0x08, r18	; 8
 272:	97 b1       	in	r25, 0x07	; 7
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	89 2b       	or	r24, r25
 278:	87 b9       	out	0x07, r24	; 7
 27a:	08 95       	ret

0000027c <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>:
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	ec 01       	movw	r28, r24
 286:	6e 83       	std	Y+6, r22	; 0x06
 288:	59 83       	std	Y+1, r21	; 0x01
 28a:	48 83       	st	Y, r20
 28c:	1b 82       	std	Y+3, r1	; 0x03
 28e:	06 2f       	mov	r16, r22
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	c8 01       	movw	r24, r16
 294:	0e 94 69 02 	call	0x4d2	; 0x4d2 <malloc>
 298:	98 87       	std	Y+8, r25	; 0x08
 29a:	8f 83       	std	Y+7, r24	; 0x07
 29c:	c8 01       	movw	r24, r16
 29e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <malloc>
 2a2:	9a 87       	std	Y+10, r25	; 0x0a
 2a4:	89 87       	std	Y+9, r24	; 0x09
 2a6:	ce 01       	movw	r24, r28
 2a8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN18ShiftRegister_SIPO9setupPinsEv>
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	1f 91       	pop	r17
 2b2:	0f 91       	pop	r16
 2b4:	08 95       	ret

000002b6 <_ZN18ShiftRegister_SIPO9loadBytesEPh>:
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	ec 01       	movw	r28, r24
 2bc:	db 01       	movw	r26, r22
 2be:	20 e0       	ldi	r18, 0x00	; 0
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	8d 91       	ld	r24, X+
 2c4:	ef 81       	ldd	r30, Y+7	; 0x07
 2c6:	f8 85       	ldd	r31, Y+8	; 0x08
 2c8:	e2 0f       	add	r30, r18
 2ca:	f3 1f       	adc	r31, r19
 2cc:	80 83       	st	Z, r24
 2ce:	2f 5f       	subi	r18, 0xFF	; 255
 2d0:	3f 4f       	sbci	r19, 0xFF	; 255
 2d2:	4e 81       	ldd	r20, Y+6	; 0x06
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	42 17       	cp	r20, r18
 2d8:	53 07       	cpc	r21, r19
 2da:	9c f7       	brge	.-26     	; 0x2c2 <_ZN18ShiftRegister_SIPO9loadBytesEPh+0xc>
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>:
 2e2:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 2e6:	e2 eb       	ldi	r30, 0xB2	; 178
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	89 1b       	sub	r24, r25
 2ee:	80 31       	cpi	r24, 0x10	; 16
 2f0:	e0 f3       	brcs	.-8      	; 0x2ea <_ZN18ShiftRegister_SIPO9wait_10usEv+0x8>
 2f2:	08 95       	ret

000002f4 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	ec 01       	movw	r28, r24
 306:	98 b1       	in	r25, 0x08	; 8
 308:	8a 81       	ldd	r24, Y+2	; 0x02
 30a:	80 95       	com	r24
 30c:	89 23       	and	r24, r25
 30e:	88 b9       	out	0x08, r24	; 8
 310:	ce 01       	movw	r24, r28
 312:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>
 316:	8e 81       	ldd	r24, Y+6	; 0x06
 318:	88 23       	and	r24, r24
 31a:	09 f4       	brne	.+2      	; 0x31e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2a>
 31c:	6e c0       	rjmp	.+220    	; 0x3fa <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x106>
 31e:	e1 2c       	mov	r14, r1
 320:	f1 2c       	mov	r15, r1
 322:	01 e0       	ldi	r16, 0x01	; 1
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	8e 81       	ldd	r24, Y+6	; 0x06
 328:	88 23       	and	r24, r24
 32a:	09 f4       	brne	.+2      	; 0x32e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 32c:	5d c0       	rjmp	.+186    	; 0x3e8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xf4>
 32e:	c1 2c       	mov	r12, r1
 330:	d1 2c       	mov	r13, r1
 332:	ef 81       	ldd	r30, Y+7	; 0x07
 334:	f8 85       	ldd	r31, Y+8	; 0x08
 336:	ee 0d       	add	r30, r14
 338:	ff 1d       	adc	r31, r15
 33a:	80 81       	ld	r24, Z
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0c 2c       	mov	r0, r12
 340:	02 c0       	rjmp	.+4      	; 0x346 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x52>
 342:	95 95       	asr	r25
 344:	87 95       	ror	r24
 346:	0a 94       	dec	r0
 348:	e2 f7       	brpl	.-8      	; 0x342 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4e>
 34a:	80 ff       	sbrs	r24, 0
 34c:	0d c0       	rjmp	.+26     	; 0x368 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x74>
 34e:	28 b1       	in	r18, 0x08	; 8
 350:	e8 81       	ld	r30, Y
 352:	f9 81       	ldd	r31, Y+1	; 0x01
 354:	c8 01       	movw	r24, r16
 356:	02 80       	ldd	r0, Z+2	; 0x02
 358:	02 c0       	rjmp	.+4      	; 0x35e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x6a>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x66>
 362:	82 2b       	or	r24, r18
 364:	88 b9       	out	0x08, r24	; 8
 366:	0e c0       	rjmp	.+28     	; 0x384 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x90>
 368:	98 b1       	in	r25, 0x08	; 8
 36a:	e8 81       	ld	r30, Y
 36c:	f9 81       	ldd	r31, Y+1	; 0x01
 36e:	98 01       	movw	r18, r16
 370:	02 80       	ldd	r0, Z+2	; 0x02
 372:	02 c0       	rjmp	.+4      	; 0x378 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x84>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	0a 94       	dec	r0
 37a:	e2 f7       	brpl	.-8      	; 0x374 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x80>
 37c:	82 2f       	mov	r24, r18
 37e:	80 95       	com	r24
 380:	89 23       	and	r24, r25
 382:	88 b9       	out	0x08, r24	; 8
 384:	ce 01       	movw	r24, r28
 386:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>
 38a:	98 b1       	in	r25, 0x08	; 8
 38c:	e8 81       	ld	r30, Y
 38e:	f9 81       	ldd	r31, Y+1	; 0x01
 390:	98 01       	movw	r18, r16
 392:	00 80       	ld	r0, Z
 394:	02 c0       	rjmp	.+4      	; 0x39a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xa6>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xa2>
 39e:	82 2f       	mov	r24, r18
 3a0:	80 95       	com	r24
 3a2:	89 23       	and	r24, r25
 3a4:	88 b9       	out	0x08, r24	; 8
 3a6:	ce 01       	movw	r24, r28
 3a8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>
 3ac:	28 b1       	in	r18, 0x08	; 8
 3ae:	e8 81       	ld	r30, Y
 3b0:	f9 81       	ldd	r31, Y+1	; 0x01
 3b2:	c8 01       	movw	r24, r16
 3b4:	00 80       	ld	r0, Z
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xc8>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	0a 94       	dec	r0
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xc4>
 3c0:	82 2b       	or	r24, r18
 3c2:	88 b9       	out	0x08, r24	; 8
 3c4:	ce 01       	movw	r24, r28
 3c6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>
 3ca:	8f ef       	ldi	r24, 0xFF	; 255
 3cc:	c8 1a       	sub	r12, r24
 3ce:	d8 0a       	sbc	r13, r24
 3d0:	8e 81       	ldd	r24, Y+6	; 0x06
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	c8 16       	cp	r12, r24
 3e2:	d9 06       	cpc	r13, r25
 3e4:	0c f4       	brge	.+2      	; 0x3e8 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0xf4>
 3e6:	a5 cf       	rjmp	.-182    	; 0x332 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3e>
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	e8 1a       	sub	r14, r24
 3ec:	f8 0a       	sbc	r15, r24
 3ee:	8e 81       	ldd	r24, Y+6	; 0x06
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	e8 16       	cp	r14, r24
 3f4:	f9 06       	cpc	r15, r25
 3f6:	0c f4       	brge	.+2      	; 0x3fa <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x106>
 3f8:	96 cf       	rjmp	.-212    	; 0x326 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x32>
 3fa:	98 b1       	in	r25, 0x08	; 8
 3fc:	e8 81       	ld	r30, Y
 3fe:	f9 81       	ldd	r31, Y+1	; 0x01
 400:	01 e0       	ldi	r16, 0x01	; 1
 402:	10 e0       	ldi	r17, 0x00	; 0
 404:	98 01       	movw	r18, r16
 406:	01 80       	ldd	r0, Z+1	; 0x01
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	82 2f       	mov	r24, r18
 414:	80 95       	com	r24
 416:	89 23       	and	r24, r25
 418:	88 b9       	out	0x08, r24	; 8
 41a:	ce 01       	movw	r24, r28
 41c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_ZN18ShiftRegister_SIPO9wait_10usEv>
 420:	88 b1       	in	r24, 0x08	; 8
 422:	e8 81       	ld	r30, Y
 424:	f9 81       	ldd	r31, Y+1	; 0x01
 426:	01 80       	ldd	r0, Z+1	; 0x01
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	00 0f       	add	r16, r16
 42c:	11 1f       	adc	r17, r17
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	08 2b       	or	r16, r24
 434:	08 b9       	out	0x08, r16	; 8
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	0f 91       	pop	r16
 43e:	ff 90       	pop	r15
 440:	ef 90       	pop	r14
 442:	df 90       	pop	r13
 444:	cf 90       	pop	r12
 446:	08 95       	ret

00000448 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 448:	fc 01       	movw	r30, r24
 44a:	75 83       	std	Z+5, r23	; 0x05
 44c:	64 83       	std	Z+4, r22	; 0x04
 44e:	08 95       	ret

00000450 <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
{
	free(output_bytes);
 456:	8f 81       	ldd	r24, Y+7	; 0x07
 458:	98 85       	ldd	r25, Y+8	; 0x08
 45a:	0e 94 01 03 	call	0x602	; 0x602 <free>
	free(output_bytes_buffer);
 45e:	89 85       	ldd	r24, Y+9	; 0x09
 460:	9a 85       	ldd	r25, Y+10	; 0x0a
 462:	0e 94 01 03 	call	0x602	; 0x602 <free>
} //~ShiftRegister_SIPO
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret

0000046c <_ZN5TimerC1Ev>:
	milliseconds++;
}

void Timer::reset( void )
{
	milliseconds = 0;
 46c:	fc 01       	movw	r30, r24
 46e:	10 82       	st	Z, r1
 470:	11 82       	std	Z+1, r1	; 0x01
 472:	12 82       	std	Z+2, r1	; 0x02
 474:	13 82       	std	Z+3, r1	; 0x03
 476:	08 95       	ret

00000478 <_ZN5Timer14incrementTimerEv>:
 478:	fc 01       	movw	r30, r24
 47a:	40 81       	ld	r20, Z
 47c:	51 81       	ldd	r21, Z+1	; 0x01
 47e:	62 81       	ldd	r22, Z+2	; 0x02
 480:	73 81       	ldd	r23, Z+3	; 0x03
 482:	4f 5f       	subi	r20, 0xFF	; 255
 484:	5f 4f       	sbci	r21, 0xFF	; 255
 486:	6f 4f       	sbci	r22, 0xFF	; 255
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	40 83       	st	Z, r20
 48c:	51 83       	std	Z+1, r21	; 0x01
 48e:	62 83       	std	Z+2, r22	; 0x02
 490:	73 83       	std	Z+3, r23	; 0x03
 492:	08 95       	ret

00000494 <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
	return (milliseconds - comparison);	
 498:	fc 01       	movw	r30, r24
 49a:	80 81       	ld	r24, Z
 49c:	91 81       	ldd	r25, Z+1	; 0x01
 49e:	a2 81       	ldd	r26, Z+2	; 0x02
 4a0:	b3 81       	ldd	r27, Z+3	; 0x03
 4a2:	8c 01       	movw	r16, r24
 4a4:	9d 01       	movw	r18, r26
 4a6:	04 1b       	sub	r16, r20
 4a8:	15 0b       	sbc	r17, r21
 4aa:	26 0b       	sbc	r18, r22
 4ac:	37 0b       	sbc	r19, r23
 4ae:	c9 01       	movw	r24, r18
 4b0:	b8 01       	movw	r22, r16
}
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	08 95       	ret

000004b8 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return milliseconds;
 4b8:	fc 01       	movw	r30, r24
 4ba:	60 81       	ld	r22, Z
 4bc:	71 81       	ldd	r23, Z+1	; 0x01
 4be:	82 81       	ldd	r24, Z+2	; 0x02
 4c0:	93 81       	ldd	r25, Z+3	; 0x03
}
 4c2:	08 95       	ret

000004c4 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 4c4:	08 95       	ret

000004c6 <__tablejump2__>:
 4c6:	ee 0f       	add	r30, r30
 4c8:	ff 1f       	adc	r31, r31
 4ca:	05 90       	lpm	r0, Z+
 4cc:	f4 91       	lpm	r31, Z
 4ce:	e0 2d       	mov	r30, r0
 4d0:	09 94       	ijmp

000004d2 <malloc>:
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	91 05       	cpc	r25, r1
 4de:	10 f4       	brcc	.+4      	; 0x4e4 <malloc+0x12>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <__flp>
 4e8:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <__flp+0x1>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	a0 e0       	ldi	r26, 0x00	; 0
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	30 97       	sbiw	r30, 0x00	; 0
 4f6:	19 f1       	breq	.+70     	; 0x53e <malloc+0x6c>
 4f8:	40 81       	ld	r20, Z
 4fa:	51 81       	ldd	r21, Z+1	; 0x01
 4fc:	02 81       	ldd	r16, Z+2	; 0x02
 4fe:	13 81       	ldd	r17, Z+3	; 0x03
 500:	48 17       	cp	r20, r24
 502:	59 07       	cpc	r21, r25
 504:	c8 f0       	brcs	.+50     	; 0x538 <malloc+0x66>
 506:	84 17       	cp	r24, r20
 508:	95 07       	cpc	r25, r21
 50a:	69 f4       	brne	.+26     	; 0x526 <malloc+0x54>
 50c:	10 97       	sbiw	r26, 0x00	; 0
 50e:	31 f0       	breq	.+12     	; 0x51c <malloc+0x4a>
 510:	12 96       	adiw	r26, 0x02	; 2
 512:	0c 93       	st	X, r16
 514:	12 97       	sbiw	r26, 0x02	; 2
 516:	13 96       	adiw	r26, 0x03	; 3
 518:	1c 93       	st	X, r17
 51a:	27 c0       	rjmp	.+78     	; 0x56a <malloc+0x98>
 51c:	00 93 1a 01 	sts	0x011A, r16	; 0x80011a <__flp>
 520:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <__flp+0x1>
 524:	22 c0       	rjmp	.+68     	; 0x56a <malloc+0x98>
 526:	21 15       	cp	r18, r1
 528:	31 05       	cpc	r19, r1
 52a:	19 f0       	breq	.+6      	; 0x532 <malloc+0x60>
 52c:	42 17       	cp	r20, r18
 52e:	53 07       	cpc	r21, r19
 530:	18 f4       	brcc	.+6      	; 0x538 <malloc+0x66>
 532:	9a 01       	movw	r18, r20
 534:	bd 01       	movw	r22, r26
 536:	ef 01       	movw	r28, r30
 538:	df 01       	movw	r26, r30
 53a:	f8 01       	movw	r30, r16
 53c:	db cf       	rjmp	.-74     	; 0x4f4 <malloc+0x22>
 53e:	21 15       	cp	r18, r1
 540:	31 05       	cpc	r19, r1
 542:	f9 f0       	breq	.+62     	; 0x582 <malloc+0xb0>
 544:	28 1b       	sub	r18, r24
 546:	39 0b       	sbc	r19, r25
 548:	24 30       	cpi	r18, 0x04	; 4
 54a:	31 05       	cpc	r19, r1
 54c:	80 f4       	brcc	.+32     	; 0x56e <malloc+0x9c>
 54e:	8a 81       	ldd	r24, Y+2	; 0x02
 550:	9b 81       	ldd	r25, Y+3	; 0x03
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	21 f0       	breq	.+8      	; 0x560 <malloc+0x8e>
 558:	fb 01       	movw	r30, r22
 55a:	93 83       	std	Z+3, r25	; 0x03
 55c:	82 83       	std	Z+2, r24	; 0x02
 55e:	04 c0       	rjmp	.+8      	; 0x568 <malloc+0x96>
 560:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <__flp+0x1>
 564:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__flp>
 568:	fe 01       	movw	r30, r28
 56a:	32 96       	adiw	r30, 0x02	; 2
 56c:	44 c0       	rjmp	.+136    	; 0x5f6 <malloc+0x124>
 56e:	fe 01       	movw	r30, r28
 570:	e2 0f       	add	r30, r18
 572:	f3 1f       	adc	r31, r19
 574:	81 93       	st	Z+, r24
 576:	91 93       	st	Z+, r25
 578:	22 50       	subi	r18, 0x02	; 2
 57a:	31 09       	sbc	r19, r1
 57c:	39 83       	std	Y+1, r19	; 0x01
 57e:	28 83       	st	Y, r18
 580:	3a c0       	rjmp	.+116    	; 0x5f6 <malloc+0x124>
 582:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 586:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 58a:	23 2b       	or	r18, r19
 58c:	41 f4       	brne	.+16     	; 0x59e <malloc+0xcc>
 58e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 592:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 596:	30 93 19 01 	sts	0x0119, r19	; 0x800119 <__brkval+0x1>
 59a:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__brkval>
 59e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5a6:	21 15       	cp	r18, r1
 5a8:	31 05       	cpc	r19, r1
 5aa:	41 f4       	brne	.+16     	; 0x5bc <malloc+0xea>
 5ac:	2d b7       	in	r18, 0x3d	; 61
 5ae:	3e b7       	in	r19, 0x3e	; 62
 5b0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5b4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5b8:	24 1b       	sub	r18, r20
 5ba:	35 0b       	sbc	r19, r21
 5bc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <__brkval>
 5c0:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <__brkval+0x1>
 5c4:	e2 17       	cp	r30, r18
 5c6:	f3 07       	cpc	r31, r19
 5c8:	a0 f4       	brcc	.+40     	; 0x5f2 <malloc+0x120>
 5ca:	2e 1b       	sub	r18, r30
 5cc:	3f 0b       	sbc	r19, r31
 5ce:	28 17       	cp	r18, r24
 5d0:	39 07       	cpc	r19, r25
 5d2:	78 f0       	brcs	.+30     	; 0x5f2 <malloc+0x120>
 5d4:	ac 01       	movw	r20, r24
 5d6:	4e 5f       	subi	r20, 0xFE	; 254
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	24 17       	cp	r18, r20
 5dc:	35 07       	cpc	r19, r21
 5de:	48 f0       	brcs	.+18     	; 0x5f2 <malloc+0x120>
 5e0:	4e 0f       	add	r20, r30
 5e2:	5f 1f       	adc	r21, r31
 5e4:	50 93 19 01 	sts	0x0119, r21	; 0x800119 <__brkval+0x1>
 5e8:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <__brkval>
 5ec:	81 93       	st	Z+, r24
 5ee:	91 93       	st	Z+, r25
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <malloc+0x124>
 5f2:	e0 e0       	ldi	r30, 0x00	; 0
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	cf 01       	movw	r24, r30
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	1f 91       	pop	r17
 5fe:	0f 91       	pop	r16
 600:	08 95       	ret

00000602 <free>:
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	09 f4       	brne	.+2      	; 0x60c <free+0xa>
 60a:	81 c0       	rjmp	.+258    	; 0x70e <free+0x10c>
 60c:	fc 01       	movw	r30, r24
 60e:	32 97       	sbiw	r30, 0x02	; 2
 610:	13 82       	std	Z+3, r1	; 0x03
 612:	12 82       	std	Z+2, r1	; 0x02
 614:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <__flp>
 618:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <__flp+0x1>
 61c:	10 97       	sbiw	r26, 0x00	; 0
 61e:	81 f4       	brne	.+32     	; 0x640 <free+0x3e>
 620:	20 81       	ld	r18, Z
 622:	31 81       	ldd	r19, Z+1	; 0x01
 624:	82 0f       	add	r24, r18
 626:	93 1f       	adc	r25, r19
 628:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 62c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 630:	28 17       	cp	r18, r24
 632:	39 07       	cpc	r19, r25
 634:	51 f5       	brne	.+84     	; 0x68a <free+0x88>
 636:	f0 93 19 01 	sts	0x0119, r31	; 0x800119 <__brkval+0x1>
 63a:	e0 93 18 01 	sts	0x0118, r30	; 0x800118 <__brkval>
 63e:	67 c0       	rjmp	.+206    	; 0x70e <free+0x10c>
 640:	ed 01       	movw	r28, r26
 642:	20 e0       	ldi	r18, 0x00	; 0
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	ce 17       	cp	r28, r30
 648:	df 07       	cpc	r29, r31
 64a:	40 f4       	brcc	.+16     	; 0x65c <free+0x5a>
 64c:	4a 81       	ldd	r20, Y+2	; 0x02
 64e:	5b 81       	ldd	r21, Y+3	; 0x03
 650:	9e 01       	movw	r18, r28
 652:	41 15       	cp	r20, r1
 654:	51 05       	cpc	r21, r1
 656:	f1 f0       	breq	.+60     	; 0x694 <free+0x92>
 658:	ea 01       	movw	r28, r20
 65a:	f5 cf       	rjmp	.-22     	; 0x646 <free+0x44>
 65c:	d3 83       	std	Z+3, r29	; 0x03
 65e:	c2 83       	std	Z+2, r28	; 0x02
 660:	40 81       	ld	r20, Z
 662:	51 81       	ldd	r21, Z+1	; 0x01
 664:	84 0f       	add	r24, r20
 666:	95 1f       	adc	r25, r21
 668:	c8 17       	cp	r28, r24
 66a:	d9 07       	cpc	r29, r25
 66c:	59 f4       	brne	.+22     	; 0x684 <free+0x82>
 66e:	88 81       	ld	r24, Y
 670:	99 81       	ldd	r25, Y+1	; 0x01
 672:	84 0f       	add	r24, r20
 674:	95 1f       	adc	r25, r21
 676:	02 96       	adiw	r24, 0x02	; 2
 678:	91 83       	std	Z+1, r25	; 0x01
 67a:	80 83       	st	Z, r24
 67c:	8a 81       	ldd	r24, Y+2	; 0x02
 67e:	9b 81       	ldd	r25, Y+3	; 0x03
 680:	93 83       	std	Z+3, r25	; 0x03
 682:	82 83       	std	Z+2, r24	; 0x02
 684:	21 15       	cp	r18, r1
 686:	31 05       	cpc	r19, r1
 688:	29 f4       	brne	.+10     	; 0x694 <free+0x92>
 68a:	f0 93 1b 01 	sts	0x011B, r31	; 0x80011b <__flp+0x1>
 68e:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <__flp>
 692:	3d c0       	rjmp	.+122    	; 0x70e <free+0x10c>
 694:	e9 01       	movw	r28, r18
 696:	fb 83       	std	Y+3, r31	; 0x03
 698:	ea 83       	std	Y+2, r30	; 0x02
 69a:	49 91       	ld	r20, Y+
 69c:	59 91       	ld	r21, Y+
 69e:	c4 0f       	add	r28, r20
 6a0:	d5 1f       	adc	r29, r21
 6a2:	ec 17       	cp	r30, r28
 6a4:	fd 07       	cpc	r31, r29
 6a6:	61 f4       	brne	.+24     	; 0x6c0 <free+0xbe>
 6a8:	80 81       	ld	r24, Z
 6aa:	91 81       	ldd	r25, Z+1	; 0x01
 6ac:	84 0f       	add	r24, r20
 6ae:	95 1f       	adc	r25, r21
 6b0:	02 96       	adiw	r24, 0x02	; 2
 6b2:	e9 01       	movw	r28, r18
 6b4:	99 83       	std	Y+1, r25	; 0x01
 6b6:	88 83       	st	Y, r24
 6b8:	82 81       	ldd	r24, Z+2	; 0x02
 6ba:	93 81       	ldd	r25, Z+3	; 0x03
 6bc:	9b 83       	std	Y+3, r25	; 0x03
 6be:	8a 83       	std	Y+2, r24	; 0x02
 6c0:	e0 e0       	ldi	r30, 0x00	; 0
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	12 96       	adiw	r26, 0x02	; 2
 6c6:	8d 91       	ld	r24, X+
 6c8:	9c 91       	ld	r25, X
 6ca:	13 97       	sbiw	r26, 0x03	; 3
 6cc:	00 97       	sbiw	r24, 0x00	; 0
 6ce:	19 f0       	breq	.+6      	; 0x6d6 <free+0xd4>
 6d0:	fd 01       	movw	r30, r26
 6d2:	dc 01       	movw	r26, r24
 6d4:	f7 cf       	rjmp	.-18     	; 0x6c4 <free+0xc2>
 6d6:	8d 91       	ld	r24, X+
 6d8:	9c 91       	ld	r25, X
 6da:	11 97       	sbiw	r26, 0x01	; 1
 6dc:	9d 01       	movw	r18, r26
 6de:	2e 5f       	subi	r18, 0xFE	; 254
 6e0:	3f 4f       	sbci	r19, 0xFF	; 255
 6e2:	82 0f       	add	r24, r18
 6e4:	93 1f       	adc	r25, r19
 6e6:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__brkval>
 6ea:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__brkval+0x1>
 6ee:	28 17       	cp	r18, r24
 6f0:	39 07       	cpc	r19, r25
 6f2:	69 f4       	brne	.+26     	; 0x70e <free+0x10c>
 6f4:	30 97       	sbiw	r30, 0x00	; 0
 6f6:	29 f4       	brne	.+10     	; 0x702 <free+0x100>
 6f8:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp+0x1>
 6fc:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <__flp>
 700:	02 c0       	rjmp	.+4      	; 0x706 <free+0x104>
 702:	13 82       	std	Z+3, r1	; 0x03
 704:	12 82       	std	Z+2, r1	; 0x02
 706:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <__brkval+0x1>
 70a:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <__brkval>
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	08 95       	ret

00000714 <__do_global_dtors>:
 714:	10 e0       	ldi	r17, 0x00	; 0
 716:	c5 e3       	ldi	r28, 0x35	; 53
 718:	d0 e0       	ldi	r29, 0x00	; 0
 71a:	04 c0       	rjmp	.+8      	; 0x724 <__do_global_dtors+0x10>
 71c:	fe 01       	movw	r30, r28
 71e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__tablejump2__>
 722:	21 96       	adiw	r28, 0x01	; 1
 724:	c6 33       	cpi	r28, 0x36	; 54
 726:	d1 07       	cpc	r29, r17
 728:	c9 f7       	brne	.-14     	; 0x71c <__do_global_dtors+0x8>
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
