
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000944  000009d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000944  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000039  0080010c  0080010c  000009e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047e4  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019c6  00000000  00000000  00005524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001203  00000000  00000000  00006eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  000080f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001053  00000000  00000000  00008784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d37  00000000  00000000  000097d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000a50e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_11>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_12>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	5c 01       	movw	r10, r24

0000006a <__ctors_end>:
  6a:	75 01       	movw	r14, r10

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e4 e4       	ldi	r30, 0x44	; 68
  80:	f9 e0       	ldi	r31, 0x09	; 9
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a5 34       	cpi	r26, 0x45	; 69
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 8f 04 	call	0x91e	; 0x91e <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 22 01 	call	0x244	; 0x244 <main>
  b8:	0c 94 95 04 	jmp	0x92a	; 0x92a <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  e2:	85 e2       	ldi	r24, 0x25	; 37
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 37 04 	call	0x86e	; 0x86e <_ZN5Timer14incrementTimerEv>
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_12>:
 10c:	78 94       	sei
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_Z20setUpTimerInterruptsv>:
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	89 e1       	ldi	r24, 0x19	; 25
 12e:	87 bd       	out	0x27, r24	; 39
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	94 bd       	out	0x24, r25	; 36
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	85 bd       	out	0x25, r24	; 37
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
 142:	20 e4       	ldi	r18, 0x40	; 64
 144:	36 e0       	ldi	r19, 0x06	; 6
 146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 156:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 166:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
 174:	ef e6       	ldi	r30, 0x6F	; 111
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	89 7f       	andi	r24, 0xF9	; 249
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
 180:	78 94       	sei
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	disableTimerOneInterrupts();
 1a4:	0e 94 ba 00 	call	0x174	; 0x174 <_Z25disableTimerOneInterruptsv>
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_Z9latchTaskv>:
	setUpTimerInterrupts();
}

//Task for latching
void latchTask( void ){
	latch.run();
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 cd 02 	call	0x59a	; 0x59a <_ZN5Latch3runEv>
 1d2:	08 95       	ret

000001d4 <_Z23sevenSegmentDisplayTaskv>:
}
//Task for Seven Segment display
void sevenSegmentDisplayTask( void ){
	sevenSegmentDisplay.run();
 1d4:	8d e2       	ldi	r24, 0x2D	; 45
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN8SevenSeg3runEv>
 1dc:	08 95       	ret

000001de <_Z11triggerTaskv>:
}
//Task for triggering
void triggerTask( void ){
	trigger.run();
 1de:	87 e1       	ldi	r24, 0x17	; 23
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 11 04 	call	0x822	; 0x822 <_ZN7Trigger3runEv>
 1e6:	08 95       	ret

000001e8 <_Z11counterTaskv>:
}
//Task for counting
void counterTask( void ){
	counter.run();
 1e8:	8e e0       	ldi	r24, 0x0E	; 14
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN7Counter3runEv>
 1f0:	08 95       	ret

000001f2 <_Z10blinkyTaskv>:
}
//Task for blinky
void blinkyTask( void ){
	blinky.run();
 1f2:	8e e1       	ldi	r24, 0x1E	; 30
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <_ZN6Blinky3runEv>
 1fa:	08 95       	ret

000001fc <_Z10setupTasksv>:
//initialize latching object. Controls latching output on shift registers
Latch latch;

void setupTasks( void ){
	//Setup objects
	trigger.getTimerRef( &timer );
 1fc:	65 e2       	ldi	r22, 0x25	; 37
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	87 e1       	ldi	r24, 0x17	; 23
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN7Trigger11getTimerRefEP5Timer>

	//Setup SevenSegmentDisplay object
	sevenSegmentDisplay.sevenSegInit( NUM_DISPLAYS, &timer);
 208:	45 e2       	ldi	r20, 0x25	; 37
 20a:	51 e0       	ldi	r21, 0x01	; 1
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	8d e2       	ldi	r24, 0x2D	; 45
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 08 03 	call	0x610	; 0x610 <_ZN8SevenSeg12sevenSegInitEhP5Timer>
		
	//Setup Counter
	counter.init( &timer, &sevenSegmentDisplay );
 216:	4d e2       	ldi	r20, 0x2D	; 45
 218:	51 e0       	ldi	r21, 0x01	; 1
 21a:	65 e2       	ldi	r22, 0x25	; 37
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	8e e0       	ldi	r24, 0x0E	; 14
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 97 02 	call	0x52e	; 0x52e <_ZN7Counter4initEP5TimerP8SevenSeg>
		
	//Setup Latch object with objects that require latching
	latch.getSevenSegRef( &sevenSegmentDisplay );
 226:	6d e2       	ldi	r22, 0x2D	; 45
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	8c e0       	ldi	r24, 0x0C	; 12
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 c9 02 	call	0x592	; 0x592 <_ZN5Latch14getSevenSegRefEP8SevenSeg>
		
	//Setup blinky with timer reference.
	blinky.getTimerRef( &timer );
 232:	65 e2       	ldi	r22, 0x25	; 37
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	8e e1       	ldi	r24, 0x1E	; 30
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 67 02 	call	0x4ce	; 0x4ce <_ZN6Blinky11getTimerRefEP5Timer>
		
	//Enables global timer
	setUpTimerInterrupts();
 23e:	0e 94 91 00 	call	0x122	; 0x122 <_Z20setUpTimerInterruptsv>
 242:	08 95       	ret

00000244 <main>:
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

int main(void)
{	
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	63 97       	sbiw	r28, 0x13	; 19
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
	//Setup Tasks --> See setupTasks.h
	setupTasks();
 258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z10setupTasksv>
	
	//Initialize task manager
	TaskManager taskManager( &timer );
 25c:	65 e2       	ldi	r22, 0x25	; 37
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	0e 94 79 03 	call	0x6f2	; 0x6f2 <_ZN11TaskManagerC1EP5Timer>
	
	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	taskManager.addTask( latchTask , 32);
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	65 ee       	ldi	r22, 0xE5	; 229
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 80 03 	call	0x700	; 0x700 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sevenSegmentDisplayTask, 128);
 276:	40 e8       	ldi	r20, 0x80	; 128
 278:	6a ee       	ldi	r22, 0xEA	; 234
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	0e 94 80 03 	call	0x700	; 0x700 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerTask,  32);
 284:	40 e2       	ldi	r20, 0x20	; 32
 286:	6f ee       	ldi	r22, 0xEF	; 239
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 80 03 	call	0x700	; 0x700 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( counterTask, 128);
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	64 ef       	ldi	r22, 0xF4	; 244
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 80 03 	call	0x700	; 0x700 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( blinkyTask, 128);
 2a0:	40 e8       	ldi	r20, 0x80	; 128
 2a2:	69 ef       	ldi	r22, 0xF9	; 249
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 80 03 	call	0x700	; 0x700 <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN11TaskManager8runTasksEv>
 2b6:	fb cf       	rjmp	.-10     	; 0x2ae <main+0x6a>

000002b8 <_GLOBAL__sub_I_sevenSegmentDisplay>:
#include "Trigger.h"
#include "Counter.h"
#include "Latch.h"

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;
 2b8:	8d e2       	ldi	r24, 0x2D	; 45
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <_ZN8SevenSegC1Ev>

//Define a pointer to a timer object.
Timer timer;
 2c0:	85 e2       	ldi	r24, 0x25	; 37
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 2d 04 	call	0x85a	; 0x85a <_ZN5TimerC1Ev>

//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;
 2c8:	8e e1       	ldi	r24, 0x1E	; 30
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 5d 02 	call	0x4ba	; 0x4ba <_ZN6BlinkyC1Ev>

//Initialize the trigger object
Trigger trigger;
 2d0:	87 e1       	ldi	r24, 0x17	; 23
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 d6 03 	call	0x7ac	; 0x7ac <_ZN7TriggerC1Ev>

//Initialize the counter object
//Task counts to 100 then resets.
Counter counter;
 2d8:	8e e0       	ldi	r24, 0x0E	; 14
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 90 02 	call	0x520	; 0x520 <_ZN7CounterC1Ev>

//initialize latching object. Controls latching output on shift registers
Latch latch;
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 c8 02 	call	0x590	; 0x590 <_ZN5LatchC1Ev>
 2e8:	08 95       	ret

000002ea <_GLOBAL__sub_D_sevenSegmentDisplay>:
 2ea:	8c e0       	ldi	r24, 0x0C	; 12
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN5LatchD1Ev>
//Initialize the trigger object
Trigger trigger;

//Initialize the counter object
//Task counts to 100 then resets.
Counter counter;
 2f2:	8e e0       	ldi	r24, 0x0E	; 14
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 c7 02 	call	0x58e	; 0x58e <_ZN7CounterD1Ev>
//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;

//Initialize the trigger object
Trigger trigger;
 2fa:	87 e1       	ldi	r24, 0x17	; 23
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 2c 04 	call	0x858	; 0x858 <_ZN7TriggerD1Ev>
//Define a pointer to a timer object.
Timer timer;

//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;
 302:	8e e1       	ldi	r24, 0x1E	; 30
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 8f 02 	call	0x51e	; 0x51e <_ZN6BlinkyD1Ev>

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;

//Define a pointer to a timer object.
Timer timer;
 30a:	85 e2       	ldi	r24, 0x25	; 37
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 66 04 	call	0x8cc	; 0x8cc <_ZN5TimerD1Ev>
#include "Trigger.h"
#include "Counter.h"
#include "Latch.h"

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;
 312:	8d e2       	ldi	r24, 0x2D	; 45
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 76 03 	call	0x6ec	; 0x6ec <_ZN8SevenSegD1Ev>
 31a:	08 95       	ret

0000031c <_ZN18ShiftRegister_SIPO9setupPinsEv>:
	}
	
} //ShiftBits

void ShiftRegister_SIPO::setupPins( void ) 
{
 31c:	fc 01       	movw	r30, r24
	//setup the pinout byte
	pinout_byte = (1 << shiftPin) | (1 << latchPin) | (1 << serialPin);	
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a9 01       	movw	r20, r18
 324:	00 80       	ld	r0, Z
 326:	02 c0       	rjmp	.+4      	; 0x32c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	0a 94       	dec	r0
 32e:	e2 f7       	brpl	.-8      	; 0x328 <_ZN18ShiftRegister_SIPO9setupPinsEv+0xc>
 330:	c9 01       	movw	r24, r18
 332:	01 80       	ldd	r0, Z+1	; 0x01
 334:	02 c0       	rjmp	.+4      	; 0x33a <_ZN18ShiftRegister_SIPO9setupPinsEv+0x1e>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x1a>
 33e:	84 2b       	or	r24, r20
 340:	02 80       	ldd	r0, Z+2	; 0x02
 342:	02 c0       	rjmp	.+4      	; 0x348 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x2c>
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x28>
 34c:	28 2b       	or	r18, r24
 34e:	23 83       	std	Z+3, r18	; 0x03

	// Initialize these pins to be 1.
	SIPO_PORT |= ( pinout_byte );
 350:	88 b1       	in	r24, 0x08	; 8
 352:	28 2b       	or	r18, r24
 354:	28 b9       	out	0x08, r18	; 8

	// Set pins to be output.
	SIPO_DDR |= pinout_byte;
 356:	97 b1       	in	r25, 0x07	; 7
 358:	83 81       	ldd	r24, Z+3	; 0x03
 35a:	89 2b       	or	r24, r25
 35c:	87 b9       	out	0x07, r24	; 7
 35e:	08 95       	ret

00000360 <_ZN18ShiftRegister_SIPOC1Ev>:
#include "ShiftRegister_SIPO.h"

// default constructor
ShiftRegister_SIPO::ShiftRegister_SIPO()
{
	serialPin = 0;
 360:	fc 01       	movw	r30, r24
 362:	12 82       	std	Z+2, r1	; 0x02
	latchPin = 1;
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	21 83       	std	Z+1, r18	; 0x01
	shiftPin = 2;	
 368:	22 e0       	ldi	r18, 0x02	; 2
 36a:	20 83       	st	Z, r18

	//start off with output byte 0
	output_byte = 0;
 36c:	16 82       	std	Z+6, r1	; 0x06

	//Setup pins for shift register
	this->setupPins();
 36e:	0e 94 8e 01 	call	0x31c	; 0x31c <_ZN18ShiftRegister_SIPO9setupPinsEv>
 372:	08 95       	ret

00000374 <_ZN18ShiftRegister_SIPO11latchOutputEv>:
	SIPO_DDR |= pinout_byte;

} //SetupPins

void ShiftRegister_SIPO::latchOutput( void )
{
 374:	0f 93       	push	r16
 376:	1f 93       	push	r17
 378:	cf 93       	push	r28
 37a:	df 93       	push	r29
 37c:	8c 01       	movw	r16, r24
	//Latch output
	SIPO_PORT &= ~(1 << latchPin);
 37e:	98 b1       	in	r25, 0x08	; 8
 380:	c1 e0       	ldi	r28, 0x01	; 1
 382:	d0 e0       	ldi	r29, 0x00	; 0
 384:	9e 01       	movw	r18, r28
 386:	f8 01       	movw	r30, r16
 388:	01 80       	ldd	r0, Z+1	; 0x01
 38a:	02 c0       	rjmp	.+4      	; 0x390 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x1c>
 38c:	22 0f       	add	r18, r18
 38e:	33 1f       	adc	r19, r19
 390:	0a 94       	dec	r0
 392:	e2 f7       	brpl	.-8      	; 0x38c <_ZN18ShiftRegister_SIPO11latchOutputEv+0x18>
 394:	82 2f       	mov	r24, r18
 396:	80 95       	com	r24
 398:	89 23       	and	r24, r25
 39a:	88 b9       	out	0x08, r24	; 8
	timer->wait_1us();
 39c:	84 81       	ldd	r24, Z+4	; 0x04
 39e:	95 81       	ldd	r25, Z+5	; 0x05
 3a0:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Timer8wait_1usEv>
	SIPO_PORT |= (1 << latchPin);
 3a4:	88 b1       	in	r24, 0x08	; 8
 3a6:	f8 01       	movw	r30, r16
 3a8:	01 80       	ldd	r0, Z+1	; 0x01
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x3c>
 3ac:	cc 0f       	add	r28, r28
 3ae:	dd 1f       	adc	r29, r29
 3b0:	0a 94       	dec	r0
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <_ZN18ShiftRegister_SIPO11latchOutputEv+0x38>
 3b4:	c8 2b       	or	r28, r24
 3b6:	c8 b9       	out	0x08, r28	; 8
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	08 95       	ret

000003c2 <_ZN18ShiftRegister_SIPO11singleShiftEv>:

void ShiftRegister_SIPO::singleShift( void )
{
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	8c 01       	movw	r16, r24
	//Shift single bit in.
	SIPO_PORT &= ~(1 << shiftPin);
 3cc:	98 b1       	in	r25, 0x08	; 8
 3ce:	c1 e0       	ldi	r28, 0x01	; 1
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	9e 01       	movw	r18, r28
 3d4:	f8 01       	movw	r30, r16
 3d6:	00 80       	ld	r0, Z
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <_ZN18ShiftRegister_SIPO11singleShiftEv+0x1c>
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <_ZN18ShiftRegister_SIPO11singleShiftEv+0x18>
 3e2:	82 2f       	mov	r24, r18
 3e4:	80 95       	com	r24
 3e6:	89 23       	and	r24, r25
 3e8:	88 b9       	out	0x08, r24	; 8
	timer->wait_1us();
 3ea:	84 81       	ldd	r24, Z+4	; 0x04
 3ec:	95 81       	ldd	r25, Z+5	; 0x05
 3ee:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Timer8wait_1usEv>
	SIPO_PORT |= (1 << shiftPin);
 3f2:	88 b1       	in	r24, 0x08	; 8
 3f4:	f8 01       	movw	r30, r16
 3f6:	00 80       	ld	r0, Z
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <_ZN18ShiftRegister_SIPO11singleShiftEv+0x3c>
 3fa:	cc 0f       	add	r28, r28
 3fc:	dd 1f       	adc	r29, r29
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <_ZN18ShiftRegister_SIPO11singleShiftEv+0x38>
 402:	c8 2b       	or	r28, r24
 404:	c8 b9       	out	0x08, r28	; 8
	timer->wait_1us();
 406:	84 81       	ldd	r24, Z+4	; 0x04
 408:	95 81       	ldd	r25, Z+5	; 0x05
 40a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Timer8wait_1usEv>
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
//This will be called in a timer based interrupt so it would need to be locked
//to prevent recursion.
void ShiftRegister_SIPO::shiftBits( void )
{		
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	SIPO_PORT &= ~( pinout_byte );	
 426:	98 b1       	in	r25, 0x08	; 8
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	80 95       	com	r24
 42c:	89 23       	and	r24, r25
 42e:	88 b9       	out	0x08, r24	; 8

	//Wait 1us
	timer->wait_1us();
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	9d 81       	ldd	r25, Y+5	; 0x05
 434:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Timer8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 438:	00 e0       	ldi	r16, 0x00	; 0
 43a:	10 e0       	ldi	r17, 0x00	; 0
		if( output_byte & (1 << i) ){
			SIPO_PORT |= (1 << serialPin);
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << serialPin);
 43c:	ee 24       	eor	r14, r14
 43e:	e3 94       	inc	r14
 440:	f1 2c       	mov	r15, r1
	for ( int i=0; i < 8; i++){
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 442:	8e 81       	ldd	r24, Y+6	; 0x06
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	00 2e       	mov	r0, r16
 448:	02 c0       	rjmp	.+4      	; 0x44e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
 44a:	95 95       	asr	r25
 44c:	87 95       	ror	r24
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x32>
 452:	80 ff       	sbrs	r24, 0
 454:	0b c0       	rjmp	.+22     	; 0x46c <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
			SIPO_PORT |= (1 << serialPin);
 456:	28 b1       	in	r18, 0x08	; 8
 458:	c7 01       	movw	r24, r14
 45a:	0a 80       	ldd	r0, Y+2	; 0x02
 45c:	02 c0       	rjmp	.+4      	; 0x462 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4a>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x46>
 466:	82 2b       	or	r24, r18
 468:	88 b9       	out	0x08, r24	; 8
 46a:	0c c0       	rjmp	.+24     	; 0x484 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x6c>
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << serialPin);
 46c:	98 b1       	in	r25, 0x08	; 8
 46e:	97 01       	movw	r18, r14
 470:	0a 80       	ldd	r0, Y+2	; 0x02
 472:	02 c0       	rjmp	.+4      	; 0x478 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x60>
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x5c>
 47c:	82 2f       	mov	r24, r18
 47e:	80 95       	com	r24
 480:	89 23       	and	r24, r25
 482:	88 b9       	out	0x08, r24	; 8
		}
			
		timer->wait_1us();
 484:	8c 81       	ldd	r24, Y+4	; 0x04
 486:	9d 81       	ldd	r25, Y+5	; 0x05
 488:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN5Timer8wait_1usEv>
			
		this->singleShift();
 48c:	ce 01       	movw	r24, r28
 48e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <_ZN18ShiftRegister_SIPO11singleShiftEv>
	SIPO_PORT &= ~( pinout_byte );	

	//Wait 1us
	timer->wait_1us();
		
	for ( int i=0; i < 8; i++){
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	08 30       	cpi	r16, 0x08	; 8
 498:	11 05       	cpc	r17, r1
 49a:	99 f6       	brne	.-90     	; 0x442 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2a>
		timer->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	08 95       	ret

000004aa <_ZN18ShiftRegister_SIPO8loadByteEh>:
	timer->wait_1us();
}

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 4aa:	fc 01       	movw	r30, r24
 4ac:	66 83       	std	Z+6, r22	; 0x06
 4ae:	08 95       	ret

000004b0 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
// 	disableShifting();
// }

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 4b0:	fc 01       	movw	r30, r24
 4b2:	75 83       	std	Z+5, r23	; 0x05
 4b4:	64 83       	std	Z+4, r22	; 0x04
 4b6:	08 95       	ret

000004b8 <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 4b8:	08 95       	ret

000004ba <_ZN6BlinkyC1Ev>:

//Initialize the pins. 
Blinky::Blinky()
{
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 4ba:	50 9a       	sbi	0x0a, 0	; 10
		
	//Used for the "Status LED"
	DDRD |= (1 << PORTD1);
 4bc:	51 9a       	sbi	0x0a, 1	; 10
	
	//Used for Task - "Blinky". Indicates next value of LED
	LEDValueNext = 1;
 4be:	21 e0       	ldi	r18, 0x01	; 1
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
	
	//initialize time stamp to zero
	timeStamp = 0;
 4c4:	13 82       	std	Z+3, r1	; 0x03
 4c6:	14 82       	std	Z+4, r1	; 0x04
 4c8:	15 82       	std	Z+5, r1	; 0x05
 4ca:	16 82       	std	Z+6, r1	; 0x06
 4cc:	08 95       	ret

000004ce <_ZN6Blinky11getTimerRefEP5Timer>:
	
} //Blinky

void Blinky::getTimerRef(Timer * timerPtr)
{
	timer = timerPtr;
 4ce:	fc 01       	movw	r30, r24
 4d0:	72 83       	std	Z+2, r23	; 0x02
 4d2:	61 83       	std	Z+1, r22	; 0x01
 4d4:	08 95       	ret

000004d6 <_ZN6Blinky3runEv>:
}

//Runs the Blinky task. Blinks led on an off. 
void Blinky::run()
{
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis( timeStamp ) > LED_UPDATE ) {
 4dc:	4b 81       	ldd	r20, Y+3	; 0x03
 4de:	5c 81       	ldd	r21, Y+4	; 0x04
 4e0:	6d 81       	ldd	r22, Y+5	; 0x05
 4e2:	7e 81       	ldd	r23, Y+6	; 0x06
 4e4:	89 81       	ldd	r24, Y+1	; 0x01
 4e6:	9a 81       	ldd	r25, Y+2	; 0x02
 4e8:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Timer14elapsed_millisEm>
 4ec:	69 38       	cpi	r22, 0x89	; 137
 4ee:	73 41       	sbci	r23, 0x13	; 19
 4f0:	81 05       	cpc	r24, r1
 4f2:	91 05       	cpc	r25, r1
 4f4:	88 f0       	brcs	.+34     	; 0x518 <_ZN6Blinky3runEv+0x42>
		
		//Update time stamp
		timeStamp = timer->millis();
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	9a 81       	ldd	r25, Y+2	; 0x02
 4fa:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Timer6millisEv>
 4fe:	6b 83       	std	Y+3, r22	; 0x03
 500:	7c 83       	std	Y+4, r23	; 0x04
 502:	8d 83       	std	Y+5, r24	; 0x05
 504:	9e 83       	std	Y+6, r25	; 0x06
		
		if( LEDValueNext == 1 ){
 506:	88 81       	ld	r24, Y
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	19 f4       	brne	.+6      	; 0x512 <_ZN6Blinky3runEv+0x3c>
			//Set Test LED to OFF
			PORTD |= (1 << PORTD0);
 50c:	58 9a       	sbi	0x0b, 0	; 11
			LEDValueNext = 0;
 50e:	18 82       	st	Y, r1
 510:	03 c0       	rjmp	.+6      	; 0x518 <_ZN6Blinky3runEv+0x42>
			
		} else {
			//Set Test LED to ON
			PORTD &= ~(1 << PORTD0);
 512:	58 98       	cbi	0x0b, 0	; 11
			LEDValueNext = 1;
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	88 83       	st	Y, r24
		}
	}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <_ZN6BlinkyD1Ev>:

// default destructor
Blinky::~Blinky()
 51e:	08 95       	ret

00000520 <_ZN7CounterC1Ev>:

// default constructor
Counter::Counter()
{
	//initialize counter to zero
	counterValue = 0;
 520:	fc 01       	movw	r30, r24
 522:	10 82       	st	Z, r1
	
	//Initialize timeStamp to zero
	timeStamp = 0;
 524:	15 82       	std	Z+5, r1	; 0x05
 526:	16 82       	std	Z+6, r1	; 0x06
 528:	17 82       	std	Z+7, r1	; 0x07
 52a:	10 86       	std	Z+8, r1	; 0x08
 52c:	08 95       	ret

0000052e <_ZN7Counter4initEP5TimerP8SevenSeg>:
	
} //counter

void Counter::init( Timer * timerPtr, SevenSeg * sevenSegPtr)
{
	timer = timerPtr;
 52e:	fc 01       	movw	r30, r24
 530:	72 83       	std	Z+2, r23	; 0x02
 532:	61 83       	std	Z+1, r22	; 0x01
	
	sevenSeg = sevenSegPtr;
 534:	54 83       	std	Z+4, r21	; 0x04
 536:	43 83       	std	Z+3, r20	; 0x03
 538:	08 95       	ret

0000053a <_ZN7Counter3runEv>:
}

void Counter::run( void )
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	ec 01       	movw	r28, r24
		
	if( timer->elapsed_millis(timeStamp) > COUNTER_UPDATE ){
 540:	4d 81       	ldd	r20, Y+5	; 0x05
 542:	5e 81       	ldd	r21, Y+6	; 0x06
 544:	6f 81       	ldd	r22, Y+7	; 0x07
 546:	78 85       	ldd	r23, Y+8	; 0x08
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	9a 81       	ldd	r25, Y+2	; 0x02
 54c:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Timer14elapsed_millisEm>
 550:	65 36       	cpi	r22, 0x65	; 101
 552:	71 05       	cpc	r23, r1
 554:	81 05       	cpc	r24, r1
 556:	91 05       	cpc	r25, r1
 558:	b8 f0       	brcs	.+46     	; 0x588 <_ZN7Counter3runEv+0x4e>
				
		//Update timestamp
		timeStamp = timer->millis();
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	9a 81       	ldd	r25, Y+2	; 0x02
 55e:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Timer6millisEv>
 562:	6d 83       	std	Y+5, r22	; 0x05
 564:	7e 83       	std	Y+6, r23	; 0x06
 566:	8f 83       	std	Y+7, r24	; 0x07
 568:	98 87       	std	Y+8, r25	; 0x08
				
		//increment counter
		counterValue++;
 56a:	88 81       	ld	r24, Y
 56c:	8f 5f       	subi	r24, 0xFF	; 255
				
		//Reset timer at 100.
		if ( counterValue >= 100 ){
 56e:	84 36       	cpi	r24, 0x64	; 100
 570:	10 f4       	brcc	.+4      	; 0x576 <_ZN7Counter3runEv+0x3c>
				
		//Update timestamp
		timeStamp = timer->millis();
				
		//increment counter
		counterValue++;
 572:	88 83       	st	Y, r24
 574:	01 c0       	rjmp	.+2      	; 0x578 <_ZN7Counter3runEv+0x3e>
				
		//Reset timer at 100.
		if ( counterValue >= 100 ){
			counterValue = 0;
 576:	18 82       	st	Y, r1
		}
		
		//Update the content for the sevenSeg to print
		sevenSeg->contentToPrint = counterValue;
 578:	eb 81       	ldd	r30, Y+3	; 0x03
 57a:	fc 81       	ldd	r31, Y+4	; 0x04
 57c:	88 81       	ld	r24, Y
 57e:	81 87       	std	Z+9, r24	; 0x09
		
		//flag that the counter has been updated, and that seven seg has content to print
		sevenSeg->newContentToPrint = true;	
 580:	eb 81       	ldd	r30, Y+3	; 0x03
 582:	fc 81       	ldd	r31, Y+4	; 0x04
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 87       	std	Z+8, r24	; 0x08
	}
		
}
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <_ZN7CounterD1Ev>:

// default destructor
Counter::~Counter()
 58e:	08 95       	ret

00000590 <_ZN5LatchC1Ev>:


#include "Latch.h"

// default constructor
Latch::Latch()
 590:	08 95       	ret

00000592 <_ZN5Latch14getSevenSegRefEP8SevenSeg>:
{
} //Latch

void Latch::getSevenSegRef( SevenSeg * sevenSegPtr )
{
	sevenSegmentDisplay = sevenSegPtr;
 592:	fc 01       	movw	r30, r24
 594:	71 83       	std	Z+1, r23	; 0x01
 596:	60 83       	st	Z, r22
 598:	08 95       	ret

0000059a <_ZN5Latch3runEv>:
}

void Latch::run( void )
{
	if( sevenSegmentDisplay->shiftComplete == true ){
 59a:	dc 01       	movw	r26, r24
 59c:	ed 91       	ld	r30, X+
 59e:	fc 91       	ld	r31, X
 5a0:	11 97       	sbiw	r26, 0x01	; 1
 5a2:	27 81       	ldd	r18, Z+7	; 0x07
 5a4:	21 30       	cpi	r18, 0x01	; 1
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <_ZN5Latch3runEv+0x18>
		
		//Reset the shift complete flag
		sevenSegmentDisplay->shiftComplete = false;
 5a8:	17 82       	std	Z+7, r1	; 0x07
		
		//Latch shift registers. Output should show on seven segment display
		sevenSegmentDisplay->latchOutput();
 5aa:	8d 91       	ld	r24, X+
 5ac:	9c 91       	ld	r25, X
 5ae:	0e 94 ba 01 	call	0x374	; 0x374 <_ZN18ShiftRegister_SIPO11latchOutputEv>
 5b2:	08 95       	ret

000005b4 <_ZN5LatchD1Ev>:
	}
}

// default destructor
Latch::~Latch()
 5b4:	08 95       	ret

000005b6 <_ZN8SevenSegC1Ev>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latchOutput();
}
 5b6:	0f 93       	push	r16
 5b8:	1f 93       	push	r17
 5ba:	cf 93       	push	r28
 5bc:	df 93       	push	r29
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	27 97       	sbiw	r28, 0x07	; 7
 5c4:	0f b6       	in	r0, 0x3f	; 63
 5c6:	f8 94       	cli
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	cd bf       	out	0x3d, r28	; 61
 5ce:	8c 01       	movw	r16, r24
 5d0:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN18ShiftRegister_SIPOC1Ev>
 5d4:	8b e0       	ldi	r24, 0x0B	; 11
 5d6:	e0 e0       	ldi	r30, 0x00	; 0
 5d8:	f1 e0       	ldi	r31, 0x01	; 1
 5da:	d8 01       	movw	r26, r16
 5dc:	1b 96       	adiw	r26, 0x0b	; 11
 5de:	01 90       	ld	r0, Z+
 5e0:	0d 92       	st	X+, r0
 5e2:	8a 95       	dec	r24
 5e4:	e1 f7       	brne	.-8      	; 0x5de <_ZN8SevenSegC1Ev+0x28>
 5e6:	ce 01       	movw	r24, r28
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN18ShiftRegister_SIPOC1Ev>
 5ee:	ce 01       	movw	r24, r28
 5f0:	01 96       	adiw	r24, 0x01	; 1
 5f2:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN18ShiftRegister_SIPOD1Ev>
 5f6:	f8 01       	movw	r30, r16
 5f8:	11 86       	std	Z+9, r1	; 0x09
 5fa:	27 96       	adiw	r28, 0x07	; 7
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <_ZN8SevenSeg12sevenSegInitEhP5Timer>:
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	ec 01       	movw	r28, r24
 618:	16 2f       	mov	r17, r22
 61a:	ba 01       	movw	r22, r20
 61c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>
 620:	1a 87       	std	Y+10, r17	; 0x0a
 622:	1f 82       	std	Y+7, r1	; 0x07
 624:	18 86       	std	Y+8, r1	; 0x08
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	1f 91       	pop	r17
 62c:	08 95       	ret

0000062e <_ZN8SevenSeg12shiftInBytesEPh>:
 62e:	df 92       	push	r13
 630:	ef 92       	push	r14
 632:	ff 92       	push	r15
 634:	0f 93       	push	r16
 636:	1f 93       	push	r17
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	fc 01       	movw	r30, r24
 63e:	22 85       	ldd	r18, Z+10	; 0x0a
 640:	22 23       	and	r18, r18
 642:	19 f1       	breq	.+70     	; 0x68a <_ZN8SevenSeg12shiftInBytesEPh+0x5c>
 644:	8c 01       	movw	r16, r24
 646:	c6 2f       	mov	r28, r22
 648:	d7 2f       	mov	r29, r23
 64a:	e1 2c       	mov	r14, r1
 64c:	f1 2c       	mov	r15, r1
 64e:	0f 2e       	mov	r0, r31
 650:	fa e0       	ldi	r31, 0x0A	; 10
 652:	df 2e       	mov	r13, r31
 654:	f0 2d       	mov	r31, r0
 656:	fe 01       	movw	r30, r28
 658:	88 81       	ld	r24, Y
 65a:	8a 30       	cpi	r24, 0x0A	; 10
 65c:	08 f0       	brcs	.+2      	; 0x660 <_ZN8SevenSeg12shiftInBytesEPh+0x32>
 65e:	d8 82       	st	Y, r13
 660:	21 96       	adiw	r28, 0x01	; 1
 662:	80 81       	ld	r24, Z
 664:	f8 01       	movw	r30, r16
 666:	e8 0f       	add	r30, r24
 668:	f1 1d       	adc	r31, r1
 66a:	63 85       	ldd	r22, Z+11	; 0x0b
 66c:	c8 01       	movw	r24, r16
 66e:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN18ShiftRegister_SIPO8loadByteEh>
 672:	c8 01       	movw	r24, r16
 674:	0e 94 0c 02 	call	0x418	; 0x418 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 678:	ff ef       	ldi	r31, 0xFF	; 255
 67a:	ef 1a       	sub	r14, r31
 67c:	ff 0a       	sbc	r15, r31
 67e:	f8 01       	movw	r30, r16
 680:	82 85       	ldd	r24, Z+10	; 0x0a
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	e8 16       	cp	r14, r24
 686:	f9 06       	cpc	r15, r25
 688:	34 f3       	brlt	.-52     	; 0x656 <_ZN8SevenSeg12shiftInBytesEPh+0x28>
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	ff 90       	pop	r15
 694:	ef 90       	pop	r14
 696:	df 90       	pop	r13
 698:	08 95       	ret

0000069a <_ZN8SevenSeg3runEv>:
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	fc 01       	movw	r30, r24
 6a0:	20 85       	ldd	r18, Z+8	; 0x08
 6a2:	21 30       	cpi	r18, 0x01	; 1
 6a4:	01 f5       	brne	.+64     	; 0x6e6 <_ZN8SevenSeg3runEv+0x4c>
 6a6:	ec 01       	movw	r28, r24
 6a8:	10 86       	std	Z+8, r1	; 0x08
 6aa:	81 85       	ldd	r24, Z+9	; 0x09
 6ac:	9d ec       	ldi	r25, 0xCD	; 205
 6ae:	89 9f       	mul	r24, r25
 6b0:	91 2d       	mov	r25, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	96 95       	lsr	r25
 6b6:	96 95       	lsr	r25
 6b8:	96 95       	lsr	r25
 6ba:	99 0f       	add	r25, r25
 6bc:	29 2f       	mov	r18, r25
 6be:	22 0f       	add	r18, r18
 6c0:	22 0f       	add	r18, r18
 6c2:	92 0f       	add	r25, r18
 6c4:	f8 2f       	mov	r31, r24
 6c6:	f9 1b       	sub	r31, r25
 6c8:	fe 8b       	std	Y+22, r31	; 0x16
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	6a e0       	ldi	r22, 0x0A	; 10
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divmodhi4>
 6d4:	6f 8b       	std	Y+23, r22	; 0x17
 6d6:	be 01       	movw	r22, r28
 6d8:	6a 5e       	subi	r22, 0xEA	; 234
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	ce 01       	movw	r24, r28
 6de:	0e 94 17 03 	call	0x62e	; 0x62e <_ZN8SevenSeg12shiftInBytesEPh>
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	8f 83       	std	Y+7, r24	; 0x07
 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	08 95       	ret

000006ec <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 6ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN18ShiftRegister_SIPOD1Ev>
 6f0:	08 95       	ret

000006f2 <_ZN11TaskManagerC1EP5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer * timerPtr )
 6f2:	fc 01       	movw	r30, r24
{
	
	timer = timerPtr;
 6f4:	70 8b       	std	Z+16, r23	; 0x10
 6f6:	67 87       	std	Z+15, r22	; 0x0f
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
 6f8:	11 8a       	std	Z+17, r1	; 0x11
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
 6fa:	87 e0       	ldi	r24, 0x07	; 7
 6fc:	82 8b       	std	Z+18, r24	; 0x12
 6fe:	08 95       	ret

00000700 <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
 700:	fc 01       	movw	r30, r24
 702:	21 89       	ldd	r18, Z+17	; 0x11
 704:	e2 2f       	mov	r30, r18
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	df 01       	movw	r26, r30
 70a:	aa 0f       	add	r26, r26
 70c:	bb 1f       	adc	r27, r27
 70e:	a8 0f       	add	r26, r24
 710:	b9 1f       	adc	r27, r25
 712:	16 96       	adiw	r26, 0x06	; 6
 714:	7c 93       	st	X, r23
 716:	6e 93       	st	-X, r22
 718:	15 97       	sbiw	r26, 0x05	; 5
	
	taskPriority[ loadedTasks ] = priority;
 71a:	e8 0f       	add	r30, r24
 71c:	f9 1f       	adc	r31, r25
 71e:	40 83       	st	Z, r20
	
	loadedTasks++;
 720:	2f 5f       	subi	r18, 0xFF	; 255
 722:	fc 01       	movw	r30, r24
 724:	21 8b       	std	Z+17, r18	; 0x11
 726:	08 95       	ret

00000728 <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
 728:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
 72a:	82 89       	ldd	r24, Z+18	; 0x12
 72c:	2d e6       	ldi	r18, 0x6D	; 109
 72e:	82 9f       	mul	r24, r18
 730:	c0 01       	movw	r24, r0
 732:	11 24       	eor	r1, r1
 734:	87 5a       	subi	r24, 0xA7	; 167
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	6b ef       	ldi	r22, 0xFB	; 251
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	0e 94 67 04 	call	0x8ce	; 0x8ce <__divmodhi4>
 740:	82 8b       	std	Z+18, r24	; 0x12
 742:	08 95       	ret

00000744 <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
 744:	cf 92       	push	r12
 746:	df 92       	push	r13
 748:	ef 92       	push	r14
 74a:	ff 92       	push	r15
 74c:	0f 93       	push	r16
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
 754:	dc 01       	movw	r26, r24
 756:	51 96       	adiw	r26, 0x11	; 17
 758:	2c 91       	ld	r18, X
 75a:	22 23       	and	r18, r18
 75c:	f1 f0       	breq	.+60     	; 0x79a <_ZN11TaskManager8runTasksEv+0x56>
 75e:	ec 01       	movw	r28, r24
 760:	6c 01       	movw	r12, r24
 762:	7c 01       	movw	r14, r24
 764:	00 e0       	ldi	r16, 0x00	; 0
 766:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
 768:	ce 01       	movw	r24, r28
 76a:	0e 94 94 03 	call	0x728	; 0x728 <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
 76e:	f6 01       	movw	r30, r12
 770:	91 91       	ld	r25, Z+
 772:	6f 01       	movw	r12, r30
 774:	8a 89       	ldd	r24, Y+18	; 0x12
 776:	89 17       	cp	r24, r25
 778:	30 f0       	brcs	.+12     	; 0x786 <_ZN11TaskManager8runTasksEv+0x42>
			
			//Run the task
			(*tasks[i]) (); 
 77a:	d7 01       	movw	r26, r14
 77c:	15 96       	adiw	r26, 0x05	; 5
 77e:	ed 91       	ld	r30, X+
 780:	fc 91       	ld	r31, X
 782:	16 97       	sbiw	r26, 0x06	; 6
 784:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
 786:	0f 5f       	subi	r16, 0xFF	; 255
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	b2 e0       	ldi	r27, 0x02	; 2
 78c:	eb 0e       	add	r14, r27
 78e:	f1 1c       	adc	r15, r1
 790:	89 89       	ldd	r24, Y+17	; 0x11
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	08 17       	cp	r16, r24
 796:	19 07       	cpc	r17, r25
 798:	3c f3       	brlt	.-50     	; 0x768 <_ZN11TaskManager8runTasksEv+0x24>
			(*tasks[i]) (); 
		}
		
	}
	
}
 79a:	df 91       	pop	r29
 79c:	cf 91       	pop	r28
 79e:	1f 91       	pop	r17
 7a0:	0f 91       	pop	r16
 7a2:	ff 90       	pop	r15
 7a4:	ef 90       	pop	r14
 7a6:	df 90       	pop	r13
 7a8:	cf 90       	pop	r12
 7aa:	08 95       	ret

000007ac <_ZN7TriggerC1Ev>:

// default constructor
Trigger::Trigger()
{
	//Initialize the output pin.
	DDRD |= (1 << PORTD2);
 7ac:	52 9a       	sbi	0x0a, 2	; 10
	
	//Used for marking a point in time.
	timeStamp = 0;
 7ae:	fc 01       	movw	r30, r24
 7b0:	13 82       	std	Z+3, r1	; 0x03
 7b2:	14 82       	std	Z+4, r1	; 0x04
 7b4:	15 82       	std	Z+5, r1	; 0x05
 7b6:	16 82       	std	Z+6, r1	; 0x06
 7b8:	08 95       	ret

000007ba <_ZN7Trigger11getTimerRefEP5Timer>:

} //Trigger

void Trigger::getTimerRef( Timer * timerPtr )
{
 7ba:	cf 93       	push	r28
 7bc:	df 93       	push	r29
 7be:	ec 01       	movw	r28, r24
 7c0:	cb 01       	movw	r24, r22
	timer = timerPtr;
 7c2:	7a 83       	std	Y+2, r23	; 0x02
 7c4:	69 83       	std	Y+1, r22	; 0x01
	
	//Initialize the time stamp
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
 7c6:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Timer6millisEv>
 7ca:	6b 83       	std	Y+3, r22	; 0x03
 7cc:	7c 83       	std	Y+4, r23	; 0x04
 7ce:	8d 83       	std	Y+5, r24	; 0x05
 7d0:	9e 83       	std	Y+6, r25	; 0x06
}
 7d2:	df 91       	pop	r29
 7d4:	cf 91       	pop	r28
 7d6:	08 95       	ret

000007d8 <_ZN7Trigger9conditionEv>:
	}
}

//Sets the condition to run the run() method.
//Ends up creating a pulse with a pulse width of 1ms. period of 1s.
uint8_t Trigger::condition(void){
 7d8:	fc 01       	movw	r30, r24
	
	if ( triggerLow == true ){
 7da:	80 81       	ld	r24, Z
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	81 f4       	brne	.+32     	; 0x800 <_ZN7Trigger9conditionEv+0x28>
		if ( timer->elapsed_millis(timeStamp) > TRIGGER_HIGH ){
 7e0:	43 81       	ldd	r20, Z+3	; 0x03
 7e2:	54 81       	ldd	r21, Z+4	; 0x04
 7e4:	65 81       	ldd	r22, Z+5	; 0x05
 7e6:	76 81       	ldd	r23, Z+6	; 0x06
 7e8:	81 81       	ldd	r24, Z+1	; 0x01
 7ea:	92 81       	ldd	r25, Z+2	; 0x02
 7ec:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Timer14elapsed_millisEm>
			return true;
 7f0:	21 e0       	ldi	r18, 0x01	; 1
 7f2:	6b 30       	cpi	r22, 0x0B	; 11
 7f4:	71 05       	cpc	r23, r1
 7f6:	81 05       	cpc	r24, r1
 7f8:	91 05       	cpc	r25, r1
 7fa:	88 f4       	brcc	.+34     	; 0x81e <_ZN7Trigger9conditionEv+0x46>
 7fc:	20 e0       	ldi	r18, 0x00	; 0
 7fe:	0f c0       	rjmp	.+30     	; 0x81e <_ZN7Trigger9conditionEv+0x46>
		}
		else{
			return false;
		}
	} else{
		if ( timer->elapsed_millis(timeStamp) > TRIGGER_LOW ){
 800:	43 81       	ldd	r20, Z+3	; 0x03
 802:	54 81       	ldd	r21, Z+4	; 0x04
 804:	65 81       	ldd	r22, Z+5	; 0x05
 806:	76 81       	ldd	r23, Z+6	; 0x06
 808:	81 81       	ldd	r24, Z+1	; 0x01
 80a:	92 81       	ldd	r25, Z+2	; 0x02
 80c:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN5Timer14elapsed_millisEm>
//Ends up creating a pulse with a pulse width of 1ms. period of 1s.
uint8_t Trigger::condition(void){
	
	if ( triggerLow == true ){
		if ( timer->elapsed_millis(timeStamp) > TRIGGER_HIGH ){
			return true;
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	61 31       	cpi	r22, 0x11	; 17
 814:	77 42       	sbci	r23, 0x27	; 39
 816:	81 05       	cpc	r24, r1
 818:	91 05       	cpc	r25, r1
 81a:	08 f4       	brcc	.+2      	; 0x81e <_ZN7Trigger9conditionEv+0x46>
 81c:	20 e0       	ldi	r18, 0x00	; 0
			return true;
		} else {
			return false;
		}
	}
}
 81e:	82 2f       	mov	r24, r18
 820:	08 95       	ret

00000822 <_ZN7Trigger3runEv>:
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
}

//Runs the trigger task.
void Trigger::run(){
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	ec 01       	movw	r28, r24
	
	if( this->condition() == true ){
 828:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN7Trigger9conditionEv>
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	89 f4       	brne	.+34     	; 0x852 <_ZN7Trigger3runEv+0x30>
		
		//update time stamp since last run
		timeStamp = timer->millis();
 830:	89 81       	ldd	r24, Y+1	; 0x01
 832:	9a 81       	ldd	r25, Y+2	; 0x02
 834:	0e 94 57 04 	call	0x8ae	; 0x8ae <_ZN5Timer6millisEv>
 838:	6b 83       	std	Y+3, r22	; 0x03
 83a:	7c 83       	std	Y+4, r23	; 0x04
 83c:	8d 83       	std	Y+5, r24	; 0x05
 83e:	9e 83       	std	Y+6, r25	; 0x06
		
		if (triggerLow == true){
 840:	88 81       	ld	r24, Y
 842:	81 30       	cpi	r24, 0x01	; 1
 844:	19 f4       	brne	.+6      	; 0x84c <_ZN7Trigger3runEv+0x2a>
			triggerLow = false;
 846:	18 82       	st	Y, r1
		
			//Set pin low.
			PORTD &= ~( 1 << PORTD2);
 848:	5a 98       	cbi	0x0b, 2	; 11
 84a:	03 c0       	rjmp	.+6      	; 0x852 <_ZN7Trigger3runEv+0x30>
		} else {
		
			triggerLow = true;	
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	88 83       	st	Y, r24
			//Set pin high
			PORTD |= ( 1 << PORTD2);
 850:	5a 9a       	sbi	0x0b, 2	; 11
		}
	}
}
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <_ZN7TriggerD1Ev>:
		}
	}
}

// default destructor
Trigger::~Trigger()
 858:	08 95       	ret

0000085a <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
 85a:	fc 01       	movw	r30, r24
 85c:	10 82       	st	Z, r1
 85e:	11 82       	std	Z+1, r1	; 0x01
 860:	12 82       	std	Z+2, r1	; 0x02
 862:	13 82       	std	Z+3, r1	; 0x03
 864:	14 82       	std	Z+4, r1	; 0x04
 866:	15 82       	std	Z+5, r1	; 0x05
 868:	16 82       	std	Z+6, r1	; 0x06
 86a:	17 82       	std	Z+7, r1	; 0x07
 86c:	08 95       	ret

0000086e <_ZN5Timer14incrementTimerEv>:
 86e:	fc 01       	movw	r30, r24
 870:	40 81       	ld	r20, Z
 872:	51 81       	ldd	r21, Z+1	; 0x01
 874:	62 81       	ldd	r22, Z+2	; 0x02
 876:	73 81       	ldd	r23, Z+3	; 0x03
 878:	4f 5f       	subi	r20, 0xFF	; 255
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	6f 4f       	sbci	r22, 0xFF	; 255
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	40 83       	st	Z, r20
 882:	51 83       	std	Z+1, r21	; 0x01
 884:	62 83       	std	Z+2, r22	; 0x02
 886:	73 83       	std	Z+3, r23	; 0x03
 888:	08 95       	ret

0000088a <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 88a:	0f 93       	push	r16
 88c:	1f 93       	push	r17
	return (step - comparison);	
 88e:	fc 01       	movw	r30, r24
 890:	80 81       	ld	r24, Z
 892:	91 81       	ldd	r25, Z+1	; 0x01
 894:	a2 81       	ldd	r26, Z+2	; 0x02
 896:	b3 81       	ldd	r27, Z+3	; 0x03
 898:	8c 01       	movw	r16, r24
 89a:	9d 01       	movw	r18, r26
 89c:	04 1b       	sub	r16, r20
 89e:	15 0b       	sbc	r17, r21
 8a0:	26 0b       	sbc	r18, r22
 8a2:	37 0b       	sbc	r19, r23
 8a4:	c9 01       	movw	r24, r18
 8a6:	b8 01       	movw	r22, r16
}
 8a8:	1f 91       	pop	r17
 8aa:	0f 91       	pop	r16
 8ac:	08 95       	ret

000008ae <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 8ae:	fc 01       	movw	r30, r24
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
}
 8b8:	08 95       	ret

000008ba <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
 8ba:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 8be:	e2 eb       	ldi	r30, 0xB2	; 178
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 8c4:	89 1b       	sub	r24, r25
 8c6:	80 31       	cpi	r24, 0x10	; 16
 8c8:	e0 f3       	brcs	.-8      	; 0x8c2 <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 8ca:	08 95       	ret

000008cc <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 8cc:	08 95       	ret

000008ce <__divmodhi4>:
 8ce:	97 fb       	bst	r25, 7
 8d0:	07 2e       	mov	r0, r23
 8d2:	16 f4       	brtc	.+4      	; 0x8d8 <__divmodhi4+0xa>
 8d4:	00 94       	com	r0
 8d6:	07 d0       	rcall	.+14     	; 0x8e6 <__divmodhi4_neg1>
 8d8:	77 fd       	sbrc	r23, 7
 8da:	09 d0       	rcall	.+18     	; 0x8ee <__divmodhi4_neg2>
 8dc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__udivmodhi4>
 8e0:	07 fc       	sbrc	r0, 7
 8e2:	05 d0       	rcall	.+10     	; 0x8ee <__divmodhi4_neg2>
 8e4:	3e f4       	brtc	.+14     	; 0x8f4 <__divmodhi4_exit>

000008e6 <__divmodhi4_neg1>:
 8e6:	90 95       	com	r25
 8e8:	81 95       	neg	r24
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	08 95       	ret

000008ee <__divmodhi4_neg2>:
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255

000008f4 <__divmodhi4_exit>:
 8f4:	08 95       	ret

000008f6 <__udivmodhi4>:
 8f6:	aa 1b       	sub	r26, r26
 8f8:	bb 1b       	sub	r27, r27
 8fa:	51 e1       	ldi	r21, 0x11	; 17
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <__udivmodhi4_ep>

000008fe <__udivmodhi4_loop>:
 8fe:	aa 1f       	adc	r26, r26
 900:	bb 1f       	adc	r27, r27
 902:	a6 17       	cp	r26, r22
 904:	b7 07       	cpc	r27, r23
 906:	10 f0       	brcs	.+4      	; 0x90c <__udivmodhi4_ep>
 908:	a6 1b       	sub	r26, r22
 90a:	b7 0b       	sbc	r27, r23

0000090c <__udivmodhi4_ep>:
 90c:	88 1f       	adc	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	5a 95       	dec	r21
 912:	a9 f7       	brne	.-22     	; 0x8fe <__udivmodhi4_loop>
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	bc 01       	movw	r22, r24
 91a:	cd 01       	movw	r24, r26
 91c:	08 95       	ret

0000091e <__tablejump2__>:
 91e:	ee 0f       	add	r30, r30
 920:	ff 1f       	adc	r31, r31
 922:	05 90       	lpm	r0, Z+
 924:	f4 91       	lpm	r31, Z
 926:	e0 2d       	mov	r30, r0
 928:	09 94       	ijmp

0000092a <__do_global_dtors>:
 92a:	10 e0       	ldi	r17, 0x00	; 0
 92c:	c5 e3       	ldi	r28, 0x35	; 53
 92e:	d0 e0       	ldi	r29, 0x00	; 0
 930:	04 c0       	rjmp	.+8      	; 0x93a <__do_global_dtors+0x10>
 932:	fe 01       	movw	r30, r28
 934:	0e 94 8f 04 	call	0x91e	; 0x91e <__tablejump2__>
 938:	21 96       	adiw	r28, 0x01	; 1
 93a:	c6 33       	cpi	r28, 0x36	; 54
 93c:	d1 07       	cpc	r29, r17
 93e:	c9 f7       	brne	.-14     	; 0x932 <__do_global_dtors+0x8>
 940:	f8 94       	cli

00000942 <__stop_program>:
 942:	ff cf       	rjmp	.-2      	; 0x942 <__stop_program>
