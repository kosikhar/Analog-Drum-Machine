
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000056e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  0080010c  0080010c  0000060e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002205  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f58  00000000  00000000  000029d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008ca  00000000  00000000  00003931  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000041fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab9  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007b0  00000000  00000000  00004fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005791  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	12 01       	movw	r2, r4

0000006a <__ctors_end>:
  6a:	1b 01       	movw	r2, r22

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	ee e6       	ldi	r30, 0x6E	; 110
  80:	f5 e0       	ldi	r31, 0x05	; 5
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	ac 30       	cpi	r26, 0x0C	; 12
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	ac e0       	ldi	r26, 0x0C	; 12
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a5 32       	cpi	r26, 0x25	; 37
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 a4 02 	call	0x548	; 0x548 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  b8:	0c 94 aa 02 	jmp	0x554	; 0x554 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:
#include "global.h"
#include "interrupts.h"

//Call every 10us, will be used for controlling shift registers
ISR( TIMER0_COMPA_vect, ISR_NOBLOCK )
{
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	//Increment timer every 1ms
	timer.incrementTimer();
  e4:	81 e2       	ldi	r24, 0x21	; 33
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN5Timer14incrementTimerEv>
}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_Z20setUpTimerInterruptsv>:
{
	//Setting up Timer0 (8-bit timer) to trigger ISR after 10us
	
	//TIMSK0 is the TC0 Interrupt Mask Register
	//We will enable interrupt on compare match with OCR0A
	TIMSK0 |= (1 << OCIE0A);
 10e:	ee e6       	ldi	r30, 0x6E	; 110
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	82 60       	ori	r24, 0x02	; 2
 116:	80 83       	st	Z, r24
	
	//With 16MHz/64 = 250kHz clk, we would need 250 steps to get 1ms. 
	OCR0A = (uint8_t) 250;
 118:	8a ef       	ldi	r24, 0xFA	; 250
 11a:	87 bd       	out	0x27, r24	; 39

	//Disconnect OC0A, and use CTC mode
	TCCR0A = (uint8_t) (1 << WGM01);
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	84 bd       	out	0x24, r24	; 36

	//Use clk div64 as input to the timer making timer run at 250kHz
	TCCR0B = (uint8_t) (1 << CS01) | (1 << CS00);
 120:	93 e0       	ldi	r25, 0x03	; 3
 122:	95 bd       	out	0x25, r25	; 37
	
	//Setting up Timer2 (8-bit Timer). We are just going to use
	//measuring small time scales in the us
	
	OCR2A = (uint8_t) 254;
 124:	9e ef       	ldi	r25, 0xFE	; 254
 126:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	//Disconnect OC2A, and use CTC mode
	TCCR2A = (uint8_t) (1 << WGM21);
 12a:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	
	//Use clk div1 as input to the timer making timer run at 16MHz
	TCCR2B = (uint8_t) (1 << CS20);
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	
	//Enable Interrupts Globally.
	sei();
 134:	78 94       	sei
 136:	08 95       	ret

00000138 <main>:
SevenSeg sevenSegmentDisplay;
ShiftRegister_SIPO_pinout outputShiftRegister_pinout;


int main(void)
{	
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	//Pins on port C for the output shift register
	//TODO put this into a function. Its ugly
	outputShiftRegister_pinout.serial = 0;
 142:	ec e0       	ldi	r30, 0x0C	; 12
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24
	
	sevenSegmentDisplay.sevenSegInit(2, &outputShiftRegister_pinout);
 150:	af 01       	movw	r20, r30
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 4c 01 	call	0x298	; 0x298 <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>
	sevenSegmentDisplay.getTimerReference(&timer);
 15c:	61 e2       	ldi	r22, 0x21	; 33
 15e:	71 e0       	ldi	r23, 0x01	; 1
 160:	8f e0       	ldi	r24, 0x0F	; 15
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>

	//Enable Timer interrupts
	setUpTimerInterrupts();
 168:	0e 94 87 00 	call	0x10e	; 0x10e <_Z20setUpTimerInterruptsv>
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 16c:	50 9a       	sbi	0x0a, 0	; 10
	//Declare Byte to write to shift register
	uint8_t counter = 0;
	uint8_t numberToPrint [2];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
 16e:	81 e2       	ldi	r24, 0x21	; 33
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer6millisEv>
 176:	4b 01       	movw	r8, r22
 178:	5c 01       	movw	r10, r24
	uint8_t LEDValueNext = 1;
	
	//Used for controlling how fast shift register updates
	uint32_t sevenSegUpdateTimer = timer.millis();
 17a:	81 e2       	ldi	r24, 0x21	; 33
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer6millisEv>
 182:	6b 01       	movw	r12, r22
 184:	7c 01       	movw	r14, r24
	uint8_t counter = 0;
	uint8_t numberToPrint [2];
	
	//Used for blinking LED
	uint32_t LEDTimer = timer.millis();
	uint8_t LEDValueNext = 1;
 186:	01 e0       	ldi	r16, 0x01	; 1
	
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
	
	//Declare Byte to write to shift register
	uint8_t counter = 0;
 188:	10 e0       	ldi	r17, 0x00	; 0
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
				LEDValueNext = 1;
 18a:	55 24       	eor	r5, r5
 18c:	53 94       	inc	r5
		//Reset timer.
		LEDTimer = timer.millis();
			if( LEDValueNext == 1 ){
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
				LEDValueNext = 0;
 18e:	61 2c       	mov	r6, r1
		
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 1000) ){
			//Reset timer
			sevenSegUpdateTimer = timer.millis();
			
			numberToPrint[1] = (uint8_t) counter / 10; 
 190:	0f 2e       	mov	r0, r31
 192:	fd ec       	ldi	r31, 0xCD	; 205
 194:	7f 2e       	mov	r7, r31
 196:	f0 2d       	mov	r31, r0
    /* Replace with your application code */
    while (1) 
    {
		
		//Toggle LED every 500ms
		if(timer.elapsed_millis( LEDTimer ) > 250){
 198:	b5 01       	movw	r22, r10
 19a:	a4 01       	movw	r20, r8
 19c:	81 e2       	ldi	r24, 0x21	; 33
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN5Timer14elapsed_millisEm>
 1a4:	6b 3f       	cpi	r22, 0xFB	; 251
 1a6:	71 05       	cpc	r23, r1
 1a8:	81 05       	cpc	r24, r1
 1aa:	91 05       	cpc	r25, r1
 1ac:	68 f0       	brcs	.+26     	; 0x1c8 <main+0x90>
		//Reset timer.
		LEDTimer = timer.millis();
 1ae:	81 e2       	ldi	r24, 0x21	; 33
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer6millisEv>
 1b6:	4b 01       	movw	r8, r22
 1b8:	5c 01       	movw	r10, r24
			if( LEDValueNext == 1 ){
 1ba:	01 30       	cpi	r16, 0x01	; 1
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <main+0x8c>
				//Set Test LED to OFF
				PORTD |= (1 << PORTD0);
 1be:	58 9a       	sbi	0x0b, 0	; 11
				LEDValueNext = 0;
 1c0:	06 2d       	mov	r16, r6
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0x90>
			} else {
				//Set Test LED to ON
				PORTD &= ~(1 << PORTD0);
 1c4:	58 98       	cbi	0x0b, 0	; 11
				LEDValueNext = 1;
 1c6:	05 2d       	mov	r16, r5
			}
		}
		
		if( (timer.elapsed_millis( sevenSegUpdateTimer ) > 1000) ){
 1c8:	b7 01       	movw	r22, r14
 1ca:	a6 01       	movw	r20, r12
 1cc:	81 e2       	ldi	r24, 0x21	; 33
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 8b 02 	call	0x516	; 0x516 <_ZN5Timer14elapsed_millisEm>
 1d4:	69 3e       	cpi	r22, 0xE9	; 233
 1d6:	73 40       	sbci	r23, 0x03	; 3
 1d8:	81 05       	cpc	r24, r1
 1da:	91 05       	cpc	r25, r1
 1dc:	e8 f2       	brcs	.-70     	; 0x198 <main+0x60>
			//Reset timer
			sevenSegUpdateTimer = timer.millis();
 1de:	81 e2       	ldi	r24, 0x21	; 33
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 9d 02 	call	0x53a	; 0x53a <_ZN5Timer6millisEv>
 1e6:	6b 01       	movw	r12, r22
 1e8:	7c 01       	movw	r14, r24
			
			numberToPrint[1] = (uint8_t) counter / 10; 
 1ea:	17 9d       	mul	r17, r7
 1ec:	81 2d       	mov	r24, r1
 1ee:	11 24       	eor	r1, r1
 1f0:	86 95       	lsr	r24
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
 1f6:	8a 83       	std	Y+2, r24	; 0x02
			numberToPrint[0] = (uint8_t) counter - (10*numberToPrint[1]);
 1f8:	88 0f       	add	r24, r24
 1fa:	98 2f       	mov	r25, r24
 1fc:	99 0f       	add	r25, r25
 1fe:	99 0f       	add	r25, r25
 200:	89 0f       	add	r24, r25
 202:	91 2f       	mov	r25, r17
 204:	98 1b       	sub	r25, r24
 206:	99 83       	std	Y+1, r25	; 0x01
			
			//Print the number to seven segment display.
			sevenSegmentDisplay.printNumbers( numberToPrint );
 208:	be 01       	movw	r22, r28
 20a:	6f 5f       	subi	r22, 0xFF	; 255
 20c:	7f 4f       	sbci	r23, 0xFF	; 255
 20e:	8f e0       	ldi	r24, 0x0F	; 15
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN8SevenSeg12printNumbersEPh>
			
			//increment counter
			counter++;
 216:	1f 5f       	subi	r17, 0xFF	; 255
						
			if (counter >= 100 ){
 218:	14 36       	cpi	r17, 0x64	; 100
 21a:	08 f4       	brcc	.+2      	; 0x21e <main+0xe6>
 21c:	bd cf       	rjmp	.-134    	; 0x198 <main+0x60>
				numberToPrint[0] = 0;
 21e:	69 82       	std	Y+1, r6	; 0x01
				counter = 0;
 220:	10 e0       	ldi	r17, 0x00	; 0
 222:	ba cf       	rjmp	.-140    	; 0x198 <main+0x60>

00000224 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 224:	81 e2       	ldi	r24, 0x21	; 33
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 77 02 	call	0x4ee	; 0x4ee <_ZN5TimerC1Ev>

//Initialize seven segment display
SevenSeg sevenSegmentDisplay;
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 24 01 	call	0x248	; 0x248 <_ZN8SevenSegC1Ev>
 234:	08 95       	ret

00000236 <_GLOBAL__sub_D_timer>:
 236:	8f e0       	ldi	r24, 0x0F	; 15
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 92 01 	call	0x324	; 0x324 <_ZN8SevenSegD1Ev>
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 23e:	81 e2       	ldi	r24, 0x21	; 33
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 a3 02 	call	0x546	; 0x546 <_ZN5TimerD1Ev>
 246:	08 95       	ret

00000248 <_ZN8SevenSegC1Ev>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latchOutput();
}
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	00 d0       	rcall	.+0      	; 0x252 <_ZN8SevenSegC1Ev+0xa>
 252:	00 d0       	rcall	.+0      	; 0x254 <_ZN8SevenSegC1Ev+0xc>
 254:	00 d0       	rcall	.+0      	; 0x256 <_ZN8SevenSegC1Ev+0xe>
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	8c 01       	movw	r16, r24
 25c:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN18ShiftRegister_SIPOC1Ev>
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f1 e0       	ldi	r31, 0x01	; 1
 266:	d8 01       	movw	r26, r16
 268:	17 96       	adiw	r26, 0x07	; 7
 26a:	01 90       	ld	r0, Z+
 26c:	0d 92       	st	X+, r0
 26e:	8a 95       	dec	r24
 270:	e1 f7       	brne	.-8      	; 0x26a <_ZN8SevenSegC1Ev+0x22>
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN18ShiftRegister_SIPOC1Ev>
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN18ShiftRegister_SIPOD1Ev>
 282:	26 96       	adiw	r28, 0x06	; 6
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	1f 91       	pop	r17
 294:	0f 91       	pop	r16
 296:	08 95       	ret

00000298 <_ZN8SevenSeg12sevenSegInitEhP25ShiftRegister_SIPO_pinout>:
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
 2a0:	16 2f       	mov	r17, r22
 2a2:	ba 01       	movw	r22, r20
 2a4:	0e 94 bd 01 	call	0x37a	; 0x37a <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEP25ShiftRegister_SIPO_pinout>
 2a8:	1e 83       	std	Y+6, r17	; 0x06
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	1f 91       	pop	r17
 2b0:	08 95       	ret

000002b2 <_ZN8SevenSeg12printNumbersEPh>:
 2b2:	df 92       	push	r13
 2b4:	ef 92       	push	r14
 2b6:	ff 92       	push	r15
 2b8:	0f 93       	push	r16
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	8c 01       	movw	r16, r24
 2c2:	fc 01       	movw	r30, r24
 2c4:	86 81       	ldd	r24, Z+6	; 0x06
 2c6:	88 23       	and	r24, r24
 2c8:	11 f1       	breq	.+68     	; 0x30e <_ZN8SevenSeg12printNumbersEPh+0x5c>
 2ca:	c6 2f       	mov	r28, r22
 2cc:	d7 2f       	mov	r29, r23
 2ce:	e1 2c       	mov	r14, r1
 2d0:	f1 2c       	mov	r15, r1
 2d2:	0f 2e       	mov	r0, r31
 2d4:	fa e0       	ldi	r31, 0x0A	; 10
 2d6:	df 2e       	mov	r13, r31
 2d8:	f0 2d       	mov	r31, r0
 2da:	fe 01       	movw	r30, r28
 2dc:	88 81       	ld	r24, Y
 2de:	8a 30       	cpi	r24, 0x0A	; 10
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <_ZN8SevenSeg12printNumbersEPh+0x32>
 2e2:	d8 82       	st	Y, r13
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	80 81       	ld	r24, Z
 2e8:	f8 01       	movw	r30, r16
 2ea:	e8 0f       	add	r30, r24
 2ec:	f1 1d       	adc	r31, r1
 2ee:	67 81       	ldd	r22, Z+7	; 0x07
 2f0:	c8 01       	movw	r24, r16
 2f2:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN18ShiftRegister_SIPO8loadByteEh>
 2f6:	c8 01       	movw	r24, r16
 2f8:	0e 94 27 02 	call	0x44e	; 0x44e <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 2fc:	ff ef       	ldi	r31, 0xFF	; 255
 2fe:	ef 1a       	sub	r14, r31
 300:	ff 0a       	sbc	r15, r31
 302:	f8 01       	movw	r30, r16
 304:	86 81       	ldd	r24, Z+6	; 0x06
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	e8 16       	cp	r14, r24
 30a:	f9 06       	cpc	r15, r25
 30c:	34 f3       	brlt	.-52     	; 0x2da <_ZN8SevenSeg12printNumbersEPh+0x28>
 30e:	c8 01       	movw	r24, r16
 310:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_ZN18ShiftRegister_SIPO11latchOutputEv>
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	df 90       	pop	r13
 322:	08 95       	ret

00000324 <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 324:	0e 94 76 02 	call	0x4ec	; 0x4ec <_ZN18ShiftRegister_SIPOD1Ev>
 328:	08 95       	ret

0000032a <_ZN18ShiftRegister_SIPOC1Ev>:
*/

#include "ShiftRegister_SIPO.h"

// default constructor
ShiftRegister_SIPO::ShiftRegister_SIPO()
 32a:	08 95       	ret

0000032c <_ZN18ShiftRegister_SIPO9setupPinsEv>:
	}
	
} //ShiftBits

void ShiftRegister_SIPO::setupPins( void ) 
{
 32c:	fc 01       	movw	r30, r24
	//setup the pinout byte
	pinout_byte = (1 << pinout->shift) | (1 << pinout->latch) | (1 << pinout->serial);	
 32e:	a0 81       	ld	r26, Z
 330:	b1 81       	ldd	r27, Z+1	; 0x01
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	a9 01       	movw	r20, r18
 338:	0c 90       	ld	r0, X
 33a:	02 c0       	rjmp	.+4      	; 0x340 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 33c:	44 0f       	add	r20, r20
 33e:	55 1f       	adc	r21, r21
 340:	0a 94       	dec	r0
 342:	e2 f7       	brpl	.-8      	; 0x33c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 344:	c9 01       	movw	r24, r18
 346:	11 96       	adiw	r26, 0x01	; 1
 348:	0c 90       	ld	r0, X
 34a:	11 97       	sbiw	r26, 0x01	; 1
 34c:	02 c0       	rjmp	.+4      	; 0x352 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 356:	84 2b       	or	r24, r20
 358:	12 96       	adiw	r26, 0x02	; 2
 35a:	0c 90       	ld	r0, X
 35c:	02 c0       	rjmp	.+4      	; 0x362 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 366:	28 2b       	or	r18, r24
 368:	22 83       	std	Z+2, r18	; 0x02

	// Initialize these pins to be 1.
	SIPO_PORT |= ( pinout_byte );
 36a:	88 b1       	in	r24, 0x08	; 8
 36c:	28 2b       	or	r18, r24
 36e:	28 b9       	out	0x08, r18	; 8

	// Set pins to be output.
	SIPO_DDR |= pinout_byte;
 370:	97 b1       	in	r25, 0x07	; 7
 372:	82 81       	ldd	r24, Z+2	; 0x02
 374:	89 2b       	or	r24, r25
 376:	87 b9       	out	0x07, r24	; 7
 378:	08 95       	ret

0000037a <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEP25ShiftRegister_SIPO_pinout>:

void ShiftRegister_SIPO::ShiftRegisterInit( ShiftRegister_SIPO_pinout * pins )
{

	//Store shift register pinout for later use
	pinout = pins;
 37a:	fc 01       	movw	r30, r24
 37c:	71 83       	std	Z+1, r23	; 0x01
 37e:	60 83       	st	Z, r22
	
	//start off with output byte 0
	output_byte = 0;
 380:	15 82       	std	Z+5, r1	; 0x05
	
	//Setup pins on the 328p to utilize the shift register.
	this->setupPins();
 382:	0e 94 96 01 	call	0x32c	; 0x32c <_ZN18ShiftRegister_SIPO9setupPinsEv>
 386:	08 95       	ret

00000388 <_ZN18ShiftRegister_SIPO8loadByteEh>:
	this->wait_1us();
}

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 388:	fc 01       	movw	r30, r24
 38a:	65 83       	std	Z+5, r22	; 0x05
 38c:	08 95       	ret

0000038e <_ZN18ShiftRegister_SIPO8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
	
	//Read the value of the TCNT0 timer0 
	uint8_t timerValue = TCNT2;
 38e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 392:	e2 eb       	ldi	r30, 0xB2	; 178
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
	
	//Read the value of the TCNT0 timer0 
	uint8_t timerValue = TCNT2;
	
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 398:	89 1b       	sub	r24, r25
 39a:	80 31       	cpi	r24, 0x10	; 16
 39c:	e0 f3       	brcs	.-8      	; 0x396 <_ZN18ShiftRegister_SIPO8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 39e:	08 95       	ret

000003a0 <_ZN18ShiftRegister_SIPO11latchOutputEv>:
	SIPO_DDR |= pinout_byte;

} //SetupPins

void ShiftRegister_SIPO::latchOutput( void )
{
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	8c 01       	movw	r16, r24
	//Latch output
	SIPO_PORT &= ~(1 << pinout->latch);
 3aa:	98 b1       	in	r25, 0x08	; 8
 3ac:	d8 01       	movw	r26, r16
 3ae:	ed 91       	ld	r30, X+
 3b0:	fc 91       	ld	r31, X
 3b2:	c1 e0       	ldi	r28, 0x01	; 1
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	9e 01       	movw	r18, r28
 3b8:	01 80       	ldd	r0, Z+1	; 0x01
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x20>
 3bc:	22 0f       	add	r18, r18
 3be:	33 1f       	adc	r19, r19
 3c0:	0a 94       	dec	r0
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <_ZN18ShiftRegister_SIPO11latchOutputEv+0x1c>
 3c4:	82 2f       	mov	r24, r18
 3c6:	80 95       	com	r24
 3c8:	89 23       	and	r24, r25
 3ca:	88 b9       	out	0x08, r24	; 8
	this->wait_1us();
 3cc:	c8 01       	movw	r24, r16
 3ce:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN18ShiftRegister_SIPO8wait_1usEv>
	SIPO_PORT |= (1 << pinout->latch);
 3d2:	88 b1       	in	r24, 0x08	; 8
 3d4:	d8 01       	movw	r26, r16
 3d6:	ed 91       	ld	r30, X+
 3d8:	fc 91       	ld	r31, X
 3da:	01 80       	ldd	r0, Z+1	; 0x01
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <_ZN18ShiftRegister_SIPO11latchOutputEv+0x42>
 3de:	cc 0f       	add	r28, r28
 3e0:	dd 1f       	adc	r29, r29
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <_ZN18ShiftRegister_SIPO11latchOutputEv+0x3e>
 3e6:	c8 2b       	or	r28, r24
 3e8:	c8 b9       	out	0x08, r28	; 8
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	08 95       	ret

000003f4 <_ZN18ShiftRegister_SIPO11singleShiftEv>:

void ShiftRegister_SIPO::singleShift( void )
{
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	8c 01       	movw	r16, r24
	//Shift single bit in.
	SIPO_PORT &= ~(1 << pinout->shift);
 3fe:	98 b1       	in	r25, 0x08	; 8
 400:	d8 01       	movw	r26, r16
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	c1 e0       	ldi	r28, 0x01	; 1
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	9e 01       	movw	r18, r28
 40c:	00 80       	ld	r0, Z
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	22 0f       	add	r18, r18
 412:	33 1f       	adc	r19, r19
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	82 2f       	mov	r24, r18
 41a:	80 95       	com	r24
 41c:	89 23       	and	r24, r25
 41e:	88 b9       	out	0x08, r24	; 8
	this->wait_1us();
 420:	c8 01       	movw	r24, r16
 422:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN18ShiftRegister_SIPO8wait_1usEv>
	SIPO_PORT |= (1 << pinout->shift);
 426:	88 b1       	in	r24, 0x08	; 8
 428:	d8 01       	movw	r26, r16
 42a:	ed 91       	ld	r30, X+
 42c:	fc 91       	ld	r31, X
 42e:	00 80       	ld	r0, Z
 430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 432:	cc 0f       	add	r28, r28
 434:	dd 1f       	adc	r29, r29
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43a:	c8 2b       	or	r28, r24
 43c:	c8 b9       	out	0x08, r28	; 8
	this->wait_1us();
 43e:	c8 01       	movw	r24, r16
 440:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN18ShiftRegister_SIPO8wait_1usEv>
}
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	0f 91       	pop	r16
 44c:	08 95       	ret

0000044e <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
//This will be called in a timer based interrupt so it would need to be locked
//to prevent recursion.
void ShiftRegister_SIPO::shiftBits( void )
{		
 44e:	ef 92       	push	r14
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	SIPO_PORT &= ~( pinout_byte );	
 45c:	98 b1       	in	r25, 0x08	; 8
 45e:	8a 81       	ldd	r24, Y+2	; 0x02
 460:	80 95       	com	r24
 462:	89 23       	and	r24, r25
 464:	88 b9       	out	0x08, r24	; 8
	//Wait 1us
	this->wait_1us();
 466:	ce 01       	movw	r24, r28
 468:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN18ShiftRegister_SIPO8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 46c:	00 e0       	ldi	r16, 0x00	; 0
 46e:	10 e0       	ldi	r17, 0x00	; 0
		if( output_byte & (1 << i) ){
			SIPO_PORT |= (1 << pinout->serial);
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << pinout->serial);
 470:	ee 24       	eor	r14, r14
 472:	e3 94       	inc	r14
 474:	f1 2c       	mov	r15, r1
	for ( int i=0; i < 8; i++){
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 476:	8d 81       	ldd	r24, Y+5	; 0x05
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	00 2e       	mov	r0, r16
 47c:	02 c0       	rjmp	.+4      	; 0x482 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x34>
 47e:	95 95       	asr	r25
 480:	87 95       	ror	r24
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x30>
 486:	80 ff       	sbrs	r24, 0
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x56>
			SIPO_PORT |= (1 << pinout->serial);
 48a:	28 b1       	in	r18, 0x08	; 8
 48c:	e8 81       	ld	r30, Y
 48e:	f9 81       	ldd	r31, Y+1	; 0x01
 490:	c7 01       	movw	r24, r14
 492:	02 80       	ldd	r0, Z+2	; 0x02
 494:	02 c0       	rjmp	.+4      	; 0x49a <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	0a 94       	dec	r0
 49c:	e2 f7       	brpl	.-8      	; 0x496 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x48>
 49e:	82 2b       	or	r24, r18
 4a0:	88 b9       	out	0x08, r24	; 8
 4a2:	0e c0       	rjmp	.+28     	; 0x4c0 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x72>
				
		//Else set to 0
		} else {
			SIPO_PORT &= ~(1 << pinout->serial);
 4a4:	98 b1       	in	r25, 0x08	; 8
 4a6:	e8 81       	ld	r30, Y
 4a8:	f9 81       	ldd	r31, Y+1	; 0x01
 4aa:	97 01       	movw	r18, r14
 4ac:	02 80       	ldd	r0, Z+2	; 0x02
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x66>
 4b0:	22 0f       	add	r18, r18
 4b2:	33 1f       	adc	r19, r19
 4b4:	0a 94       	dec	r0
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x62>
 4b8:	82 2f       	mov	r24, r18
 4ba:	80 95       	com	r24
 4bc:	89 23       	and	r24, r25
 4be:	88 b9       	out	0x08, r24	; 8
		}
			
		this->wait_1us();
 4c0:	ce 01       	movw	r24, r28
 4c2:	0e 94 c7 01 	call	0x38e	; 0x38e <_ZN18ShiftRegister_SIPO8wait_1usEv>
			
		this->singleShift();
 4c6:	ce 01       	movw	r24, r28
 4c8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <_ZN18ShiftRegister_SIPO11singleShiftEv>
	//Starting shifting with shift/serial/latch at 0
	SIPO_PORT &= ~( pinout_byte );	
	//Wait 1us
	this->wait_1us();
		
	for ( int i=0; i < 8; i++){
 4cc:	0f 5f       	subi	r16, 0xFF	; 255
 4ce:	1f 4f       	sbci	r17, 0xFF	; 255
 4d0:	08 30       	cpi	r16, 0x08	; 8
 4d2:	11 05       	cpc	r17, r1
 4d4:	81 f6       	brne	.-96     	; 0x476 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x28>
		this->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 4d6:	df 91       	pop	r29
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	08 95       	ret

000004e4 <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:
	}
}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 4e4:	fc 01       	movw	r30, r24
 4e6:	74 83       	std	Z+4, r23	; 0x04
 4e8:	63 83       	std	Z+3, r22	; 0x03
 4ea:	08 95       	ret

000004ec <_ZN18ShiftRegister_SIPOD1Ev>:

} //getTimerReference


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 4ec:	08 95       	ret

000004ee <_ZN5TimerC1Ev>:
	milliseconds++;
}

void Timer::reset( void )
{
	milliseconds = 0;
 4ee:	fc 01       	movw	r30, r24
 4f0:	10 82       	st	Z, r1
 4f2:	11 82       	std	Z+1, r1	; 0x01
 4f4:	12 82       	std	Z+2, r1	; 0x02
 4f6:	13 82       	std	Z+3, r1	; 0x03
 4f8:	08 95       	ret

000004fa <_ZN5Timer14incrementTimerEv>:
 4fa:	fc 01       	movw	r30, r24
 4fc:	40 81       	ld	r20, Z
 4fe:	51 81       	ldd	r21, Z+1	; 0x01
 500:	62 81       	ldd	r22, Z+2	; 0x02
 502:	73 81       	ldd	r23, Z+3	; 0x03
 504:	4f 5f       	subi	r20, 0xFF	; 255
 506:	5f 4f       	sbci	r21, 0xFF	; 255
 508:	6f 4f       	sbci	r22, 0xFF	; 255
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	40 83       	st	Z, r20
 50e:	51 83       	std	Z+1, r21	; 0x01
 510:	62 83       	std	Z+2, r22	; 0x02
 512:	73 83       	std	Z+3, r23	; 0x03
 514:	08 95       	ret

00000516 <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 516:	0f 93       	push	r16
 518:	1f 93       	push	r17
	return (milliseconds - comparison);	
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	91 81       	ldd	r25, Z+1	; 0x01
 520:	a2 81       	ldd	r26, Z+2	; 0x02
 522:	b3 81       	ldd	r27, Z+3	; 0x03
 524:	8c 01       	movw	r16, r24
 526:	9d 01       	movw	r18, r26
 528:	04 1b       	sub	r16, r20
 52a:	15 0b       	sbc	r17, r21
 52c:	26 0b       	sbc	r18, r22
 52e:	37 0b       	sbc	r19, r23
 530:	c9 01       	movw	r24, r18
 532:	b8 01       	movw	r22, r16
}
 534:	1f 91       	pop	r17
 536:	0f 91       	pop	r16
 538:	08 95       	ret

0000053a <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return milliseconds;
 53a:	fc 01       	movw	r30, r24
 53c:	60 81       	ld	r22, Z
 53e:	71 81       	ldd	r23, Z+1	; 0x01
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	93 81       	ldd	r25, Z+3	; 0x03
}
 544:	08 95       	ret

00000546 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 546:	08 95       	ret

00000548 <__tablejump2__>:
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	05 90       	lpm	r0, Z+
 54e:	f4 91       	lpm	r31, Z
 550:	e0 2d       	mov	r30, r0
 552:	09 94       	ijmp

00000554 <__do_global_dtors>:
 554:	10 e0       	ldi	r17, 0x00	; 0
 556:	c5 e3       	ldi	r28, 0x35	; 53
 558:	d0 e0       	ldi	r29, 0x00	; 0
 55a:	04 c0       	rjmp	.+8      	; 0x564 <__do_global_dtors+0x10>
 55c:	fe 01       	movw	r30, r28
 55e:	0e 94 a4 02 	call	0x548	; 0x548 <__tablejump2__>
 562:	21 96       	adiw	r28, 0x01	; 1
 564:	c6 33       	cpi	r28, 0x36	; 54
 566:	d1 07       	cpc	r29, r17
 568:	c9 f7       	brne	.-14     	; 0x55c <__do_global_dtors+0x8>
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
