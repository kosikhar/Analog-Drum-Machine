
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800106  00800106  000004f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000520  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001545  00000000  00000000  0000063c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bde  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ab  00000000  00000000  0000275f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00002d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000863  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027a  00000000  00000000  000036e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000395d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_11>
  30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	94 00       	.word	0x0094	; ????

0000006a <__ctors_end>:
  6a:	9d 00       	.word	0x009d	; ????

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a6 e0       	ldi	r26, 0x06	; 6
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	ad 31       	cpi	r26, 0x1D	; 29
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e5       	ldi	r30, 0x56	; 86
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 30       	cpi	r26, 0x06	; 6
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  b8:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_11>:
 */ 

 #include "global.h"
 #include <avr/interrupt.h>

 ISR( TIMER1_COMPA_vect, ISR_NOBLOCK ){
  c0:	78 94       	sei
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1

	

  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:


int main(void)
{	
	//Pins on port C for the output shift register
	outputShiftRegister_pinout.serial = 0;
  d6:	e6 e0       	ldi	r30, 0x06	; 6
  d8:	f1 e0       	ldi	r31, 0x01	; 1
  da:	12 82       	std	Z+2, r1	; 0x02
	outputShiftRegister_pinout.latch = 1;
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	81 83       	std	Z+1, r24	; 0x01
	outputShiftRegister_pinout.shift = 2;
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	80 83       	st	Z, r24
	
	outputShiftRegister.ShiftRegisterInit(1, &outputShiftRegister_pinout);
  e4:	af 01       	movw	r20, r30
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	89 e0       	ldi	r24, 0x09	; 9
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>
	outputShiftRegister.getTimerReference(&timer);
  f0:	64 e1       	ldi	r22, 0x14	; 20
  f2:	71 e0       	ldi	r23, 0x01	; 1
  f4:	89 e0       	ldi	r24, 0x09	; 9
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>
	
	//Set data direction to output
	DDRD |= (1 << PORTD0);
  fc:	50 9a       	sbi	0x0a, 0	; 10
    /* Replace with your application code */
    while (1) 
    {
		
		//Set Test LED pin to output
		*( (volatile uint8_t *) 0x2A + 1) &= ~(1 << PORTD0);
  fe:	58 98       	cbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x30>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x3a>
 110:	00 00       	nop
		
		_delay_ms(500);
		
		*( (volatile uint8_t *) 0x2A + 1) |= (1 << PORTD0);
 112:	58 9a       	sbi	0x0b, 0	; 11
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	89 e6       	ldi	r24, 0x69	; 105
 118:	98 e1       	ldi	r25, 0x18	; 24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x44>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x4e>
 124:	00 00       	nop
 126:	eb cf       	rjmp	.-42     	; 0xfe <main+0x28>

00000128 <_GLOBAL__sub_I_timer>:
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 128:	84 e1       	ldi	r24, 0x14	; 20
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN5TimerC1Ev>

//Initialize the output shift register.
ShiftRegister_SIPO outputShiftRegister;
 130:	89 e0       	ldi	r24, 0x09	; 9
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 a6 00 	call	0x14c	; 0x14c <_ZN18ShiftRegister_SIPOC1Ev>
 138:	08 95       	ret

0000013a <_GLOBAL__sub_D_timer>:
 13a:	89 e0       	ldi	r24, 0x09	; 9
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <_ZN18ShiftRegister_SIPOD1Ev>
 * Author : Koltin Kosik-Harvey
 */ 

#include "global.h"

Timer timer;
 142:	84 e1       	ldi	r24, 0x14	; 20
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 f6 00 	call	0x1ec	; 0x1ec <_ZN5TimerD1Ev>
 14a:	08 95       	ret

0000014c <_ZN18ShiftRegister_SIPOC1Ev>:

		//if not check if there's more work
		if ( newWork == true){

			//if there is work, continue running this method.
			shiftLock = true;	
 14c:	fc 01       	movw	r30, r24
 14e:	13 82       	std	Z+3, r1	; 0x03
 150:	12 82       	std	Z+2, r1	; 0x02
 152:	17 82       	std	Z+7, r1	; 0x07
 154:	08 95       	ret

00000156 <_ZN18ShiftRegister_SIPO9setupPinsEv>:
	
	
}

void ShiftRegister_SIPO::setupPins( void ) 
{
 156:	fc 01       	movw	r30, r24
	//setup the pinout byte
	pinout_byte = (1 << pinout->shift) | (1 << pinout->latch) | (1 << pinout->serial);	
 158:	a4 81       	ldd	r26, Z+4	; 0x04
 15a:	b5 81       	ldd	r27, Z+5	; 0x05
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	a9 01       	movw	r20, r18
 162:	0c 90       	ld	r0, X
 164:	02 c0       	rjmp	.+4      	; 0x16a <_ZN18ShiftRegister_SIPO9setupPinsEv+0x14>
 166:	44 0f       	add	r20, r20
 168:	55 1f       	adc	r21, r21
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x10>
 16e:	c9 01       	movw	r24, r18
 170:	11 96       	adiw	r26, 0x01	; 1
 172:	0c 90       	ld	r0, X
 174:	11 97       	sbiw	r26, 0x01	; 1
 176:	02 c0       	rjmp	.+4      	; 0x17c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x26>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x22>
 180:	84 2b       	or	r24, r20
 182:	12 96       	adiw	r26, 0x02	; 2
 184:	0c 90       	ld	r0, X
 186:	02 c0       	rjmp	.+4      	; 0x18c <_ZN18ShiftRegister_SIPO9setupPinsEv+0x36>
 188:	22 0f       	add	r18, r18
 18a:	33 1f       	adc	r19, r19
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <_ZN18ShiftRegister_SIPO9setupPinsEv+0x32>
 190:	28 2b       	or	r18, r24
 192:	26 83       	std	Z+6, r18	; 0x06

	// Initialize these pins to be 0.
	SIPO_PORT &= ~( pinout_byte );
 194:	88 b1       	in	r24, 0x08	; 8
 196:	20 95       	com	r18
 198:	28 23       	and	r18, r24
 19a:	28 b9       	out	0x08, r18	; 8

	// Set pins to be output.
	SIPO_DDR |= pinout_byte;
 19c:	97 b1       	in	r25, 0x07	; 7
 19e:	86 81       	ldd	r24, Z+6	; 0x06
 1a0:	89 2b       	or	r24, r25
 1a2:	87 b9       	out	0x07, r24	; 7
 1a4:	08 95       	ret

000001a6 <_ZN18ShiftRegister_SIPO17ShiftRegisterInitEhP25ShiftRegister_SIPO_pinout>:
	
} //ShiftRegister_SIPO


void ShiftRegister_SIPO::ShiftRegisterInit( uint8_t numShiftRegisters, ShiftRegister_SIPO_pinout * pins )
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	ec 01       	movw	r28, r24
	//Store the size for later use.
	size = numShiftRegisters;
 1ac:	6b 83       	std	Y+3, r22	; 0x03
	
	//Store shift register pinout for later use
	pinout = pins;
 1ae:	5d 83       	std	Y+5, r21	; 0x05
 1b0:	4c 83       	std	Y+4, r20	; 0x04
	
	//Initialize array. If I'm using 2 shift registers I need 2 bytes.
	output_bytes = (uint8_t *) malloc( numShiftRegisters );
 1b2:	86 2f       	mov	r24, r22
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <malloc>
 1ba:	99 83       	std	Y+1, r25	; 0x01
 1bc:	88 83       	st	Y, r24
	
	//Setup pins on the 328p to utilize the shift register.
	this->setupPins();
 1be:	ce 01       	movw	r24, r28
 1c0:	0e 94 ab 00 	call	0x156	; 0x156 <_ZN18ShiftRegister_SIPO9setupPinsEv>
	
} //ShiftRegister_SIPO
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <_ZN18ShiftRegister_SIPO17getTimerReferenceEP5Timer>:

}

void ShiftRegister_SIPO::getTimerReference( Timer * ptr )
{
	timer = ptr;
 1ca:	fc 01       	movw	r30, r24
 1cc:	72 87       	std	Z+10, r23	; 0x0a
 1ce:	61 87       	std	Z+9, r22	; 0x09
 1d0:	08 95       	ret

000001d2 <_ZN18ShiftRegister_SIPOD1Ev>:


// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
{
	free( output_bytes );	
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	91 81       	ldd	r25, Z+1	; 0x01
 1d8:	0e 94 95 01 	call	0x32a	; 0x32a <free>
 1dc:	08 95       	ret

000001de <_ZN5TimerC1Ev>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
	return (milliseconds - comparison);	
}
 1de:	fc 01       	movw	r30, r24
 1e0:	10 82       	st	Z, r1
 1e2:	11 82       	std	Z+1, r1	; 0x01
 1e4:	12 82       	std	Z+2, r1	; 0x02
 1e6:	13 82       	std	Z+3, r1	; 0x03
 1e8:	14 82       	std	Z+4, r1	; 0x04
 1ea:	08 95       	ret

000001ec <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 1ec:	08 95       	ret

000001ee <__tablejump2__>:
 1ee:	ee 0f       	add	r30, r30
 1f0:	ff 1f       	adc	r31, r31
 1f2:	05 90       	lpm	r0, Z+
 1f4:	f4 91       	lpm	r31, Z
 1f6:	e0 2d       	mov	r30, r0
 1f8:	09 94       	ijmp

000001fa <malloc>:
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	91 05       	cpc	r25, r1
 206:	10 f4       	brcc	.+4      	; 0x20c <malloc+0x12>
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <__flp>
 210:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <__flp+0x1>
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	a0 e0       	ldi	r26, 0x00	; 0
 21a:	b0 e0       	ldi	r27, 0x00	; 0
 21c:	30 97       	sbiw	r30, 0x00	; 0
 21e:	19 f1       	breq	.+70     	; 0x266 <malloc+0x6c>
 220:	40 81       	ld	r20, Z
 222:	51 81       	ldd	r21, Z+1	; 0x01
 224:	02 81       	ldd	r16, Z+2	; 0x02
 226:	13 81       	ldd	r17, Z+3	; 0x03
 228:	48 17       	cp	r20, r24
 22a:	59 07       	cpc	r21, r25
 22c:	c8 f0       	brcs	.+50     	; 0x260 <malloc+0x66>
 22e:	84 17       	cp	r24, r20
 230:	95 07       	cpc	r25, r21
 232:	69 f4       	brne	.+26     	; 0x24e <malloc+0x54>
 234:	10 97       	sbiw	r26, 0x00	; 0
 236:	31 f0       	breq	.+12     	; 0x244 <malloc+0x4a>
 238:	12 96       	adiw	r26, 0x02	; 2
 23a:	0c 93       	st	X, r16
 23c:	12 97       	sbiw	r26, 0x02	; 2
 23e:	13 96       	adiw	r26, 0x03	; 3
 240:	1c 93       	st	X, r17
 242:	27 c0       	rjmp	.+78     	; 0x292 <malloc+0x98>
 244:	00 93 1b 01 	sts	0x011B, r16	; 0x80011b <__flp>
 248:	10 93 1c 01 	sts	0x011C, r17	; 0x80011c <__flp+0x1>
 24c:	22 c0       	rjmp	.+68     	; 0x292 <malloc+0x98>
 24e:	21 15       	cp	r18, r1
 250:	31 05       	cpc	r19, r1
 252:	19 f0       	breq	.+6      	; 0x25a <malloc+0x60>
 254:	42 17       	cp	r20, r18
 256:	53 07       	cpc	r21, r19
 258:	18 f4       	brcc	.+6      	; 0x260 <malloc+0x66>
 25a:	9a 01       	movw	r18, r20
 25c:	bd 01       	movw	r22, r26
 25e:	ef 01       	movw	r28, r30
 260:	df 01       	movw	r26, r30
 262:	f8 01       	movw	r30, r16
 264:	db cf       	rjmp	.-74     	; 0x21c <malloc+0x22>
 266:	21 15       	cp	r18, r1
 268:	31 05       	cpc	r19, r1
 26a:	f9 f0       	breq	.+62     	; 0x2aa <malloc+0xb0>
 26c:	28 1b       	sub	r18, r24
 26e:	39 0b       	sbc	r19, r25
 270:	24 30       	cpi	r18, 0x04	; 4
 272:	31 05       	cpc	r19, r1
 274:	80 f4       	brcc	.+32     	; 0x296 <malloc+0x9c>
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	9b 81       	ldd	r25, Y+3	; 0x03
 27a:	61 15       	cp	r22, r1
 27c:	71 05       	cpc	r23, r1
 27e:	21 f0       	breq	.+8      	; 0x288 <malloc+0x8e>
 280:	fb 01       	movw	r30, r22
 282:	93 83       	std	Z+3, r25	; 0x03
 284:	82 83       	std	Z+2, r24	; 0x02
 286:	04 c0       	rjmp	.+8      	; 0x290 <malloc+0x96>
 288:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <__flp+0x1>
 28c:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <__flp>
 290:	fe 01       	movw	r30, r28
 292:	32 96       	adiw	r30, 0x02	; 2
 294:	44 c0       	rjmp	.+136    	; 0x31e <malloc+0x124>
 296:	fe 01       	movw	r30, r28
 298:	e2 0f       	add	r30, r18
 29a:	f3 1f       	adc	r31, r19
 29c:	81 93       	st	Z+, r24
 29e:	91 93       	st	Z+, r25
 2a0:	22 50       	subi	r18, 0x02	; 2
 2a2:	31 09       	sbc	r19, r1
 2a4:	39 83       	std	Y+1, r19	; 0x01
 2a6:	28 83       	st	Y, r18
 2a8:	3a c0       	rjmp	.+116    	; 0x31e <malloc+0x124>
 2aa:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <__brkval>
 2ae:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__brkval+0x1>
 2b2:	23 2b       	or	r18, r19
 2b4:	41 f4       	brne	.+16     	; 0x2c6 <malloc+0xcc>
 2b6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 2ba:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 2be:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <__brkval+0x1>
 2c2:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <__brkval>
 2c6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 2ca:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 2ce:	21 15       	cp	r18, r1
 2d0:	31 05       	cpc	r19, r1
 2d2:	41 f4       	brne	.+16     	; 0x2e4 <malloc+0xea>
 2d4:	2d b7       	in	r18, 0x3d	; 61
 2d6:	3e b7       	in	r19, 0x3e	; 62
 2d8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 2dc:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 2e0:	24 1b       	sub	r18, r20
 2e2:	35 0b       	sbc	r19, r21
 2e4:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <__brkval>
 2e8:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <__brkval+0x1>
 2ec:	e2 17       	cp	r30, r18
 2ee:	f3 07       	cpc	r31, r19
 2f0:	a0 f4       	brcc	.+40     	; 0x31a <malloc+0x120>
 2f2:	2e 1b       	sub	r18, r30
 2f4:	3f 0b       	sbc	r19, r31
 2f6:	28 17       	cp	r18, r24
 2f8:	39 07       	cpc	r19, r25
 2fa:	78 f0       	brcs	.+30     	; 0x31a <malloc+0x120>
 2fc:	ac 01       	movw	r20, r24
 2fe:	4e 5f       	subi	r20, 0xFE	; 254
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	24 17       	cp	r18, r20
 304:	35 07       	cpc	r19, r21
 306:	48 f0       	brcs	.+18     	; 0x31a <malloc+0x120>
 308:	4e 0f       	add	r20, r30
 30a:	5f 1f       	adc	r21, r31
 30c:	50 93 1a 01 	sts	0x011A, r21	; 0x80011a <__brkval+0x1>
 310:	40 93 19 01 	sts	0x0119, r20	; 0x800119 <__brkval>
 314:	81 93       	st	Z+, r24
 316:	91 93       	st	Z+, r25
 318:	02 c0       	rjmp	.+4      	; 0x31e <malloc+0x124>
 31a:	e0 e0       	ldi	r30, 0x00	; 0
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	cf 01       	movw	r24, r30
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	0f 91       	pop	r16
 328:	08 95       	ret

0000032a <free>:
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	00 97       	sbiw	r24, 0x00	; 0
 330:	09 f4       	brne	.+2      	; 0x334 <free+0xa>
 332:	81 c0       	rjmp	.+258    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 334:	fc 01       	movw	r30, r24
 336:	32 97       	sbiw	r30, 0x02	; 2
 338:	13 82       	std	Z+3, r1	; 0x03
 33a:	12 82       	std	Z+2, r1	; 0x02
 33c:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <__flp>
 340:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <__flp+0x1>
 344:	10 97       	sbiw	r26, 0x00	; 0
 346:	81 f4       	brne	.+32     	; 0x368 <free+0x3e>
 348:	20 81       	ld	r18, Z
 34a:	31 81       	ldd	r19, Z+1	; 0x01
 34c:	82 0f       	add	r24, r18
 34e:	93 1f       	adc	r25, r19
 350:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <__brkval>
 354:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__brkval+0x1>
 358:	28 17       	cp	r18, r24
 35a:	39 07       	cpc	r19, r25
 35c:	51 f5       	brne	.+84     	; 0x3b2 <free+0x88>
 35e:	f0 93 1a 01 	sts	0x011A, r31	; 0x80011a <__brkval+0x1>
 362:	e0 93 19 01 	sts	0x0119, r30	; 0x800119 <__brkval>
 366:	67 c0       	rjmp	.+206    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 368:	ed 01       	movw	r28, r26
 36a:	20 e0       	ldi	r18, 0x00	; 0
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	ce 17       	cp	r28, r30
 370:	df 07       	cpc	r29, r31
 372:	40 f4       	brcc	.+16     	; 0x384 <free+0x5a>
 374:	4a 81       	ldd	r20, Y+2	; 0x02
 376:	5b 81       	ldd	r21, Y+3	; 0x03
 378:	9e 01       	movw	r18, r28
 37a:	41 15       	cp	r20, r1
 37c:	51 05       	cpc	r21, r1
 37e:	f1 f0       	breq	.+60     	; 0x3bc <free+0x92>
 380:	ea 01       	movw	r28, r20
 382:	f5 cf       	rjmp	.-22     	; 0x36e <free+0x44>
 384:	d3 83       	std	Z+3, r29	; 0x03
 386:	c2 83       	std	Z+2, r28	; 0x02
 388:	40 81       	ld	r20, Z
 38a:	51 81       	ldd	r21, Z+1	; 0x01
 38c:	84 0f       	add	r24, r20
 38e:	95 1f       	adc	r25, r21
 390:	c8 17       	cp	r28, r24
 392:	d9 07       	cpc	r29, r25
 394:	59 f4       	brne	.+22     	; 0x3ac <free+0x82>
 396:	88 81       	ld	r24, Y
 398:	99 81       	ldd	r25, Y+1	; 0x01
 39a:	84 0f       	add	r24, r20
 39c:	95 1f       	adc	r25, r21
 39e:	02 96       	adiw	r24, 0x02	; 2
 3a0:	91 83       	std	Z+1, r25	; 0x01
 3a2:	80 83       	st	Z, r24
 3a4:	8a 81       	ldd	r24, Y+2	; 0x02
 3a6:	9b 81       	ldd	r25, Y+3	; 0x03
 3a8:	93 83       	std	Z+3, r25	; 0x03
 3aa:	82 83       	std	Z+2, r24	; 0x02
 3ac:	21 15       	cp	r18, r1
 3ae:	31 05       	cpc	r19, r1
 3b0:	29 f4       	brne	.+10     	; 0x3bc <free+0x92>
 3b2:	f0 93 1c 01 	sts	0x011C, r31	; 0x80011c <__flp+0x1>
 3b6:	e0 93 1b 01 	sts	0x011B, r30	; 0x80011b <__flp>
 3ba:	3d c0       	rjmp	.+122    	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 3bc:	e9 01       	movw	r28, r18
 3be:	fb 83       	std	Y+3, r31	; 0x03
 3c0:	ea 83       	std	Y+2, r30	; 0x02
 3c2:	49 91       	ld	r20, Y+
 3c4:	59 91       	ld	r21, Y+
 3c6:	c4 0f       	add	r28, r20
 3c8:	d5 1f       	adc	r29, r21
 3ca:	ec 17       	cp	r30, r28
 3cc:	fd 07       	cpc	r31, r29
 3ce:	61 f4       	brne	.+24     	; 0x3e8 <free+0xbe>
 3d0:	80 81       	ld	r24, Z
 3d2:	91 81       	ldd	r25, Z+1	; 0x01
 3d4:	84 0f       	add	r24, r20
 3d6:	95 1f       	adc	r25, r21
 3d8:	02 96       	adiw	r24, 0x02	; 2
 3da:	e9 01       	movw	r28, r18
 3dc:	99 83       	std	Y+1, r25	; 0x01
 3de:	88 83       	st	Y, r24
 3e0:	82 81       	ldd	r24, Z+2	; 0x02
 3e2:	93 81       	ldd	r25, Z+3	; 0x03
 3e4:	9b 83       	std	Y+3, r25	; 0x03
 3e6:	8a 83       	std	Y+2, r24	; 0x02
 3e8:	e0 e0       	ldi	r30, 0x00	; 0
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	12 96       	adiw	r26, 0x02	; 2
 3ee:	8d 91       	ld	r24, X+
 3f0:	9c 91       	ld	r25, X
 3f2:	13 97       	sbiw	r26, 0x03	; 3
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	19 f0       	breq	.+6      	; 0x3fe <free+0xd4>
 3f8:	fd 01       	movw	r30, r26
 3fa:	dc 01       	movw	r26, r24
 3fc:	f7 cf       	rjmp	.-18     	; 0x3ec <free+0xc2>
 3fe:	8d 91       	ld	r24, X+
 400:	9c 91       	ld	r25, X
 402:	11 97       	sbiw	r26, 0x01	; 1
 404:	9d 01       	movw	r18, r26
 406:	2e 5f       	subi	r18, 0xFE	; 254
 408:	3f 4f       	sbci	r19, 0xFF	; 255
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
 40e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <__brkval>
 412:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <__brkval+0x1>
 416:	28 17       	cp	r18, r24
 418:	39 07       	cpc	r19, r25
 41a:	69 f4       	brne	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41c:	30 97       	sbiw	r30, 0x00	; 0
 41e:	29 f4       	brne	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__flp+0x1>
 424:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <__flp>
 428:	02 c0       	rjmp	.+4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42a:	13 82       	std	Z+3, r1	; 0x03
 42c:	12 82       	std	Z+2, r1	; 0x02
 42e:	b0 93 1a 01 	sts	0x011A, r27	; 0x80011a <__brkval+0x1>
 432:	a0 93 19 01 	sts	0x0119, r26	; 0x800119 <__brkval>
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <__do_global_dtors>:
 43c:	10 e0       	ldi	r17, 0x00	; 0
 43e:	c5 e3       	ldi	r28, 0x35	; 53
 440:	d0 e0       	ldi	r29, 0x00	; 0
 442:	04 c0       	rjmp	.+8      	; 0x44c <__do_global_dtors+0x10>
 444:	fe 01       	movw	r30, r28
 446:	0e 94 f7 00 	call	0x1ee	; 0x1ee <__tablejump2__>
 44a:	21 96       	adiw	r28, 0x01	; 1
 44c:	c6 33       	cpi	r28, 0x36	; 54
 44e:	d1 07       	cpc	r29, r17
 450:	c9 f7       	brne	.-14     	; 0x444 <__do_global_dtors+0x8>
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
