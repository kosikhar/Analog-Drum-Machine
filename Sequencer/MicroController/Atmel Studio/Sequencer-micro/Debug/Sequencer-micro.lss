
Sequencer-micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000c32  00000cc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800112  00800112  00000cd8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00000d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b8c  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f3c  00000000  00000000  00006c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000182a  00000000  00000000  00008bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  0000a3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000114a  00000000  00000000  0000abb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c2  00000000  00000000  0000bcfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e0  00000000  00000000  0000cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   8:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
   c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  28:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  2c:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_11>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_12>
  34:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_14>
  3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  54:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  58:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  5c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  60:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>

00000068 <__ctors_start>:
  68:	5c 01       	movw	r10, r24

0000006a <__ctors_end>:
  6a:	75 01       	movw	r14, r10

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 e3       	ldi	r30, 0x32	; 50
  80:	fc e0       	ldi	r31, 0x0C	; 12
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a2 31       	cpi	r26, 0x12	; 18
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>

0000008e <__do_clear_bss>:
  8e:	21 e0       	ldi	r18, 0x01	; 1
  90:	a2 e1       	ldi	r26, 0x12	; 18
  92:	b1 e0       	ldi	r27, 0x01	; 1
  94:	01 c0       	rjmp	.+2      	; 0x98 <.do_clear_bss_start>

00000096 <.do_clear_bss_loop>:
  96:	1d 92       	st	X+, r1

00000098 <.do_clear_bss_start>:
  98:	a8 35       	cpi	r26, 0x58	; 88
  9a:	b2 07       	cpc	r27, r18
  9c:	e1 f7       	brne	.-8      	; 0x96 <.do_clear_bss_loop>

0000009e <__do_global_ctors>:
  9e:	10 e0       	ldi	r17, 0x00	; 0
  a0:	c5 e3       	ldi	r28, 0x35	; 53
  a2:	d0 e0       	ldi	r29, 0x00	; 0
  a4:	04 c0       	rjmp	.+8      	; 0xae <__do_global_ctors+0x10>
  a6:	21 97       	sbiw	r28, 0x01	; 1
  a8:	fe 01       	movw	r30, r28
  aa:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__tablejump2__>
  ae:	c4 33       	cpi	r28, 0x34	; 52
  b0:	d1 07       	cpc	r29, r17
  b2:	c9 f7       	brne	.-14     	; 0xa6 <__do_global_ctors+0x8>
  b4:	0e 94 22 01 	call	0x244	; 0x244 <main>
  b8:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__do_global_dtors>

000000bc <__bad_interrupt>:
  bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_14>:

void disableShifting( void )
{
	//TIMSK2 is the TC2 Interrupt Mask Register
	//We will disable interrupt on compare match with OCR2A
	TIMSK2 &= ~(1 << OCIE2A);
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	2f 93       	push	r18
  cc:	3f 93       	push	r19
  ce:	4f 93       	push	r20
  d0:	5f 93       	push	r21
  d2:	6f 93       	push	r22
  d4:	7f 93       	push	r23
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	af 93       	push	r26
  dc:	bf 93       	push	r27
  de:	ef 93       	push	r30
  e0:	ff 93       	push	r31
  e2:	8b e2       	ldi	r24, 0x2B	; 43
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 81 04 	call	0x902	; 0x902 <_ZN5Timer14incrementTimerEv>
  ea:	ff 91       	pop	r31
  ec:	ef 91       	pop	r30
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	7f 91       	pop	r23
  f8:	6f 91       	pop	r22
  fa:	5f 91       	pop	r21
  fc:	4f 91       	pop	r20
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_12>:
 10c:	78 94       	sei
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <_Z20setUpTimerInterruptsv>:
 122:	ee e6       	ldi	r30, 0x6E	; 110
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
 12c:	89 e1       	ldi	r24, 0x19	; 25
 12e:	87 bd       	out	0x27, r24	; 39
 130:	92 e0       	ldi	r25, 0x02	; 2
 132:	94 bd       	out	0x24, r25	; 36
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	85 bd       	out	0x25, r24	; 37
 138:	ef e6       	ldi	r30, 0x6F	; 111
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	86 60       	ori	r24, 0x06	; 6
 140:	80 83       	st	Z, r24
 142:	20 e4       	ldi	r18, 0x40	; 64
 144:	36 e0       	ldi	r19, 0x06	; 6
 146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 14a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
 156:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
 15a:	89 e0       	ldi	r24, 0x09	; 9
 15c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 166:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 170:	78 94       	sei
 172:	08 95       	ret

00000174 <_Z25disableTimerOneInterruptsv>:
}

void disableTimerOneInterrupts( void )
{
	TIMSK1 &= ~((1 << OCIE1A) | (1 << OCIE2B));
 174:	ef e6       	ldi	r30, 0x6F	; 111
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	89 7f       	andi	r24, 0xF9	; 249
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret

00000180 <__vector_11>:
ISR( TIMER1_COMPB_vect, ISR_NOBLOCK)
{
}

ISR( TIMER1_COMPA_vect, ISR_NOBLOCK )
{
 180:	78 94       	sei
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	2f 93       	push	r18
 18e:	3f 93       	push	r19
 190:	4f 93       	push	r20
 192:	5f 93       	push	r21
 194:	6f 93       	push	r22
 196:	7f 93       	push	r23
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	disableTimerOneInterrupts();
 1a4:	0e 94 ba 00 	call	0x174	; 0x174 <_Z25disableTimerOneInterruptsv>
}
 1a8:	ff 91       	pop	r31
 1aa:	ef 91       	pop	r30
 1ac:	bf 91       	pop	r27
 1ae:	af 91       	pop	r26
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	7f 91       	pop	r23
 1b6:	6f 91       	pop	r22
 1b8:	5f 91       	pop	r21
 1ba:	4f 91       	pop	r20
 1bc:	3f 91       	pop	r19
 1be:	2f 91       	pop	r18
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <_Z9latchTaskv>:
	setUpTimerInterrupts();
}

//Task for latching
void latchTask( void ){
	latch.run();
 1ca:	82 e1       	ldi	r24, 0x12	; 18
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 e5 02 	call	0x5ca	; 0x5ca <_ZN5Latch3runEv>
 1d2:	08 95       	ret

000001d4 <_Z23sevenSegmentDisplayTaskv>:
}
//Task for Seven Segment display
void sevenSegmentDisplayTask( void ){
	sevenSegmentDisplay.run();
 1d4:	83 e3       	ldi	r24, 0x33	; 51
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN8SevenSeg3runEv>
 1dc:	08 95       	ret

000001de <_Z11triggerTaskv>:
}
//Task for triggering
void triggerTask( void ){
	trigger.run();
 1de:	8d e1       	ldi	r24, 0x1D	; 29
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <_ZN7Trigger3runEv>
 1e6:	08 95       	ret

000001e8 <_Z11counterTaskv>:
}
//Task for counting
void counterTask( void ){
	counter.run();
 1e8:	84 e1       	ldi	r24, 0x14	; 20
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN7Counter3runEv>
 1f0:	08 95       	ret

000001f2 <_Z10blinkyTaskv>:
}
//Task for blinky
void blinkyTask( void ){
	blinky.run();
 1f2:	84 e2       	ldi	r24, 0x24	; 36
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 83 02 	call	0x506	; 0x506 <_ZN6Blinky3runEv>
 1fa:	08 95       	ret

000001fc <_Z10setupTasksv>:
//initialize latching object. Controls latching output on shift registers
Latch latch;

void setupTasks( void ){
	//Setup objects
	trigger.getTimerRef( &timer );
 1fc:	6b e2       	ldi	r22, 0x2B	; 43
 1fe:	71 e0       	ldi	r23, 0x01	; 1
 200:	8d e1       	ldi	r24, 0x1D	; 29
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN7Trigger11getTimerRefEP5Timer>

	//Setup SevenSegmentDisplay object
	sevenSegmentDisplay.sevenSegInit( NUM_DISPLAYS, &timer);
 208:	4b e2       	ldi	r20, 0x2B	; 43
 20a:	51 e0       	ldi	r21, 0x01	; 1
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	83 e3       	ldi	r24, 0x33	; 51
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	0e 94 05 03 	call	0x60a	; 0x60a <_ZN8SevenSeg12sevenSegInitEhP5Timer>
		
	//Setup Counter
	counter.init( &timer, &sevenSegmentDisplay );
 216:	43 e3       	ldi	r20, 0x33	; 51
 218:	51 e0       	ldi	r21, 0x01	; 1
 21a:	6b e2       	ldi	r22, 0x2B	; 43
 21c:	71 e0       	ldi	r23, 0x01	; 1
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 af 02 	call	0x55e	; 0x55e <_ZN7Counter4initEP5TimerP8SevenSeg>
		
	//Setup Latch object with objects that require latching
	latch.getSevenSegRef( &sevenSegmentDisplay );
 226:	63 e3       	ldi	r22, 0x33	; 51
 228:	71 e0       	ldi	r23, 0x01	; 1
 22a:	82 e1       	ldi	r24, 0x12	; 18
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <_ZN5Latch14getSevenSegRefEP8SevenSeg>
		
	//Setup blinky with timer reference.
	blinky.getTimerRef( &timer );
 232:	6b e2       	ldi	r22, 0x2B	; 43
 234:	71 e0       	ldi	r23, 0x01	; 1
 236:	84 e2       	ldi	r24, 0x24	; 36
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_ZN6Blinky11getTimerRefEP5Timer>
		
	//Enables global timer
	setUpTimerInterrupts();
 23e:	0e 94 91 00 	call	0x122	; 0x122 <_Z20setUpTimerInterruptsv>
 242:	08 95       	ret

00000244 <main>:
 * Author : Koltin Kosik-Harvey
 */
#include "Tasks/setupTasks.h"

int main(void)
{	
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	63 97       	sbiw	r28, 0x13	; 19
 24e:	0f b6       	in	r0, 0x3f	; 63
 250:	f8 94       	cli
 252:	de bf       	out	0x3e, r29	; 62
 254:	0f be       	out	0x3f, r0	; 63
 256:	cd bf       	out	0x3d, r28	; 61
	//Setup Tasks --> See setupTasks.h
	setupTasks();
 258:	0e 94 fe 00 	call	0x1fc	; 0x1fc <_Z10setupTasksv>
	
	//Initialize task manager
	TaskManager taskManager( &timer );
 25c:	6b e2       	ldi	r22, 0x2B	; 43
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	ce 01       	movw	r24, r28
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	0e 94 c2 03 	call	0x784	; 0x784 <_ZN11TaskManagerC1EP5Timer>
	
	//Add tasks with priority 0-250. 0 is real time. 251 never runs.
	taskManager.addTask( latchTask , 32);
 268:	40 e2       	ldi	r20, 0x20	; 32
 26a:	65 ee       	ldi	r22, 0xE5	; 229
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( sevenSegmentDisplayTask, 128);
 276:	40 e8       	ldi	r20, 0x80	; 128
 278:	6a ee       	ldi	r22, 0xEA	; 234
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	ce 01       	movw	r24, r28
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( triggerTask,  32);
 284:	40 e2       	ldi	r20, 0x20	; 32
 286:	6f ee       	ldi	r22, 0xEF	; 239
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	ce 01       	movw	r24, r28
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( counterTask, 128);
 292:	40 e8       	ldi	r20, 0x80	; 128
 294:	64 ef       	ldi	r22, 0xF4	; 244
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	ce 01       	movw	r24, r28
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN11TaskManager7addTaskEPFvvEh>
	taskManager.addTask( blinkyTask, 128);
 2a0:	40 e8       	ldi	r20, 0x80	; 128
 2a2:	69 ef       	ldi	r22, 0xF9	; 249
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	ce 01       	movw	r24, r28
 2a8:	01 96       	adiw	r24, 0x01	; 1
 2aa:	0e 94 c9 03 	call	0x792	; 0x792 <_ZN11TaskManager7addTaskEPFvvEh>
	
    while (1) 
    {
		taskManager.runTasks();
 2ae:	ce 01       	movw	r24, r28
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <_ZN11TaskManager8runTasksEv>
 2b6:	fb cf       	rjmp	.-10     	; 0x2ae <main+0x6a>

000002b8 <_GLOBAL__sub_I_sevenSegmentDisplay>:
#include "Trigger.h"
#include "Counter.h"
#include "Latch.h"

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;
 2b8:	83 e3       	ldi	r24, 0x33	; 51
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN8SevenSegC1Ev>

//Define a pointer to a timer object.
Timer timer;
 2c0:	8b e2       	ldi	r24, 0x2B	; 43
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 77 04 	call	0x8ee	; 0x8ee <_ZN5TimerC1Ev>

//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;
 2c8:	84 e2       	ldi	r24, 0x24	; 36
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 75 02 	call	0x4ea	; 0x4ea <_ZN6BlinkyC1Ev>

//Initialize the trigger object
Trigger trigger;
 2d0:	8d e1       	ldi	r24, 0x1D	; 29
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 20 04 	call	0x840	; 0x840 <_ZN7TriggerC1Ev>

//Initialize the counter object
//Task counts to 100 then resets.
Counter counter;
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN7CounterC1Ev>

//initialize latching object. Controls latching output on shift registers
Latch latch;
 2e0:	82 e1       	ldi	r24, 0x12	; 18
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <_ZN5LatchC1Ev>
 2e8:	08 95       	ret

000002ea <_GLOBAL__sub_D_sevenSegmentDisplay>:
 2ea:	82 e1       	ldi	r24, 0x12	; 18
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <_ZN5LatchD1Ev>
//Initialize the trigger object
Trigger trigger;

//Initialize the counter object
//Task counts to 100 then resets.
Counter counter;
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 df 02 	call	0x5be	; 0x5be <_ZN7CounterD1Ev>
//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;

//Initialize the trigger object
Trigger trigger;
 2fa:	8d e1       	ldi	r24, 0x1D	; 29
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN7TriggerD1Ev>
//Define a pointer to a timer object.
Timer timer;

//Initialize the blinky object
//Blinks an LED on an off.
Blinky blinky;
 302:	84 e2       	ldi	r24, 0x24	; 36
 304:	91 e0       	ldi	r25, 0x01	; 1
 306:	0e 94 a7 02 	call	0x54e	; 0x54e <_ZN6BlinkyD1Ev>

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;

//Define a pointer to a timer object.
Timer timer;
 30a:	8b e2       	ldi	r24, 0x2B	; 43
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 b0 04 	call	0x960	; 0x960 <_ZN5TimerD1Ev>
#include "Trigger.h"
#include "Counter.h"
#include "Latch.h"

//Define a pointer to a seven segment display object.
SevenSeg sevenSegmentDisplay;
 312:	83 e3       	ldi	r24, 0x33	; 51
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 bf 03 	call	0x77e	; 0x77e <_ZN8SevenSegD1Ev>
 31a:	08 95       	ret

0000031c <_Znwj>:

 #include "memory.h"

 void * operator new(size_t size)
 {
	 return malloc(size);
 31c:	0e 94 df 04 	call	0x9be	; 0x9be <malloc>
 }
 320:	08 95       	ret

00000322 <_ZN3Pin17setDirectionInputEv>:
//ANDs the pinNumber mask with the input pin register
//ie 00010000 & 11110000 = 00010000
uint8_t Pin::read( void )
{
	return ( pinNumber & *pin_register );
}
 322:	dc 01       	movw	r26, r24
 324:	ed 91       	ld	r30, X+
 326:	fc 91       	ld	r31, X
 328:	11 97       	sbiw	r26, 0x01	; 1
 32a:	90 81       	ld	r25, Z
 32c:	16 96       	adiw	r26, 0x06	; 6
 32e:	8c 91       	ld	r24, X
 330:	80 95       	com	r24
 332:	89 23       	and	r24, r25
 334:	80 83       	st	Z, r24
 336:	08 95       	ret

00000338 <_ZN3Pin7setHighEv>:
	}
}

//Sets the pin high
void Pin::setHigh( void )
{
 338:	dc 01       	movw	r26, r24
	//set the pin high
	*port_register |= (1 << pinNumber);
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	ed 91       	ld	r30, X+
 33e:	fc 91       	ld	r31, X
 340:	13 97       	sbiw	r26, 0x03	; 3
 342:	40 81       	ld	r20, Z
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	c9 01       	movw	r24, r18
 34a:	16 96       	adiw	r26, 0x06	; 6
 34c:	0c 90       	ld	r0, X
 34e:	02 c0       	rjmp	.+4      	; 0x354 <_ZN3Pin7setHighEv+0x1c>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <_ZN3Pin7setHighEv+0x18>
 358:	84 2b       	or	r24, r20
 35a:	80 83       	st	Z, r24
 35c:	08 95       	ret

0000035e <_ZN3Pin6setLowEv>:
}

//Sets the pin low
void Pin::setLow( void )
{
	*port_register &= ~(1 << pinNumber);
 35e:	dc 01       	movw	r26, r24
 360:	12 96       	adiw	r26, 0x02	; 2
 362:	ed 91       	ld	r30, X+
 364:	fc 91       	ld	r31, X
 366:	13 97       	sbiw	r26, 0x03	; 3
 368:	40 81       	ld	r20, Z
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	b9 01       	movw	r22, r18
 370:	16 96       	adiw	r26, 0x06	; 6
 372:	0c 90       	ld	r0, X
 374:	02 c0       	rjmp	.+4      	; 0x37a <_ZN3Pin6setLowEv+0x1c>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	0a 94       	dec	r0
 37c:	e2 f7       	brpl	.-8      	; 0x376 <_ZN3Pin6setLowEv+0x18>
 37e:	cb 01       	movw	r24, r22
 380:	80 95       	com	r24
 382:	84 23       	and	r24, r20
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <_ZN3Pin18setDirectionOutputEv>:
{	
	*data_direction_reg &= ~pinNumber;
}

void Pin::setDirectionOutput( void )
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
	//Set the pin to low
	this->setLow();
 38e:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>

	//Set data direction to output for the pin
	*data_direction_reg |= pinNumber;
 392:	e8 81       	ld	r30, Y
 394:	f9 81       	ldd	r31, Y+1	; 0x01
 396:	90 81       	ld	r25, Z
 398:	8e 81       	ldd	r24, Y+6	; 0x06
 39a:	89 2b       	or	r24, r25
 39c:	80 83       	st	Z, r24
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <_ZN3PinC1EhPVhh>:
*/

#include "Pin.h"

// default constructor
Pin::Pin(uint8_t PIN_NUMBER, volatile uint8_t * PortRegister, uint8_t DIRECTION)
 3a4:	fc 01       	movw	r30, r24
{
	pin_register = PortRegister - 2;
 3a6:	ca 01       	movw	r24, r20
 3a8:	02 97       	sbiw	r24, 0x02	; 2
 3aa:	95 83       	std	Z+5, r25	; 0x05
 3ac:	84 83       	std	Z+4, r24	; 0x04
	data_direction_reg = PortRegister - 1;
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	91 83       	std	Z+1, r25	; 0x01
 3b2:	80 83       	st	Z, r24
	port_register = PortRegister;
 3b4:	53 83       	std	Z+3, r21	; 0x03
 3b6:	42 83       	std	Z+2, r20	; 0x02
	
	//Stores pin number as a mask. Makes it easier for operations like setting the pin value
	pinNumber = (1 << PIN_NUMBER);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <_ZN3PinC1EhPVhh+0x1a>
 3bc:	88 0f       	add	r24, r24
 3be:	6a 95       	dec	r22
 3c0:	ea f7       	brpl	.-6      	; 0x3bc <_ZN3PinC1EhPVhh+0x18>
 3c2:	86 83       	std	Z+6, r24	; 0x06

	if ( DIRECTION == OUTPUT )
 3c4:	21 30       	cpi	r18, 0x01	; 1
 3c6:	21 f4       	brne	.+8      	; 0x3d0 <_ZN3PinC1EhPVhh+0x2c>
	{
		this->setDirectionOutput();
 3c8:	cf 01       	movw	r24, r30
 3ca:	0e 94 c4 01 	call	0x388	; 0x388 <_ZN3Pin18setDirectionOutputEv>
 3ce:	08 95       	ret
	} else {
		this->setDirectionInput();
 3d0:	cf 01       	movw	r24, r30
 3d2:	0e 94 91 01 	call	0x322	; 0x322 <_ZN3Pin17setDirectionInputEv>
 3d6:	08 95       	ret

000003d8 <_ZN13ShiftRegisterC1Ev>:


#include "ShiftRegister.h"

// Constructor
ShiftRegister::ShiftRegister()
 3d8:	08 95       	ret

000003da <_ZN13ShiftRegisterC1EP3PinS1_S1_>:
{
	
}

ShiftRegister::ShiftRegister( Pin * shift, Pin * latch, Pin * serial )
 3da:	fc 01       	movw	r30, r24
{
	shiftPin = shift;
 3dc:	74 83       	std	Z+4, r23	; 0x04
 3de:	63 83       	std	Z+3, r22	; 0x03
	latchPin = latch;
 3e0:	56 83       	std	Z+6, r21	; 0x06
 3e2:	45 83       	std	Z+5, r20	; 0x05
	serialPin = serial;
 3e4:	30 87       	std	Z+8, r19	; 0x08
 3e6:	27 83       	std	Z+7, r18	; 0x07
 3e8:	08 95       	ret

000003ea <_ZN13ShiftRegister11singleShiftEv>:
}

void ShiftRegister::singleShift( void )
{
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	ec 01       	movw	r28, r24
	//Shift single bit in.
	shiftPin->setLow();
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	9c 81       	ldd	r25, Y+4	; 0x04
 3f4:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>
	//wait
	timer->wait_1us();
 3f8:	88 81       	ld	r24, Y
 3fa:	99 81       	ldd	r25, Y+1	; 0x01
 3fc:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Timer8wait_1usEv>
	//Set shift high
	shiftPin->setHigh();
 400:	8b 81       	ldd	r24, Y+3	; 0x03
 402:	9c 81       	ldd	r25, Y+4	; 0x04
 404:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN3Pin7setHighEv>
	//wait
	timer->wait_1us();
 408:	88 81       	ld	r24, Y
 40a:	99 81       	ldd	r25, Y+1	; 0x01
 40c:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Timer8wait_1usEv>
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <_ZN13ShiftRegister5latchEv>:

void ShiftRegister::latch( void )
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	ec 01       	movw	r28, r24
	//Latch output
	latchPin->setLow();
 41c:	8d 81       	ldd	r24, Y+5	; 0x05
 41e:	9e 81       	ldd	r25, Y+6	; 0x06
 420:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>
	//wait
	timer->wait_1us();
 424:	88 81       	ld	r24, Y
 426:	99 81       	ldd	r25, Y+1	; 0x01
 428:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Timer8wait_1usEv>
	//Set latch high
	latchPin->setHigh();
 42c:	8d 81       	ldd	r24, Y+5	; 0x05
 42e:	9e 81       	ldd	r25, Y+6	; 0x06
 430:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN3Pin7setHighEv>
}
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <_ZN13ShiftRegister17getTimerReferenceEP5Timer>:

void ShiftRegister::getTimerReference( Timer * ptr )
{
	timer = ptr;
 43a:	fc 01       	movw	r30, r24
 43c:	71 83       	std	Z+1, r23	; 0x01
 43e:	60 83       	st	Z, r22
 440:	08 95       	ret

00000442 <_ZN13ShiftRegisterD1Ev>:
} //getTimerReference

// default destructor
ShiftRegister::~ShiftRegister()
 442:	08 95       	ret

00000444 <_ZN18ShiftRegister_SIPOC1Ev>:
*/

#include "ShiftRegister_SIPO.h"

//Constructs object
ShiftRegister_SIPO::ShiftRegister_SIPO() : ShiftRegister()
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	ec 01       	movw	r28, r24
 44a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <_ZN13ShiftRegisterC1Ev>
{
	//start off with output byte 0
	output_byte = 0;
 44e:	19 86       	std	Y+9, r1	; 0x09

} //ShiftRegister_SIPO
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	08 95       	ret

00000456 <_ZN18ShiftRegister_SIPOC1EP3PinS1_S1_>:

//Constructs object with pinout
ShiftRegister_SIPO::ShiftRegister_SIPO( Pin * shift, Pin * latch, Pin * serial ) : ShiftRegister( shift, latch, serial )
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	ec 01       	movw	r28, r24
 45c:	0e 94 ed 01 	call	0x3da	; 0x3da <_ZN13ShiftRegisterC1EP3PinS1_S1_>
{
	//Start off with output byte 0
	output_byte = 0;
 460:	19 86       	std	Y+9, r1	; 0x09
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <_ZN18ShiftRegister_SIPO9shiftBitsEv>:

//Shifts in a bit into the shift register.
void ShiftRegister_SIPO::shiftBits( void )
{		
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
	//Starting shifting with shift/serial/latch at 0
	shiftPin->setLow();
 472:	8b 81       	ldd	r24, Y+3	; 0x03
 474:	9c 81       	ldd	r25, Y+4	; 0x04
 476:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>
	latchPin->setLow();
 47a:	8d 81       	ldd	r24, Y+5	; 0x05
 47c:	9e 81       	ldd	r25, Y+6	; 0x06
 47e:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>
	serialPin->setLow();
 482:	8f 81       	ldd	r24, Y+7	; 0x07
 484:	98 85       	ldd	r25, Y+8	; 0x08
 486:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>

	//Wait 1us
	timer->wait_1us();
 48a:	88 81       	ld	r24, Y
 48c:	99 81       	ldd	r25, Y+1	; 0x01
 48e:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Timer8wait_1usEv>
		
	for ( int i=0; i < 8; i++){
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0
			
		//Load serial pin with bit
			
		//If the bit needs to be set to 1...
		if( output_byte & (1 << i) ){
 496:	29 85       	ldd	r18, Y+9	; 0x09
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	00 2e       	mov	r0, r16
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x3a>
 49e:	35 95       	asr	r19
 4a0:	27 95       	ror	r18
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x36>
 4a6:	20 ff       	sbrs	r18, 0
 4a8:	05 c0       	rjmp	.+10     	; 0x4b4 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x4c>

			serialPin->setHigh();
 4aa:	8f 81       	ldd	r24, Y+7	; 0x07
 4ac:	98 85       	ldd	r25, Y+8	; 0x08
 4ae:	0e 94 9c 01 	call	0x338	; 0x338 <_ZN3Pin7setHighEv>
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x54>
				
		//Else set to 0
		} else {
			
			serialPin->setLow();
 4b4:	8f 81       	ldd	r24, Y+7	; 0x07
 4b6:	98 85       	ldd	r25, Y+8	; 0x08
 4b8:	0e 94 af 01 	call	0x35e	; 0x35e <_ZN3Pin6setLowEv>
		}
			
		timer->wait_1us();
 4bc:	88 81       	ld	r24, Y
 4be:	99 81       	ldd	r25, Y+1	; 0x01
 4c0:	0e 94 a7 04 	call	0x94e	; 0x94e <_ZN5Timer8wait_1usEv>
			
		this->singleShift();
 4c4:	ce 01       	movw	r24, r28
 4c6:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN13ShiftRegister11singleShiftEv>
	serialPin->setLow();

	//Wait 1us
	timer->wait_1us();
		
	for ( int i=0; i < 8; i++){
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
 4ce:	08 30       	cpi	r16, 0x08	; 8
 4d0:	11 05       	cpc	r17, r1
 4d2:	09 f7       	brne	.-62     	; 0x496 <_ZN18ShiftRegister_SIPO9shiftBitsEv+0x2e>
		timer->wait_1us();
			
		this->singleShift();
	}
	
} //ShiftBits
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
 4dc:	08 95       	ret

000004de <_ZN18ShiftRegister_SIPO8loadByteEh>:

void ShiftRegister_SIPO::loadByte( uint8_t byteToLoad )
{
	output_byte = byteToLoad;
 4de:	fc 01       	movw	r30, r24
 4e0:	61 87       	std	Z+9, r22	; 0x09
 4e2:	08 95       	ret

000004e4 <_ZN18ShiftRegister_SIPOD1Ev>:
}

// default destructor
ShiftRegister_SIPO::~ShiftRegister_SIPO()
 4e4:	0e 94 21 02 	call	0x442	; 0x442 <_ZN13ShiftRegisterD1Ev>
 4e8:	08 95       	ret

000004ea <_ZN6BlinkyC1Ev>:

//Initialize the pins. 
Blinky::Blinky()
{
	//Set LED on port D data direction to output
	DDRD |= (1 << PORTD0);
 4ea:	50 9a       	sbi	0x0a, 0	; 10
		
	//Used for the "Status LED"
	DDRD |= (1 << PORTD1);
 4ec:	51 9a       	sbi	0x0a, 1	; 10
	
	//Used for Task - "Blinky". Indicates next value of LED
	LEDValueNext = 1;
 4ee:	21 e0       	ldi	r18, 0x01	; 1
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
	
	//initialize time stamp to zero
	timeStamp = 0;
 4f4:	13 82       	std	Z+3, r1	; 0x03
 4f6:	14 82       	std	Z+4, r1	; 0x04
 4f8:	15 82       	std	Z+5, r1	; 0x05
 4fa:	16 82       	std	Z+6, r1	; 0x06
 4fc:	08 95       	ret

000004fe <_ZN6Blinky11getTimerRefEP5Timer>:
	
} //Blinky

void Blinky::getTimerRef(Timer * timerPtr)
{
	timer = timerPtr;
 4fe:	fc 01       	movw	r30, r24
 500:	72 83       	std	Z+2, r23	; 0x02
 502:	61 83       	std	Z+1, r22	; 0x01
 504:	08 95       	ret

00000506 <_ZN6Blinky3runEv>:
}

//Runs the Blinky task. Blinks led on an off. 
void Blinky::run()
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
	if ( timer->elapsed_millis( timeStamp ) > LED_UPDATE ) {
 50c:	4b 81       	ldd	r20, Y+3	; 0x03
 50e:	5c 81       	ldd	r21, Y+4	; 0x04
 510:	6d 81       	ldd	r22, Y+5	; 0x05
 512:	7e 81       	ldd	r23, Y+6	; 0x06
 514:	89 81       	ldd	r24, Y+1	; 0x01
 516:	9a 81       	ldd	r25, Y+2	; 0x02
 518:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Timer14elapsed_millisEm>
 51c:	69 38       	cpi	r22, 0x89	; 137
 51e:	73 41       	sbci	r23, 0x13	; 19
 520:	81 05       	cpc	r24, r1
 522:	91 05       	cpc	r25, r1
 524:	88 f0       	brcs	.+34     	; 0x548 <_ZN6Blinky3runEv+0x42>
		
		//Update time stamp
		timeStamp = timer->millis();
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN5Timer6millisEv>
 52e:	6b 83       	std	Y+3, r22	; 0x03
 530:	7c 83       	std	Y+4, r23	; 0x04
 532:	8d 83       	std	Y+5, r24	; 0x05
 534:	9e 83       	std	Y+6, r25	; 0x06
		
		if( LEDValueNext == 1 ){
 536:	88 81       	ld	r24, Y
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	19 f4       	brne	.+6      	; 0x542 <_ZN6Blinky3runEv+0x3c>
			//Set Test LED to OFF
			PORTD |= (1 << PORTD0);
 53c:	58 9a       	sbi	0x0b, 0	; 11
			LEDValueNext = 0;
 53e:	18 82       	st	Y, r1
 540:	03 c0       	rjmp	.+6      	; 0x548 <_ZN6Blinky3runEv+0x42>
			
		} else {
			//Set Test LED to ON
			PORTD &= ~(1 << PORTD0);
 542:	58 98       	cbi	0x0b, 0	; 11
			LEDValueNext = 1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	88 83       	st	Y, r24
		}
	}
}
 548:	df 91       	pop	r29
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <_ZN6BlinkyD1Ev>:

// default destructor
Blinky::~Blinky()
 54e:	08 95       	ret

00000550 <_ZN7CounterC1Ev>:

// default constructor
Counter::Counter()
{
	//initialize counter to zero
	counterValue = 0;
 550:	fc 01       	movw	r30, r24
 552:	10 82       	st	Z, r1
	
	//Initialize timeStamp to zero
	timeStamp = 0;
 554:	15 82       	std	Z+5, r1	; 0x05
 556:	16 82       	std	Z+6, r1	; 0x06
 558:	17 82       	std	Z+7, r1	; 0x07
 55a:	10 86       	std	Z+8, r1	; 0x08
 55c:	08 95       	ret

0000055e <_ZN7Counter4initEP5TimerP8SevenSeg>:
	
} //counter

void Counter::init( Timer * timerPtr, SevenSeg * sevenSegPtr)
{
	timer = timerPtr;
 55e:	fc 01       	movw	r30, r24
 560:	72 83       	std	Z+2, r23	; 0x02
 562:	61 83       	std	Z+1, r22	; 0x01
	
	sevenSeg = sevenSegPtr;
 564:	54 83       	std	Z+4, r21	; 0x04
 566:	43 83       	std	Z+3, r20	; 0x03
 568:	08 95       	ret

0000056a <_ZN7Counter3runEv>:
}

void Counter::run( void )
{
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	ec 01       	movw	r28, r24
		
	if( timer->elapsed_millis(timeStamp) > COUNTER_UPDATE ){
 570:	4d 81       	ldd	r20, Y+5	; 0x05
 572:	5e 81       	ldd	r21, Y+6	; 0x06
 574:	6f 81       	ldd	r22, Y+7	; 0x07
 576:	78 85       	ldd	r23, Y+8	; 0x08
 578:	89 81       	ldd	r24, Y+1	; 0x01
 57a:	9a 81       	ldd	r25, Y+2	; 0x02
 57c:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Timer14elapsed_millisEm>
 580:	65 36       	cpi	r22, 0x65	; 101
 582:	71 05       	cpc	r23, r1
 584:	81 05       	cpc	r24, r1
 586:	91 05       	cpc	r25, r1
 588:	b8 f0       	brcs	.+46     	; 0x5b8 <_ZN7Counter3runEv+0x4e>
				
		//Update timestamp
		timeStamp = timer->millis();
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN5Timer6millisEv>
 592:	6d 83       	std	Y+5, r22	; 0x05
 594:	7e 83       	std	Y+6, r23	; 0x06
 596:	8f 83       	std	Y+7, r24	; 0x07
 598:	98 87       	std	Y+8, r25	; 0x08
				
		//increment counter
		counterValue++;
 59a:	88 81       	ld	r24, Y
 59c:	8f 5f       	subi	r24, 0xFF	; 255
				
		//Reset timer at 100.
		if ( counterValue >= 100 ){
 59e:	84 36       	cpi	r24, 0x64	; 100
 5a0:	10 f4       	brcc	.+4      	; 0x5a6 <_ZN7Counter3runEv+0x3c>
				
		//Update timestamp
		timeStamp = timer->millis();
				
		//increment counter
		counterValue++;
 5a2:	88 83       	st	Y, r24
 5a4:	01 c0       	rjmp	.+2      	; 0x5a8 <_ZN7Counter3runEv+0x3e>
				
		//Reset timer at 100.
		if ( counterValue >= 100 ){
			counterValue = 0;
 5a6:	18 82       	st	Y, r1
		}
		
		//Update the content for the sevenSeg to print
		sevenSeg->contentToPrint = counterValue;
 5a8:	eb 81       	ldd	r30, Y+3	; 0x03
 5aa:	fc 81       	ldd	r31, Y+4	; 0x04
 5ac:	88 81       	ld	r24, Y
 5ae:	84 87       	std	Z+12, r24	; 0x0c
		
		//flag that the counter has been updated, and that seven seg has content to print
		sevenSeg->newContentToPrint = true;	
 5b0:	eb 81       	ldd	r30, Y+3	; 0x03
 5b2:	fc 81       	ldd	r31, Y+4	; 0x04
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	83 87       	std	Z+11, r24	; 0x0b
	}
		
}
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <_ZN7CounterD1Ev>:

// default destructor
Counter::~Counter()
 5be:	08 95       	ret

000005c0 <_ZN5LatchC1Ev>:


#include "Latch.h"

// default constructor
Latch::Latch()
 5c0:	08 95       	ret

000005c2 <_ZN5Latch14getSevenSegRefEP8SevenSeg>:
{
} //Latch

void Latch::getSevenSegRef( SevenSeg * sevenSegPtr )
{
	sevenSegmentDisplay = sevenSegPtr;
 5c2:	fc 01       	movw	r30, r24
 5c4:	71 83       	std	Z+1, r23	; 0x01
 5c6:	60 83       	st	Z, r22
 5c8:	08 95       	ret

000005ca <_ZN5Latch3runEv>:
}

void Latch::run( void )
{
	if( sevenSegmentDisplay->shiftComplete == true ){
 5ca:	dc 01       	movw	r26, r24
 5cc:	ed 91       	ld	r30, X+
 5ce:	fc 91       	ld	r31, X
 5d0:	11 97       	sbiw	r26, 0x01	; 1
 5d2:	22 85       	ldd	r18, Z+10	; 0x0a
 5d4:	21 30       	cpi	r18, 0x01	; 1
 5d6:	29 f4       	brne	.+10     	; 0x5e2 <_ZN5Latch3runEv+0x18>
		
		//Reset the shift complete flag
		sevenSegmentDisplay->shiftComplete = false;
 5d8:	12 86       	std	Z+10, r1	; 0x0a
		
		//Latch shift registers. Output should show on seven segment display
		sevenSegmentDisplay->latch();
 5da:	8d 91       	ld	r24, X+
 5dc:	9c 91       	ld	r25, X
 5de:	0e 94 0b 02 	call	0x416	; 0x416 <_ZN13ShiftRegister5latchEv>
 5e2:	08 95       	ret

000005e4 <_ZN5LatchD1Ev>:
	}
}

// default destructor
Latch::~Latch()
 5e4:	08 95       	ret

000005e6 <_ZN8SevenSegC1Ev>:
	//Shift in the Byte
	this->shiftBits();
	
	//latch output
	this->latch();
}
 5e6:	cf 93       	push	r28
 5e8:	df 93       	push	r29
 5ea:	ec 01       	movw	r28, r24
 5ec:	0e 94 22 02 	call	0x444	; 0x444 <_ZN18ShiftRegister_SIPOC1Ev>
 5f0:	8b e0       	ldi	r24, 0x0B	; 11
 5f2:	e6 e0       	ldi	r30, 0x06	; 6
 5f4:	f1 e0       	ldi	r31, 0x01	; 1
 5f6:	de 01       	movw	r26, r28
 5f8:	54 96       	adiw	r26, 0x14	; 20
 5fa:	01 90       	ld	r0, Z+
 5fc:	0d 92       	st	X+, r0
 5fe:	8a 95       	dec	r24
 600:	e1 f7       	brne	.-8      	; 0x5fa <_ZN8SevenSegC1Ev+0x14>
 602:	1c 86       	std	Y+12, r1	; 0x0c
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <_ZN8SevenSeg12sevenSegInitEhP5Timer>:
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	2a 97       	sbiw	r28, 0x0a	; 10
 61c:	0f b6       	in	r0, 0x3f	; 63
 61e:	f8 94       	cli
 620:	de bf       	out	0x3e, r29	; 62
 622:	0f be       	out	0x3f, r0	; 63
 624:	cd bf       	out	0x3d, r28	; 61
 626:	8c 01       	movw	r16, r24
 628:	f6 2e       	mov	r15, r22
 62a:	ba 01       	movw	r22, r20
 62c:	0e 94 1d 02 	call	0x43a	; 0x43a <_ZN13ShiftRegister17getTimerReferenceEP5Timer>
 630:	f8 01       	movw	r30, r16
 632:	f3 8a       	std	Z+19, r15	; 0x13
 634:	12 86       	std	Z+10, r1	; 0x0a
 636:	13 86       	std	Z+11, r1	; 0x0b
 638:	87 e0       	ldi	r24, 0x07	; 7
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 8e 01 	call	0x31c	; 0x31c <_Znwj>
 640:	7c 01       	movw	r14, r24
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	48 e2       	ldi	r20, 0x28	; 40
 646:	50 e0       	ldi	r21, 0x00	; 0
 648:	62 e0       	ldi	r22, 0x02	; 2
 64a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN3PinC1EhPVhh>
 64e:	f8 01       	movw	r30, r16
 650:	f6 86       	std	Z+14, r15	; 0x0e
 652:	e5 86       	std	Z+13, r14	; 0x0d
 654:	87 e0       	ldi	r24, 0x07	; 7
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 8e 01 	call	0x31c	; 0x31c <_Znwj>
 65c:	7c 01       	movw	r14, r24
 65e:	21 e0       	ldi	r18, 0x01	; 1
 660:	48 e2       	ldi	r20, 0x28	; 40
 662:	50 e0       	ldi	r21, 0x00	; 0
 664:	61 e0       	ldi	r22, 0x01	; 1
 666:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN3PinC1EhPVhh>
 66a:	f8 01       	movw	r30, r16
 66c:	f0 8a       	std	Z+16, r15	; 0x10
 66e:	e7 86       	std	Z+15, r14	; 0x0f
 670:	87 e0       	ldi	r24, 0x07	; 7
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 8e 01 	call	0x31c	; 0x31c <_Znwj>
 678:	7c 01       	movw	r14, r24
 67a:	21 e0       	ldi	r18, 0x01	; 1
 67c:	48 e2       	ldi	r20, 0x28	; 40
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	60 e0       	ldi	r22, 0x00	; 0
 682:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <_ZN3PinC1EhPVhh>
 686:	f8 01       	movw	r30, r16
 688:	f2 8a       	std	Z+18, r15	; 0x12
 68a:	e1 8a       	std	Z+17, r14	; 0x11
 68c:	47 85       	ldd	r20, Z+15	; 0x0f
 68e:	50 89       	ldd	r21, Z+16	; 0x10
 690:	65 85       	ldd	r22, Z+13	; 0x0d
 692:	76 85       	ldd	r23, Z+14	; 0x0e
 694:	97 01       	movw	r18, r14
 696:	ce 01       	movw	r24, r28
 698:	01 96       	adiw	r24, 0x01	; 1
 69a:	0e 94 2b 02 	call	0x456	; 0x456 <_ZN18ShiftRegister_SIPOC1EP3PinS1_S1_>
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN18ShiftRegister_SIPOD1Ev>
 6a6:	2a 96       	adiw	r28, 0x0a	; 10
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	08 95       	ret

000006c0 <_ZN8SevenSeg12shiftInBytesEPh>:
 6c0:	df 92       	push	r13
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	fc 01       	movw	r30, r24
 6d0:	23 89       	ldd	r18, Z+19	; 0x13
 6d2:	22 23       	and	r18, r18
 6d4:	19 f1       	breq	.+70     	; 0x71c <_ZN8SevenSeg12shiftInBytesEPh+0x5c>
 6d6:	8c 01       	movw	r16, r24
 6d8:	c6 2f       	mov	r28, r22
 6da:	d7 2f       	mov	r29, r23
 6dc:	e1 2c       	mov	r14, r1
 6de:	f1 2c       	mov	r15, r1
 6e0:	0f 2e       	mov	r0, r31
 6e2:	fa e0       	ldi	r31, 0x0A	; 10
 6e4:	df 2e       	mov	r13, r31
 6e6:	f0 2d       	mov	r31, r0
 6e8:	fe 01       	movw	r30, r28
 6ea:	88 81       	ld	r24, Y
 6ec:	8a 30       	cpi	r24, 0x0A	; 10
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <_ZN8SevenSeg12shiftInBytesEPh+0x32>
 6f0:	d8 82       	st	Y, r13
 6f2:	21 96       	adiw	r28, 0x01	; 1
 6f4:	80 81       	ld	r24, Z
 6f6:	f8 01       	movw	r30, r16
 6f8:	e8 0f       	add	r30, r24
 6fa:	f1 1d       	adc	r31, r1
 6fc:	64 89       	ldd	r22, Z+20	; 0x14
 6fe:	c8 01       	movw	r24, r16
 700:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN18ShiftRegister_SIPO8loadByteEh>
 704:	c8 01       	movw	r24, r16
 706:	0e 94 34 02 	call	0x468	; 0x468 <_ZN18ShiftRegister_SIPO9shiftBitsEv>
 70a:	ff ef       	ldi	r31, 0xFF	; 255
 70c:	ef 1a       	sub	r14, r31
 70e:	ff 0a       	sbc	r15, r31
 710:	f8 01       	movw	r30, r16
 712:	83 89       	ldd	r24, Z+19	; 0x13
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	e8 16       	cp	r14, r24
 718:	f9 06       	cpc	r15, r25
 71a:	34 f3       	brlt	.-52     	; 0x6e8 <_ZN8SevenSeg12shiftInBytesEPh+0x28>
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	08 95       	ret

0000072c <_ZN8SevenSeg3runEv>:
 72c:	cf 93       	push	r28
 72e:	df 93       	push	r29
 730:	fc 01       	movw	r30, r24
 732:	23 85       	ldd	r18, Z+11	; 0x0b
 734:	21 30       	cpi	r18, 0x01	; 1
 736:	01 f5       	brne	.+64     	; 0x778 <_ZN8SevenSeg3runEv+0x4c>
 738:	ec 01       	movw	r28, r24
 73a:	13 86       	std	Z+11, r1	; 0x0b
 73c:	84 85       	ldd	r24, Z+12	; 0x0c
 73e:	9d ec       	ldi	r25, 0xCD	; 205
 740:	89 9f       	mul	r24, r25
 742:	91 2d       	mov	r25, r1
 744:	11 24       	eor	r1, r1
 746:	96 95       	lsr	r25
 748:	96 95       	lsr	r25
 74a:	96 95       	lsr	r25
 74c:	99 0f       	add	r25, r25
 74e:	29 2f       	mov	r18, r25
 750:	22 0f       	add	r18, r18
 752:	22 0f       	add	r18, r18
 754:	92 0f       	add	r25, r18
 756:	f8 2f       	mov	r31, r24
 758:	f9 1b       	sub	r31, r25
 75a:	ff 8f       	std	Y+31, r31	; 0x1f
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	6a e0       	ldi	r22, 0x0A	; 10
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
 766:	68 a3       	std	Y+32, r22	; 0x20
 768:	be 01       	movw	r22, r28
 76a:	61 5e       	subi	r22, 0xE1	; 225
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	ce 01       	movw	r24, r28
 770:	0e 94 60 03 	call	0x6c0	; 0x6c0 <_ZN8SevenSeg12shiftInBytesEPh>
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	8a 87       	std	Y+10, r24	; 0x0a
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <_ZN8SevenSegD1Ev>:

// default destructor
SevenSeg::~SevenSeg()
 77e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <_ZN18ShiftRegister_SIPOD1Ev>
 782:	08 95       	ret

00000784 <_ZN11TaskManagerC1EP5Timer>:


#include "TaskManager.h"

// default constructor
TaskManager::TaskManager( Timer * timerPtr )
 784:	fc 01       	movw	r30, r24
{
	
	timer = timerPtr;
 786:	70 8b       	std	Z+16, r23	; 0x10
 788:	67 87       	std	Z+15, r22	; 0x0f
	
	//At initialization there should be zero loaded tasks. 
	loadedTasks = 0;
 78a:	11 8a       	std	Z+17, r1	; 0x11
	
	//Should be initialized to a prime number
	randNum = RANDOM_GEN_SEED;
 78c:	87 e0       	ldi	r24, 0x07	; 7
 78e:	82 8b       	std	Z+18, r24	; 0x12
 790:	08 95       	ret

00000792 <_ZN11TaskManager7addTaskEPFvvEh>:

//Add a task to the task list.
//Priority; Range between 0-250. Closer to 0, the more likely task will run. 0 is realtime
void TaskManager::addTask( void (*task) (void), uint8_t priority ){
	
	tasks[ loadedTasks ] = task;
 792:	fc 01       	movw	r30, r24
 794:	21 89       	ldd	r18, Z+17	; 0x11
 796:	e2 2f       	mov	r30, r18
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	df 01       	movw	r26, r30
 79c:	aa 0f       	add	r26, r26
 79e:	bb 1f       	adc	r27, r27
 7a0:	a8 0f       	add	r26, r24
 7a2:	b9 1f       	adc	r27, r25
 7a4:	16 96       	adiw	r26, 0x06	; 6
 7a6:	7c 93       	st	X, r23
 7a8:	6e 93       	st	-X, r22
 7aa:	15 97       	sbiw	r26, 0x05	; 5
	
	taskPriority[ loadedTasks ] = priority;
 7ac:	e8 0f       	add	r30, r24
 7ae:	f9 1f       	adc	r31, r25
 7b0:	40 83       	st	Z, r20
	
	loadedTasks++;
 7b2:	2f 5f       	subi	r18, 0xFF	; 255
 7b4:	fc 01       	movw	r30, r24
 7b6:	21 8b       	std	Z+17, r18	; 0x11
 7b8:	08 95       	ret

000007ba <_ZN11TaskManager20generateRandomNumberEv>:
	}
	
}

void TaskManager::generateRandomNumber( void )
{
 7ba:	fc 01       	movw	r30, r24
	randNum = (randNum*109+89)%251;
 7bc:	22 89       	ldd	r18, Z+18	; 0x12
 7be:	8d e6       	ldi	r24, 0x6D	; 109
 7c0:	28 9f       	mul	r18, r24
 7c2:	90 01       	movw	r18, r0
 7c4:	11 24       	eor	r1, r1
 7c6:	c9 01       	movw	r24, r18
 7c8:	87 5a       	subi	r24, 0xA7	; 167
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	6b ef       	ldi	r22, 0xFB	; 251
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	0e 94 b1 04 	call	0x962	; 0x962 <__divmodhi4>
 7d4:	82 8b       	std	Z+18, r24	; 0x12
 7d6:	08 95       	ret

000007d8 <_ZN11TaskManager8runTasksEv>:
	
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
 7d8:	cf 92       	push	r12
 7da:	df 92       	push	r13
 7dc:	ef 92       	push	r14
 7de:	ff 92       	push	r15
 7e0:	0f 93       	push	r16
 7e2:	1f 93       	push	r17
 7e4:	cf 93       	push	r28
 7e6:	df 93       	push	r29
	for( int i=0; i < loadedTasks ; i++){
 7e8:	dc 01       	movw	r26, r24
 7ea:	51 96       	adiw	r26, 0x11	; 17
 7ec:	2c 91       	ld	r18, X
 7ee:	22 23       	and	r18, r18
 7f0:	f1 f0       	breq	.+60     	; 0x82e <_ZN11TaskManager8runTasksEv+0x56>
 7f2:	ec 01       	movw	r28, r24
 7f4:	6c 01       	movw	r12, r24
 7f6:	7c 01       	movw	r14, r24
 7f8:	00 e0       	ldi	r16, 0x00	; 0
 7fa:	10 e0       	ldi	r17, 0x00	; 0
		
		//Generate random number for seeing if task should run
		this->generateRandomNumber();
 7fc:	ce 01       	movw	r24, r28
 7fe:	0e 94 dd 03 	call	0x7ba	; 0x7ba <_ZN11TaskManager20generateRandomNumberEv>
		if( taskPriority[i] <= randNum ){
 802:	f6 01       	movw	r30, r12
 804:	91 91       	ld	r25, Z+
 806:	6f 01       	movw	r12, r30
 808:	8a 89       	ldd	r24, Y+18	; 0x12
 80a:	89 17       	cp	r24, r25
 80c:	30 f0       	brcs	.+12     	; 0x81a <_ZN11TaskManager8runTasksEv+0x42>
			
			//Run the task
			(*tasks[i]) (); 
 80e:	d7 01       	movw	r26, r14
 810:	15 96       	adiw	r26, 0x05	; 5
 812:	ed 91       	ld	r30, X+
 814:	fc 91       	ld	r31, X
 816:	16 97       	sbiw	r26, 0x06	; 6
 818:	09 95       	icall
	loadedTasks++;
}

void TaskManager::runTasks( void )
{
	for( int i=0; i < loadedTasks ; i++){
 81a:	0f 5f       	subi	r16, 0xFF	; 255
 81c:	1f 4f       	sbci	r17, 0xFF	; 255
 81e:	b2 e0       	ldi	r27, 0x02	; 2
 820:	eb 0e       	add	r14, r27
 822:	f1 1c       	adc	r15, r1
 824:	89 89       	ldd	r24, Y+17	; 0x11
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	08 17       	cp	r16, r24
 82a:	19 07       	cpc	r17, r25
 82c:	3c f3       	brlt	.-50     	; 0x7fc <_ZN11TaskManager8runTasksEv+0x24>
			(*tasks[i]) (); 
		}
		
	}
	
}
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	1f 91       	pop	r17
 834:	0f 91       	pop	r16
 836:	ff 90       	pop	r15
 838:	ef 90       	pop	r14
 83a:	df 90       	pop	r13
 83c:	cf 90       	pop	r12
 83e:	08 95       	ret

00000840 <_ZN7TriggerC1Ev>:

// default constructor
Trigger::Trigger()
{
	//Initialize the output pin.
	DDRD |= (1 << PORTD2);
 840:	52 9a       	sbi	0x0a, 2	; 10
	
	//Used for marking a point in time.
	timeStamp = 0;
 842:	fc 01       	movw	r30, r24
 844:	13 82       	std	Z+3, r1	; 0x03
 846:	14 82       	std	Z+4, r1	; 0x04
 848:	15 82       	std	Z+5, r1	; 0x05
 84a:	16 82       	std	Z+6, r1	; 0x06
 84c:	08 95       	ret

0000084e <_ZN7Trigger11getTimerRefEP5Timer>:

} //Trigger

void Trigger::getTimerRef( Timer * timerPtr )
{
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	ec 01       	movw	r28, r24
 854:	cb 01       	movw	r24, r22
	timer = timerPtr;
 856:	7a 83       	std	Y+2, r23	; 0x02
 858:	69 83       	std	Y+1, r22	; 0x01
	
	//Initialize the time stamp
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
 85a:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN5Timer6millisEv>
 85e:	6b 83       	std	Y+3, r22	; 0x03
 860:	7c 83       	std	Y+4, r23	; 0x04
 862:	8d 83       	std	Y+5, r24	; 0x05
 864:	9e 83       	std	Y+6, r25	; 0x06
}
 866:	df 91       	pop	r29
 868:	cf 91       	pop	r28
 86a:	08 95       	ret

0000086c <_ZN7Trigger9conditionEv>:
	}
}

//Sets the condition to run the run() method.
//Ends up creating a pulse with a pulse width of 1ms. period of 1s.
uint8_t Trigger::condition(void){
 86c:	fc 01       	movw	r30, r24
	
	if ( triggerLow == true ){
 86e:	80 81       	ld	r24, Z
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	81 f4       	brne	.+32     	; 0x894 <_ZN7Trigger9conditionEv+0x28>
		if ( timer->elapsed_millis(timeStamp) > TRIGGER_HIGH ){
 874:	43 81       	ldd	r20, Z+3	; 0x03
 876:	54 81       	ldd	r21, Z+4	; 0x04
 878:	65 81       	ldd	r22, Z+5	; 0x05
 87a:	76 81       	ldd	r23, Z+6	; 0x06
 87c:	81 81       	ldd	r24, Z+1	; 0x01
 87e:	92 81       	ldd	r25, Z+2	; 0x02
 880:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Timer14elapsed_millisEm>
 884:	21 e0       	ldi	r18, 0x01	; 1
 886:	6b 30       	cpi	r22, 0x0B	; 11
 888:	71 05       	cpc	r23, r1
 88a:	81 05       	cpc	r24, r1
 88c:	91 05       	cpc	r25, r1
 88e:	88 f4       	brcc	.+34     	; 0x8b2 <_ZN7Trigger9conditionEv+0x46>
 890:	20 e0       	ldi	r18, 0x00	; 0
 892:	0f c0       	rjmp	.+30     	; 0x8b2 <_ZN7Trigger9conditionEv+0x46>
		}
		else{
			return false;
		}
	} else{
		if ( timer->elapsed_millis(timeStamp) > TRIGGER_LOW ){
 894:	43 81       	ldd	r20, Z+3	; 0x03
 896:	54 81       	ldd	r21, Z+4	; 0x04
 898:	65 81       	ldd	r22, Z+5	; 0x05
 89a:	76 81       	ldd	r23, Z+6	; 0x06
 89c:	81 81       	ldd	r24, Z+1	; 0x01
 89e:	92 81       	ldd	r25, Z+2	; 0x02
 8a0:	0e 94 8f 04 	call	0x91e	; 0x91e <_ZN5Timer14elapsed_millisEm>
 8a4:	21 e0       	ldi	r18, 0x01	; 1
 8a6:	61 31       	cpi	r22, 0x11	; 17
 8a8:	77 42       	sbci	r23, 0x27	; 39
 8aa:	81 05       	cpc	r24, r1
 8ac:	91 05       	cpc	r25, r1
 8ae:	08 f4       	brcc	.+2      	; 0x8b2 <_ZN7Trigger9conditionEv+0x46>
 8b0:	20 e0       	ldi	r18, 0x00	; 0
			return true;
		} else {
			return false;
		}
	}
}
 8b2:	82 2f       	mov	r24, r18
 8b4:	08 95       	ret

000008b6 <_ZN7Trigger3runEv>:
	//Timer->millis returns the number of 0.1ms since epoche
	timeStamp = timer->millis();
}

//Runs the trigger task.
void Trigger::run(){
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	ec 01       	movw	r28, r24
	
	if( this->condition() == true ){
 8bc:	0e 94 36 04 	call	0x86c	; 0x86c <_ZN7Trigger9conditionEv>
 8c0:	81 30       	cpi	r24, 0x01	; 1
 8c2:	89 f4       	brne	.+34     	; 0x8e6 <_ZN7Trigger3runEv+0x30>
		
		//update time stamp since last run
		timeStamp = timer->millis();
 8c4:	89 81       	ldd	r24, Y+1	; 0x01
 8c6:	9a 81       	ldd	r25, Y+2	; 0x02
 8c8:	0e 94 a1 04 	call	0x942	; 0x942 <_ZN5Timer6millisEv>
 8cc:	6b 83       	std	Y+3, r22	; 0x03
 8ce:	7c 83       	std	Y+4, r23	; 0x04
 8d0:	8d 83       	std	Y+5, r24	; 0x05
 8d2:	9e 83       	std	Y+6, r25	; 0x06
		
		if (triggerLow == true){
 8d4:	88 81       	ld	r24, Y
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	19 f4       	brne	.+6      	; 0x8e0 <_ZN7Trigger3runEv+0x2a>
			triggerLow = false;
 8da:	18 82       	st	Y, r1
		
			//Set pin low.
			PORTD &= ~( 1 << PORTD2);
 8dc:	5a 98       	cbi	0x0b, 2	; 11
 8de:	03 c0       	rjmp	.+6      	; 0x8e6 <_ZN7Trigger3runEv+0x30>
		} else {
		
			triggerLow = true;	
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	88 83       	st	Y, r24
			//Set pin high
			PORTD |= ( 1 << PORTD2);
 8e4:	5a 9a       	sbi	0x0b, 2	; 11
		}
	}
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <_ZN7TriggerD1Ev>:
		}
	}
}

// default destructor
Trigger::~Trigger()
 8ec:	08 95       	ret

000008ee <_ZN5TimerC1Ev>:
	fixedTime = this->millis();
}

void Timer::resumeTimer( void )
{
	step = fixedTime;
 8ee:	fc 01       	movw	r30, r24
 8f0:	10 82       	st	Z, r1
 8f2:	11 82       	std	Z+1, r1	; 0x01
 8f4:	12 82       	std	Z+2, r1	; 0x02
 8f6:	13 82       	std	Z+3, r1	; 0x03
 8f8:	14 82       	std	Z+4, r1	; 0x04
 8fa:	15 82       	std	Z+5, r1	; 0x05
 8fc:	16 82       	std	Z+6, r1	; 0x06
 8fe:	17 82       	std	Z+7, r1	; 0x07
 900:	08 95       	ret

00000902 <_ZN5Timer14incrementTimerEv>:
 902:	fc 01       	movw	r30, r24
 904:	40 81       	ld	r20, Z
 906:	51 81       	ldd	r21, Z+1	; 0x01
 908:	62 81       	ldd	r22, Z+2	; 0x02
 90a:	73 81       	ldd	r23, Z+3	; 0x03
 90c:	4f 5f       	subi	r20, 0xFF	; 255
 90e:	5f 4f       	sbci	r21, 0xFF	; 255
 910:	6f 4f       	sbci	r22, 0xFF	; 255
 912:	7f 4f       	sbci	r23, 0xFF	; 255
 914:	40 83       	st	Z, r20
 916:	51 83       	std	Z+1, r21	; 0x01
 918:	62 83       	std	Z+2, r22	; 0x02
 91a:	73 83       	std	Z+3, r23	; 0x03
 91c:	08 95       	ret

0000091e <_ZN5Timer14elapsed_millisEm>:
}

uint32_t Timer::elapsed_millis( uint32_t comparison )
{	
 91e:	0f 93       	push	r16
 920:	1f 93       	push	r17
	return (step - comparison);	
 922:	fc 01       	movw	r30, r24
 924:	80 81       	ld	r24, Z
 926:	91 81       	ldd	r25, Z+1	; 0x01
 928:	a2 81       	ldd	r26, Z+2	; 0x02
 92a:	b3 81       	ldd	r27, Z+3	; 0x03
 92c:	8c 01       	movw	r16, r24
 92e:	9d 01       	movw	r18, r26
 930:	04 1b       	sub	r16, r20
 932:	15 0b       	sbc	r17, r21
 934:	26 0b       	sbc	r18, r22
 936:	37 0b       	sbc	r19, r23
 938:	c9 01       	movw	r24, r18
 93a:	b8 01       	movw	r22, r16
}
 93c:	1f 91       	pop	r17
 93e:	0f 91       	pop	r16
 940:	08 95       	ret

00000942 <_ZN5Timer6millisEv>:

uint32_t Timer::millis( void )
{
	return step;
 942:	fc 01       	movw	r30, r24
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	82 81       	ldd	r24, Z+2	; 0x02
 94a:	93 81       	ldd	r25, Z+3	; 0x03
}
 94c:	08 95       	ret

0000094e <_ZN5Timer8wait_1usEv>:
	//Variable to find the difference between a current value
	//of a timer and a previous value
	uint8_t difference = 0;
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
 94e:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
		difference = TCNT2 - timerValue;
 952:	e2 eb       	ldi	r30, 0xB2	; 178
 954:	f0 e0       	ldi	r31, 0x00	; 0
 956:	80 81       	ld	r24, Z
 958:	89 1b       	sub	r24, r25
		
	//Read the value of the TCNT0 timer0
	uint8_t timerValue = TCNT2;
		
	//Wait until difference is 16 == 1us
	while( difference < 16 ){
 95a:	80 31       	cpi	r24, 0x10	; 16
 95c:	e0 f3       	brcs	.-8      	; 0x956 <_ZN5Timer8wait_1usEv+0x8>
		difference = TCNT2 - timerValue;
	}
}
 95e:	08 95       	ret

00000960 <_ZN5TimerD1Ev>:

// default destructor
Timer::~Timer()
 960:	08 95       	ret

00000962 <__divmodhi4>:
 962:	97 fb       	bst	r25, 7
 964:	07 2e       	mov	r0, r23
 966:	16 f4       	brtc	.+4      	; 0x96c <__divmodhi4+0xa>
 968:	00 94       	com	r0
 96a:	07 d0       	rcall	.+14     	; 0x97a <__divmodhi4_neg1>
 96c:	77 fd       	sbrc	r23, 7
 96e:	09 d0       	rcall	.+18     	; 0x982 <__divmodhi4_neg2>
 970:	0e 94 c5 04 	call	0x98a	; 0x98a <__udivmodhi4>
 974:	07 fc       	sbrc	r0, 7
 976:	05 d0       	rcall	.+10     	; 0x982 <__divmodhi4_neg2>
 978:	3e f4       	brtc	.+14     	; 0x988 <__divmodhi4_exit>

0000097a <__divmodhi4_neg1>:
 97a:	90 95       	com	r25
 97c:	81 95       	neg	r24
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__divmodhi4_neg2>:
 982:	70 95       	com	r23
 984:	61 95       	neg	r22
 986:	7f 4f       	sbci	r23, 0xFF	; 255

00000988 <__divmodhi4_exit>:
 988:	08 95       	ret

0000098a <__udivmodhi4>:
 98a:	aa 1b       	sub	r26, r26
 98c:	bb 1b       	sub	r27, r27
 98e:	51 e1       	ldi	r21, 0x11	; 17
 990:	07 c0       	rjmp	.+14     	; 0x9a0 <__udivmodhi4_ep>

00000992 <__udivmodhi4_loop>:
 992:	aa 1f       	adc	r26, r26
 994:	bb 1f       	adc	r27, r27
 996:	a6 17       	cp	r26, r22
 998:	b7 07       	cpc	r27, r23
 99a:	10 f0       	brcs	.+4      	; 0x9a0 <__udivmodhi4_ep>
 99c:	a6 1b       	sub	r26, r22
 99e:	b7 0b       	sbc	r27, r23

000009a0 <__udivmodhi4_ep>:
 9a0:	88 1f       	adc	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	5a 95       	dec	r21
 9a6:	a9 f7       	brne	.-22     	; 0x992 <__udivmodhi4_loop>
 9a8:	80 95       	com	r24
 9aa:	90 95       	com	r25
 9ac:	bc 01       	movw	r22, r24
 9ae:	cd 01       	movw	r24, r26
 9b0:	08 95       	ret

000009b2 <__tablejump2__>:
 9b2:	ee 0f       	add	r30, r30
 9b4:	ff 1f       	adc	r31, r31
 9b6:	05 90       	lpm	r0, Z+
 9b8:	f4 91       	lpm	r31, Z
 9ba:	e0 2d       	mov	r30, r0
 9bc:	09 94       	ijmp

000009be <malloc>:
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	91 05       	cpc	r25, r1
 9c6:	10 f4       	brcc	.+4      	; 0x9cc <malloc+0xe>
 9c8:	82 e0       	ldi	r24, 0x02	; 2
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <__flp>
 9d0:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <__flp+0x1>
 9d4:	20 e0       	ldi	r18, 0x00	; 0
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	c0 e0       	ldi	r28, 0x00	; 0
 9da:	d0 e0       	ldi	r29, 0x00	; 0
 9dc:	30 97       	sbiw	r30, 0x00	; 0
 9de:	11 f1       	breq	.+68     	; 0xa24 <malloc+0x66>
 9e0:	40 81       	ld	r20, Z
 9e2:	51 81       	ldd	r21, Z+1	; 0x01
 9e4:	48 17       	cp	r20, r24
 9e6:	59 07       	cpc	r21, r25
 9e8:	c0 f0       	brcs	.+48     	; 0xa1a <malloc+0x5c>
 9ea:	48 17       	cp	r20, r24
 9ec:	59 07       	cpc	r21, r25
 9ee:	61 f4       	brne	.+24     	; 0xa08 <malloc+0x4a>
 9f0:	82 81       	ldd	r24, Z+2	; 0x02
 9f2:	93 81       	ldd	r25, Z+3	; 0x03
 9f4:	20 97       	sbiw	r28, 0x00	; 0
 9f6:	19 f0       	breq	.+6      	; 0x9fe <malloc+0x40>
 9f8:	9b 83       	std	Y+3, r25	; 0x03
 9fa:	8a 83       	std	Y+2, r24	; 0x02
 9fc:	2b c0       	rjmp	.+86     	; 0xa54 <malloc+0x96>
 9fe:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__flp+0x1>
 a02:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__flp>
 a06:	26 c0       	rjmp	.+76     	; 0xa54 <malloc+0x96>
 a08:	21 15       	cp	r18, r1
 a0a:	31 05       	cpc	r19, r1
 a0c:	19 f0       	breq	.+6      	; 0xa14 <malloc+0x56>
 a0e:	42 17       	cp	r20, r18
 a10:	53 07       	cpc	r21, r19
 a12:	18 f4       	brcc	.+6      	; 0xa1a <malloc+0x5c>
 a14:	9a 01       	movw	r18, r20
 a16:	be 01       	movw	r22, r28
 a18:	df 01       	movw	r26, r30
 a1a:	ef 01       	movw	r28, r30
 a1c:	02 80       	ldd	r0, Z+2	; 0x02
 a1e:	f3 81       	ldd	r31, Z+3	; 0x03
 a20:	e0 2d       	mov	r30, r0
 a22:	dc cf       	rjmp	.-72     	; 0x9dc <malloc+0x1e>
 a24:	21 15       	cp	r18, r1
 a26:	31 05       	cpc	r19, r1
 a28:	09 f1       	breq	.+66     	; 0xa6c <malloc+0xae>
 a2a:	28 1b       	sub	r18, r24
 a2c:	39 0b       	sbc	r19, r25
 a2e:	24 30       	cpi	r18, 0x04	; 4
 a30:	31 05       	cpc	r19, r1
 a32:	90 f4       	brcc	.+36     	; 0xa58 <malloc+0x9a>
 a34:	12 96       	adiw	r26, 0x02	; 2
 a36:	8d 91       	ld	r24, X+
 a38:	9c 91       	ld	r25, X
 a3a:	13 97       	sbiw	r26, 0x03	; 3
 a3c:	61 15       	cp	r22, r1
 a3e:	71 05       	cpc	r23, r1
 a40:	21 f0       	breq	.+8      	; 0xa4a <malloc+0x8c>
 a42:	fb 01       	movw	r30, r22
 a44:	93 83       	std	Z+3, r25	; 0x03
 a46:	82 83       	std	Z+2, r24	; 0x02
 a48:	04 c0       	rjmp	.+8      	; 0xa52 <malloc+0x94>
 a4a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__flp+0x1>
 a4e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__flp>
 a52:	fd 01       	movw	r30, r26
 a54:	32 96       	adiw	r30, 0x02	; 2
 a56:	44 c0       	rjmp	.+136    	; 0xae0 <malloc+0x122>
 a58:	fd 01       	movw	r30, r26
 a5a:	e2 0f       	add	r30, r18
 a5c:	f3 1f       	adc	r31, r19
 a5e:	81 93       	st	Z+, r24
 a60:	91 93       	st	Z+, r25
 a62:	22 50       	subi	r18, 0x02	; 2
 a64:	31 09       	sbc	r19, r1
 a66:	2d 93       	st	X+, r18
 a68:	3c 93       	st	X, r19
 a6a:	3a c0       	rjmp	.+116    	; 0xae0 <malloc+0x122>
 a6c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
 a70:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
 a74:	23 2b       	or	r18, r19
 a76:	41 f4       	brne	.+16     	; 0xa88 <malloc+0xca>
 a78:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 a7c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 a80:	30 93 55 01 	sts	0x0155, r19	; 0x800155 <__brkval+0x1>
 a84:	20 93 54 01 	sts	0x0154, r18	; 0x800154 <__brkval>
 a88:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 a8c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 a90:	21 15       	cp	r18, r1
 a92:	31 05       	cpc	r19, r1
 a94:	41 f4       	brne	.+16     	; 0xaa6 <malloc+0xe8>
 a96:	2d b7       	in	r18, 0x3d	; 61
 a98:	3e b7       	in	r19, 0x3e	; 62
 a9a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 a9e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 aa2:	24 1b       	sub	r18, r20
 aa4:	35 0b       	sbc	r19, r21
 aa6:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <__brkval>
 aaa:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <__brkval+0x1>
 aae:	e2 17       	cp	r30, r18
 ab0:	f3 07       	cpc	r31, r19
 ab2:	a0 f4       	brcc	.+40     	; 0xadc <malloc+0x11e>
 ab4:	2e 1b       	sub	r18, r30
 ab6:	3f 0b       	sbc	r19, r31
 ab8:	28 17       	cp	r18, r24
 aba:	39 07       	cpc	r19, r25
 abc:	78 f0       	brcs	.+30     	; 0xadc <malloc+0x11e>
 abe:	ac 01       	movw	r20, r24
 ac0:	4e 5f       	subi	r20, 0xFE	; 254
 ac2:	5f 4f       	sbci	r21, 0xFF	; 255
 ac4:	24 17       	cp	r18, r20
 ac6:	35 07       	cpc	r19, r21
 ac8:	48 f0       	brcs	.+18     	; 0xadc <malloc+0x11e>
 aca:	4e 0f       	add	r20, r30
 acc:	5f 1f       	adc	r21, r31
 ace:	50 93 55 01 	sts	0x0155, r21	; 0x800155 <__brkval+0x1>
 ad2:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <__brkval>
 ad6:	81 93       	st	Z+, r24
 ad8:	91 93       	st	Z+, r25
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <malloc+0x122>
 adc:	e0 e0       	ldi	r30, 0x00	; 0
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	cf 01       	movw	r24, r30
 ae2:	df 91       	pop	r29
 ae4:	cf 91       	pop	r28
 ae6:	08 95       	ret

00000ae8 <free>:
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	00 97       	sbiw	r24, 0x00	; 0
 af2:	09 f4       	brne	.+2      	; 0xaf6 <free+0xe>
 af4:	8c c0       	rjmp	.+280    	; 0xc0e <free+0x126>
 af6:	fc 01       	movw	r30, r24
 af8:	32 97       	sbiw	r30, 0x02	; 2
 afa:	13 82       	std	Z+3, r1	; 0x03
 afc:	12 82       	std	Z+2, r1	; 0x02
 afe:	00 91 56 01 	lds	r16, 0x0156	; 0x800156 <__flp>
 b02:	10 91 57 01 	lds	r17, 0x0157	; 0x800157 <__flp+0x1>
 b06:	01 15       	cp	r16, r1
 b08:	11 05       	cpc	r17, r1
 b0a:	81 f4       	brne	.+32     	; 0xb2c <free+0x44>
 b0c:	20 81       	ld	r18, Z
 b0e:	31 81       	ldd	r19, Z+1	; 0x01
 b10:	82 0f       	add	r24, r18
 b12:	93 1f       	adc	r25, r19
 b14:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
 b18:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
 b1c:	28 17       	cp	r18, r24
 b1e:	39 07       	cpc	r19, r25
 b20:	79 f5       	brne	.+94     	; 0xb80 <free+0x98>
 b22:	f0 93 55 01 	sts	0x0155, r31	; 0x800155 <__brkval+0x1>
 b26:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <__brkval>
 b2a:	71 c0       	rjmp	.+226    	; 0xc0e <free+0x126>
 b2c:	d8 01       	movw	r26, r16
 b2e:	40 e0       	ldi	r20, 0x00	; 0
 b30:	50 e0       	ldi	r21, 0x00	; 0
 b32:	ae 17       	cp	r26, r30
 b34:	bf 07       	cpc	r27, r31
 b36:	50 f4       	brcc	.+20     	; 0xb4c <free+0x64>
 b38:	12 96       	adiw	r26, 0x02	; 2
 b3a:	2d 91       	ld	r18, X+
 b3c:	3c 91       	ld	r19, X
 b3e:	13 97       	sbiw	r26, 0x03	; 3
 b40:	ad 01       	movw	r20, r26
 b42:	21 15       	cp	r18, r1
 b44:	31 05       	cpc	r19, r1
 b46:	09 f1       	breq	.+66     	; 0xb8a <free+0xa2>
 b48:	d9 01       	movw	r26, r18
 b4a:	f3 cf       	rjmp	.-26     	; 0xb32 <free+0x4a>
 b4c:	9d 01       	movw	r18, r26
 b4e:	da 01       	movw	r26, r20
 b50:	33 83       	std	Z+3, r19	; 0x03
 b52:	22 83       	std	Z+2, r18	; 0x02
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	86 0f       	add	r24, r22
 b5a:	97 1f       	adc	r25, r23
 b5c:	82 17       	cp	r24, r18
 b5e:	93 07       	cpc	r25, r19
 b60:	69 f4       	brne	.+26     	; 0xb7c <free+0x94>
 b62:	ec 01       	movw	r28, r24
 b64:	28 81       	ld	r18, Y
 b66:	39 81       	ldd	r19, Y+1	; 0x01
 b68:	26 0f       	add	r18, r22
 b6a:	37 1f       	adc	r19, r23
 b6c:	2e 5f       	subi	r18, 0xFE	; 254
 b6e:	3f 4f       	sbci	r19, 0xFF	; 255
 b70:	31 83       	std	Z+1, r19	; 0x01
 b72:	20 83       	st	Z, r18
 b74:	8a 81       	ldd	r24, Y+2	; 0x02
 b76:	9b 81       	ldd	r25, Y+3	; 0x03
 b78:	93 83       	std	Z+3, r25	; 0x03
 b7a:	82 83       	std	Z+2, r24	; 0x02
 b7c:	45 2b       	or	r20, r21
 b7e:	29 f4       	brne	.+10     	; 0xb8a <free+0xa2>
 b80:	f0 93 57 01 	sts	0x0157, r31	; 0x800157 <__flp+0x1>
 b84:	e0 93 56 01 	sts	0x0156, r30	; 0x800156 <__flp>
 b88:	42 c0       	rjmp	.+132    	; 0xc0e <free+0x126>
 b8a:	13 96       	adiw	r26, 0x03	; 3
 b8c:	fc 93       	st	X, r31
 b8e:	ee 93       	st	-X, r30
 b90:	12 97       	sbiw	r26, 0x02	; 2
 b92:	ed 01       	movw	r28, r26
 b94:	49 91       	ld	r20, Y+
 b96:	59 91       	ld	r21, Y+
 b98:	9e 01       	movw	r18, r28
 b9a:	24 0f       	add	r18, r20
 b9c:	35 1f       	adc	r19, r21
 b9e:	e2 17       	cp	r30, r18
 ba0:	f3 07       	cpc	r31, r19
 ba2:	71 f4       	brne	.+28     	; 0xbc0 <free+0xd8>
 ba4:	80 81       	ld	r24, Z
 ba6:	91 81       	ldd	r25, Z+1	; 0x01
 ba8:	84 0f       	add	r24, r20
 baa:	95 1f       	adc	r25, r21
 bac:	02 96       	adiw	r24, 0x02	; 2
 bae:	11 96       	adiw	r26, 0x01	; 1
 bb0:	9c 93       	st	X, r25
 bb2:	8e 93       	st	-X, r24
 bb4:	82 81       	ldd	r24, Z+2	; 0x02
 bb6:	93 81       	ldd	r25, Z+3	; 0x03
 bb8:	13 96       	adiw	r26, 0x03	; 3
 bba:	9c 93       	st	X, r25
 bbc:	8e 93       	st	-X, r24
 bbe:	12 97       	sbiw	r26, 0x02	; 2
 bc0:	e0 e0       	ldi	r30, 0x00	; 0
 bc2:	f0 e0       	ldi	r31, 0x00	; 0
 bc4:	d8 01       	movw	r26, r16
 bc6:	12 96       	adiw	r26, 0x02	; 2
 bc8:	8d 91       	ld	r24, X+
 bca:	9c 91       	ld	r25, X
 bcc:	13 97       	sbiw	r26, 0x03	; 3
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <free+0xf0>
 bd2:	f8 01       	movw	r30, r16
 bd4:	8c 01       	movw	r16, r24
 bd6:	f6 cf       	rjmp	.-20     	; 0xbc4 <free+0xdc>
 bd8:	8d 91       	ld	r24, X+
 bda:	9c 91       	ld	r25, X
 bdc:	98 01       	movw	r18, r16
 bde:	2e 5f       	subi	r18, 0xFE	; 254
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	82 0f       	add	r24, r18
 be4:	93 1f       	adc	r25, r19
 be6:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <__brkval>
 bea:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <__brkval+0x1>
 bee:	28 17       	cp	r18, r24
 bf0:	39 07       	cpc	r19, r25
 bf2:	69 f4       	brne	.+26     	; 0xc0e <free+0x126>
 bf4:	30 97       	sbiw	r30, 0x00	; 0
 bf6:	29 f4       	brne	.+10     	; 0xc02 <free+0x11a>
 bf8:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <__flp+0x1>
 bfc:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <__flp>
 c00:	02 c0       	rjmp	.+4      	; 0xc06 <free+0x11e>
 c02:	13 82       	std	Z+3, r1	; 0x03
 c04:	12 82       	std	Z+2, r1	; 0x02
 c06:	10 93 55 01 	sts	0x0155, r17	; 0x800155 <__brkval+0x1>
 c0a:	00 93 54 01 	sts	0x0154, r16	; 0x800154 <__brkval>
 c0e:	df 91       	pop	r29
 c10:	cf 91       	pop	r28
 c12:	1f 91       	pop	r17
 c14:	0f 91       	pop	r16
 c16:	08 95       	ret

00000c18 <__do_global_dtors>:
 c18:	10 e0       	ldi	r17, 0x00	; 0
 c1a:	c5 e3       	ldi	r28, 0x35	; 53
 c1c:	d0 e0       	ldi	r29, 0x00	; 0
 c1e:	04 c0       	rjmp	.+8      	; 0xc28 <__do_global_dtors+0x10>
 c20:	fe 01       	movw	r30, r28
 c22:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__tablejump2__>
 c26:	21 96       	adiw	r28, 0x01	; 1
 c28:	c6 33       	cpi	r28, 0x36	; 54
 c2a:	d1 07       	cpc	r29, r17
 c2c:	c9 f7       	brne	.-14     	; 0xc20 <__do_global_dtors+0x8>
 c2e:	f8 94       	cli

00000c30 <__stop_program>:
 c30:	ff cf       	rjmp	.-2      	; 0xc30 <__stop_program>
